@article{dc0e71fb06103d71d942573ef53a9786c0297e56,
title = {Man-in-the-browser Attack: A Case Study on Malicious Browser Extensions},
year = {2019},
url = {https://www.semanticscholar.org/paper/dc0e71fb06103d71d942573ef53a9786c0297e56},
abstract = {Man-in-the-browser (MitB) attacks, often implemented as malicious browser extensions, have the ability to alter the structure and contents of web pages, and stealthily change the data given by the user before it is sent to the server. This is done without the user or the online service (the server) noticing anything suspicious. In this study, we present a case study on the man-in-the-browser attack. Our proof-of-concept implementation demonstrates how easily this attack can be implemented as a malicious browser extension. The implementation is a UI-level, cross-browser implementation using JavaScript. We also successfully test the extension in a real online bank. By demonstrating a practical man-in-the-browser attack, our research highlights the need to better monitor and control malicious browser extensions.},
author = {Sampsa Rauti},
doi = {10.1007/978-981-15-4825-3_5},
}

@article{1b04c24fe528b5131f58adf50e323d8ce229adc8,
title = {Security in Computing and Communications: 7th International Symposium, SSCC 2019, Trivandrum, India, December 18–21, 2019, Revised Selected Papers},
year = {2020},
url = {https://www.semanticscholar.org/paper/1b04c24fe528b5131f58adf50e323d8ce229adc8},
abstract = {This book constitutes the refereed proceedings of the 7th International Symposium on Security in Computing and Communications, SSCC 2019, held in Trivandrum, India, in December 2019. The 22 revised full papers and 7 revised short papers presented were carefully reviewed and selected from 61 submissions. The papers cover wide research fields including cryptography, database and storage security, human and societal aspects of security and privacy.},
author = {S. Thampi and G. Pérez and R. Ko and D. Rawat},
journal = {Security in Computing and Communications},
volume = {},
pages = {},
doi = {10.1007/978-981-15-4825-3},
}

@article{3786b1806d9c35ceae279149a4a75a3bbfb59b04,
title = {CrossFire: An Analysis of Firefox Extension-Reuse Vulnerabilities},
year = {2016},
url = {https://www.semanticscholar.org/paper/3786b1806d9c35ceae279149a4a75a3bbfb59b04},
abstract = {Extension architectures of popular web browsers have been carefully studied by the research community; however, the security impact of interactions between different extensions installed on a given system has received comparatively little attention. In this paper, we consider the impact of the lack of isolation between traditional Firefox browser extensions, and identify a novel extension-reuse vulnerability that allows adversaries to launch stealthy attacks against users. This attack leverages capability leaks from legitimate extensions to avoid the inclusion of security-sensitive API calls within the malicious extension itself, rendering extensions that use this technique difficult to detect through the manual vetting process that underpins the security of the Firefox extension ecosystem. We then present CROSSFIRE, a lightweight static analyzer to detect instances of extension-reuse vulnerabilities. CROSSFIRE uses a multi-stage static analysis to efficiently identify potential capability leaks in vulnerable, benign extensions. If a suspected vulnerability is identified, CROSSFIRE then produces a proof-ofconcept exploit instance – or, alternatively, an exploit template that can be adapted to rapidly craft a working attack that validates the vulnerability. To ascertain the prevalence of extension-reuse vulnerabilities, we performed a detailed analysis of the top 10 Firefox extensions, and ran further experiments on a random sample drawn from the top 2,000. The results indicate that popular extensions, downloaded by millions of users, contain numerous exploitable extension-reuse vulnerabilities. A case study also provides anecdotal evidence that malicious extensions exploiting extension-reuse vulnerabilities are indeed effective at cloaking themselves from extension vetters.},
author = {A. S. Buyukkayhan and Kaan Onarlioglu and William K. Robertson and E. Kirda},
doi = {10.14722/NDSS.2016.23149},
}

@article{3cc88fdfc8b91c7c771dc6e039ae06d13f8dc37d,
title = {A Survey on Countermeasures Against Man-in-the-Browser Attacks},
year = {2019},
url = {https://www.semanticscholar.org/paper/3cc88fdfc8b91c7c771dc6e039ae06d13f8dc37d},
abstract = {},
author = {Sampsa Rauti},
doi = {10.1007/978-3-030-49336-3_40},
}

@article{b071d5f335d5f1732f7bc512aff7db4ebb25ca28,
title = {A Cloud-based Framework for Security Analysis of Browser Extensions},
year = {2016},
url = {https://www.semanticscholar.org/paper/b071d5f335d5f1732f7bc512aff7db4ebb25ca28},
abstract = {Thesis (Master, Electrical & Computer Engineering) -- Queen's University, 2016-05-18 10:21:15.366},
author = {Saikat Das},
}

@article{762286723ae28179c180775e9ff9d4605a38402a,
title = {SENTINEL: Securing Legacy Firefox Extensions},
year = {2015},
url = {https://www.semanticscholar.org/paper/762286723ae28179c180775e9ff9d4605a38402a},
abstract = {Abstract A poorly designed web browser extension with a security vulnerability may expose the whole system to an attacker. Therefore, attacks directed at “benign-but-buggy” extensions, as well as extensions that have been written with malicious intent, pose significant security threats to a system running such components. Recent studies have indeed shown that many Firefox extensions are over-privileged, making them attractive attack targets. Unfortunately, users currently do not have many options when it comes to protecting themselves from extensions that may potentially be malicious. Once installed and executed, the extension is considered trusted. This paper introduces SENTINEL, a policy enforcer for the Firefox browser that gives fine-grained control to the user over the actions of existing JavaScript Firefox extensions. The user is able to define policies (or use predefined ones) and block common attacks such as data exfiltration, remote code execution, saved password theft, preference modification, phishing, browser window clickjacking, and namespace collision exploits. Our evaluation of SENTINEL shows that our prototype implementation can effectively prevent concrete, real-world Firefox extension attacks without a detrimental impact on the user's browsing experience.},
author = {Kaan Onarlioglu and A. S. Buyukkayhan and William K. Robertson and E. Kirda},
journal = {Comput. Secur.},
volume = {49},
pages = {147-161},
doi = {10.1016/j.cose.2014.12.002},
}

@article{537a2bc96926faef3a3c33ce670444ce08fa3b6c,
title = {SENTINEL: A DYNAMIC SECURITY POLICY CHECKER FOR FIREFOX EXTENSIONS},
year = {2014},
url = {https://www.semanticscholar.org/paper/537a2bc96926faef3a3c33ce670444ce08fa3b6c},
abstract = {SENTINEL: A DYNAMIC SECURITY POLICY CHECKER FOR FIREFOX EXTENSIONS Mustafa Battal M.S. in Computer Engineering Advisor: Asst. Prof. Dr. Bedir Tekinerdoğan December, 2014 A poorly designed web browser extension with a security vulnerability may expose the whole system to an attacker. Therefore, attacks directed at “benign-butbuggy” extensions, as well as extensions that have been written with malicious intents pose significant security threats to a system running such components. Recent studies have indeed shown that many Firefox extensions are over-privileged, making them attractive attack targets. Unfortunately, users currently do not have many options when it comes to protecting themselves from extensions that may potentially be malicious. Once installed and executed, the extension needs to be trusted. This thesis introduces Sentinel, a policy enforcer for the Firefox browser that gives fine-grained control to the user over the actions of existing JavaScript Firefox extensions. The user is able to define policies (or use predefined ones) and block common attacks such as data exfiltration, remote code execution, saved password theft, and preference modification. Our evaluation of Sentinel shows that our prototype implementation can effectively prevent concrete, real-world Firefox extension attacks without a detrimental impact on users’ browsing experience.},
author = {Mustafa Battal},
}

@article{f58956cff556638a41e2c9c3d3f72b8ea85b10b9,
title = {Securing Legacy Firefox Extensions with SENTINEL},
year = {2013},
url = {https://www.semanticscholar.org/paper/f58956cff556638a41e2c9c3d3f72b8ea85b10b9},
abstract = {A poorly designed web browser extension with a security vulnerability may expose the whole system to an attacker. Therefore, attacks directed at "benign-but-buggy" extensions, as well as extensions that have been written with malicious intents pose significant security threats to a system running such components. Recent studies have indeed shown that many Firefox extensions are over-privileged, making them attractive attack targets. Unfortunately, users currently do not have many options when it comes to protecting themselves from extensions that may potentially be malicious. Once installed and executed, the extension needs to be trusted. This paper introduces Sentinel, a policy enforcer for the Firefox browser that gives fine-grained control to the user over the actions of existing JavaScript Firefox extensions. The user is able to define policies (or use predefined ones) and block common attacks such as data exfiltration, remote code execution, saved password theft, and preference modification. Our evaluation of Sentinel shows that our prototype implementation can effectively prevent concrete, real-world Firefox extension attacks without a detrimental impact on users' browsing experience.},
author = {Kaan Onarlioglu and Mustafa Battal and William K. Robertson and E. Kirda},
doi = {10.1007/978-3-642-39235-1_7},
}

@article{f516d982f54188889cbd7a9128ab60c4a7cc4bf5,
title = {Extension Breakdown: Security Analysis of Browsers Extension Resources Control Policies},
year = {2017},
url = {https://www.semanticscholar.org/paper/f516d982f54188889cbd7a9128ab60c4a7cc4bf5},
abstract = {All major web browsers support browser extensions to add new features and extend their functionalities. Nevertheless, browser extensions have been the target of several attacks due to their tight relation with the browser environment. As a consequence, extensions have been abused in the past for malicious tasks such as private information gathering, browsing history retrieval, or passwords theft — leading to a number of severe targeted attacks. Even though no protection techniques existed in the past to secure extensions, all browsers now implement defensive countermeasures that, in theory, protect extensions and their resources from third party access. In this paper, we present two attacks that bypass these control techniques in every major browser family, enabling enumeration attacks against the list of installed extensions. In particular, we present a timing side-channel attack against the access control settings and an attack that takes advantage of poor programming practice, affecting a large number of Safari extensions. Due to the harmful nature of our findings, we also discuss possible countermeasures against our own attacks and reported our findings and countermeasures to the different actors involved. We believe that our study can help secure current implementations and help developers to avoid similar attacks in the future.},
author = {Iskander Sánchez-Rola and I. Santos and D. Balzarotti},
}

@article{eca5b18a2dfcc032a5c038ae7d20586f00131ce1,
title = {Architectural Vulnerabilities in Plug-and-Play Systems},
year = {2018},
url = {https://www.semanticscholar.org/paper/eca5b18a2dfcc032a5c038ae7d20586f00131ce1},
abstract = {Architectural Vulnerabilities in Plug-and-Play Systems Taylor Corrello, M.S. Rochester Institute of Technology, 2018 Supervisor: Dr. Mehdi Mirakhorli Plug-and-play architectures enhance systems’ extensibility by providing a framework that enables additional functionalities to be added or removed from the system at their runtime. Such frameworks are often implemented through a set of well-defined interfaces that form the extension points for the pluggable functionalities. However, the plug-ins can increase the applications attack surface or introduce untrusted behavior into the system. Designing a secure plug-and-play architecture is critical and non-trivial as the features provided by plug-ins are not known in advance. In this paper, we conduct an in-depth study of seven systems with plug-and-play architectures. In total, we have analyzed 3,183 vulnerabilities from Chromium, Thunderbird, Firefox, Pidgin, WordPress, Apache OfBiz, and OpenMRS whose core architecture is},
author = {Taylor Corrello},
}
