@article{e6bdb460aea36fb1480f3514fc7f4d71ea66aac4,
title = {Searching for processes and threads in Microsoft Windows memory dumps},
year = {2006},
url = {https://www.semanticscholar.org/paper/e6bdb460aea36fb1480f3514fc7f4d71ea66aac4},
abstract = {Current tools to analyze memory dumps of systems running Microsoft Windows usually build on the concept of enumerating lists maintained by the kernel to keep track of processes, threads and other objects. Therefore they will frequently fail to detect objects that are already terminated or which have been hidden by Direct Kernel Object Manipulation techniques. This article analyzes the in-memory structures which represent processes and threads. It develops search patterns which will then be used to scan the whole memory dump for traces of said objects, independent from the aforementioned lists. As demonstrated by a proof-of-concept implementation this approach could reveal hidden and terminated processes and threads, under some circumstances even after the system under examination has been rebooted.},
author = {Andreas Schuster},
journal = {Digit. Investig.},
volume = {3},
pages = {10-16},
doi = {10.1016/j.diin.2006.06.010},
}

@article{3311ed0c63d4ca707c49256655e401f37f25ec50,
title = {Using every part of the buffalo in Windows memory analysis},
year = {2007},
url = {https://www.semanticscholar.org/paper/3311ed0c63d4ca707c49256655e401f37f25ec50},
abstract = {All Windows memory analysis techniques depend on the examiner's ability to translate the virtual addresses used by programs and operating system components into the true locations of data in a memory image. In some memory images up to 20% of all the virtual addresses in use point to so called ''invalid'' pages that cannot be found using a naive method for address translation. This paper explains virtual address translation, enumerates the different states of invalid memory pages, and presents a more robust strategy for address translation. This new method incorporates invalid pages and even the paging file to greatly increase the completeness of the analysis. By using every available page, every part of the buffalo as it were, the examiner can better recreate the state of the machine as it existed at the time of imaging.},
author = {Jesse D. Kornblum},
journal = {Digit. Investig.},
volume = {4},
pages = {24-29},
doi = {10.1016/j.diin.2006.12.002},
}

@article{24721dea0c91551dcca2e179b42117eb7d8d4c55,
title = {A hardware-based memory acquisition procedure for digital investigations},
year = {2004},
url = {https://www.semanticscholar.org/paper/24721dea0c91551dcca2e179b42117eb7d8d4c55},
abstract = {The acquisition of volatile memory from a compromised computer is difficult to perform reliably because the acquisition procedure should not rely on untrusted code, such as the operating system or applications executing on top of it. In this paper, we present a procedure for acquiring volatile memory using a hardware expansion card that can copy memory to an external storage device. The card is installed into a PCI bus slot before an incident occurs and is disabled until a physical switch on the back of the system is pressed. The card cannot easily be detected by an attacker and the acquisition procedure does not rely on untrusted resources. We present general requirements for memory acquisition tools, our acquisition procedure, and the initial results of our hardware implementation of the procedure.},
author = {Brian D. Carrier and J. Grand},
journal = {Digit. Investig.},
volume = {1},
pages = {50-60},
doi = {10.1016/j.diin.2003.12.001},
}

@article{fae77910d82600443da3a4e698a05e7fed1c9562,
title = {FATKit: A framework for the extraction and analysis of digital forensic data from volatile system memory},
year = {2006},
url = {https://www.semanticscholar.org/paper/fae77910d82600443da3a4e698a05e7fed1c9562},
abstract = {We present the Forensic Analysis ToolKit (FATKit) - a modular, extensible framework that increases the practical applicability of volatile memory forensic analysis by freeing human analysts from the prohibitively-tedious aspects of low-level data extraction. FATKit allows analysts to focus on higher-level tasks by providing novel methods for automatically deriving digital object definitions from C source code, extracting those objects from memory images, and visualizing the underlying data in various ways. FATKit presently includes modules for general virtual address space reconstruction and visualization, as well as Linux- and Windows-specific kernel analysis.},
author = {Nick L. Petroni and A. Walters and T. Fraser and W. Arbaugh},
journal = {Digit. Investig.},
volume = {3},
pages = {197-210},
doi = {10.1016/j.diin.2006.10.001},
}

@article{a46fdf54e36c64212310246ca71e64cd66d1ffc7,
title = {Volatools : Integrating Volatile Memory Forensics into the Digital Investigation Process},
year = {2007},
url = {https://www.semanticscholar.org/paper/a46fdf54e36c64212310246ca71e64cd66d1ffc7},
abstract = {In this work, we demonstrate the integral role of volatile memory analysis in the digital investigation process and how that analysis can be used to help address many of the challenges facing the digital forensics community. We also provide a look at some of the shortcomings of existing approaches to live response. Finally, we provide the technical details for extracting in-memory cryptographic keying material from a popular disk encryption application without knowledge of the password.},
author = {A. Walters and Nick L. Petroni},
}

@article{3494657d981b651cf09f9cf88643855bc74a0a9c,
title = {BodySnatcher: Towards reliable volatile memory acquisition by software},
year = {2007},
url = {https://www.semanticscholar.org/paper/3494657d981b651cf09f9cf88643855bc74a0a9c},
abstract = {Recently there has been a surge in interest in memory forensics: the acquisition and analysis of the contents of physical memory obtained from live hosts. The emergence of kernel level rootkits, anti-forensics, and the threat of subversion that they pose threatens to undermine the reliability of such memory images and digital evidence in general. In this paper we propose a method of acquiring the contents of volatile memory from arbitrary operating systems in a manner that provides point in time atomic snapshots of the host OS volatile memory. Additionally the method is more resistant to subversion due to its reduced attack surface. Our method is to inject an independent, acquisition specific OS into the potentially subverted host OS kernel, snatching full control of the host's hardware. We describe an implementation of this proposal, which we call BodySnatcher, which has demonstrated proof of concept by acquiring memory from Windows 2000 operating systems.},
author = {Bradley L. Schatz},
journal = {Digit. Investig.},
volume = {4},
pages = {126-134},
doi = {10.1016/J.DIIN.2007.06.009},
}

@article{8a9821665797da330ad4c254a57e5299f530cfd7,
title = {Live and Trustworthy Forensic Analysis of Commodity Production Systems},
year = {2010},
url = {https://www.semanticscholar.org/paper/8a9821665797da330ad4c254a57e5299f530cfd7},
abstract = {We present HyperSleuth, a framework that leverages the virtualization extensions provided by commodity hardware to securely perform live forensic analysis of potentially compromised production systems. HyperSleuth provides a trusted execution environment that guarantees four fundamental properties. First, an attacker controlling the system cannot interfere with the analysis and cannot tamper the results. Second, the framework can be installed as the system runs, without a reboot and without loosing any volatile data. Third, the analysis performed is completely transparent to the OS and to an attacker. Finally, the analysis can be periodically and safely interrupted to resume normal execution of the system. On top of HyperSleuth we implemented three forensic analysis applications: a lazy physical memory dumper, a lie detector, and a system call tracer. The experimental evaluation we conducted demonstrated that even time consuming analysis, such as the dump of the content of the physical memory, can be securely performed without interrupting the services offered by the system.},
author = {L. Martignoni and Aristide Fattori and Roberto Paleari and L. Cavallaro},
doi = {10.1007/978-3-642-15512-3_16},
}

@article{920fab8b6e5847f2c3f0c08c1f16d7ebf02d2a0d,
title = {Pool Allocations as an Information Source in Windows Memory Forensics},
year = {2006},
url = {https://www.semanticscholar.org/paper/920fab8b6e5847f2c3f0c08c1f16d7ebf02d2a0d},
abstract = {The Microsoft Windows kernel provides a heap-like memory management, called "pools". Whenever some kernel-mode code requires an amount of memory, it is allocated from a pool. Ignoring the documented interface and searching the whole dump of physical memory for signatures of pool allocations allows the forensic examiner to gain information not only from currently active but also from freed and not yet overwritten allocations. Understanding the inner mechanics of memory pools enables an examiner to connect certain finds in memory to the originating piece of code. As an example this articles describes the steps necessary to detect traces of network activity in a memory dump.},
author = {Andreas Schuster},
}

@article{e362edd8953ced590d79f5d15360233131913c80,
title = {A survey of main memory acquisition and analysis techniques for the windows operating system},
year = {2011},
url = {https://www.semanticscholar.org/paper/e362edd8953ced590d79f5d15360233131913c80},
abstract = {Traditional, persistent data-oriented approaches in computer forensics face some limitations regarding a number of technological developments, e.g., rapidly increasing storage capabilities of hard drives, memory-resident malicious software applications, or the growing use of encryption routines, that make an in-time investigation more and more difficult. In order to cope with these issues, security professionals have started to examine alternative data sources and emphasize the value of volatile system information in RAM more recently. In this paper, we give an overview of the prevailing techniques and methods to collect and analyze a computer's memory. We describe the characteristics, benefits, and drawbacks of the individual solutions and outline opportunities for future research in this evolving field of IT security.},
author = {Stefan Vömel and F. Freiling},
journal = {Digit. Investig.},
volume = {8},
pages = {3-22},
doi = {10.1016/j.diin.2011.06.002},
}

@article{8e270da16d0292f269cbc2b239c5db95760a495d,
title = {Forensic analysis of the Windows registry in memory},
year = {2008},
url = {https://www.semanticscholar.org/paper/8e270da16d0292f269cbc2b239c5db95760a495d},
abstract = {This paper describes the structure of the Windows registry as it is stored in physical memory. We present tools and techniques that can be used to extract this data directly from memory dumps. We also provide guidelines to aid investigators and experimentally demonstrate the value of our techniques. Finally, we describe a compelling attack that modifies the cached version of the registry without altering the on-disk version. While this attack would be undetectable with conventional on-disk registry analysis techniques, we demonstrate that such malicious modifications are easily detectable by examining memory.},
author = {Brendan Dolan-Gavitt},
journal = {Digit. Investig.},
volume = {5},
pages = {S26-S32},
doi = {10.1016/J.DIIN.2008.05.003},
}
