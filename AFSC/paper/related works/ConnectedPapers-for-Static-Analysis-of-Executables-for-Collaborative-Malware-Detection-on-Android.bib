@article{c60ed0c06dbec7c0481aac69bdbb5fdf4b0ed1ec,
title = {Static Analysis of Executables for Collaborative Malware Detection on Android},
year = {2009},
url = {https://semanticscholar.org/paper/c60ed0c06dbec7c0481aac69bdbb5fdf4b0ed1ec},
abstract = {Smartphones are getting increasingly popular and several malwares appeared targeting these devices. General countermeasures to smartphone malwares are currently limited to signature-based antivirus scanners which efficiently detect known malwares, but they have serious shortcomings with new and unknown malwares creating a window of opportunity for attackers. As smartphones become host for sensitive data and applications, extended malware detection mechanisms are necessary complying with the corresponding resource constraints. 
 
The contribution of this paper is twofold. First, we perform static analysis on the executables to extract their function calls in Android environment using the command readelf. Function call lists are compared with malware executables for classifying them with PART, Prism and Nearest Neighbor Algorithms. Second, we present a collaborative malware detection approach to extend these results. Corresponding simulation results are presented.},
author = {Aubrey-Derrick Schmidt and Rainer Bye and Hans-Gunther Schmidt and Jan Hendrik Clausen and Osman Kiraz and Kamer Ali Yüksel and Seyit Ahmet Çamtepe and Sahin Albayrak},
}

@article{de305dc3cfa535d22a555604b2aba3e656507a9b,
title = {MADAM: A Multi-level Anomaly Detector for Android Malware},
year = {2012},
url = {https://semanticscholar.org/paper/de305dc3cfa535d22a555604b2aba3e656507a9b},
abstract = {Currently, in the smartphone market, Android is the platform with the highest share. Due to this popularity and also to its open source nature, Android-based smartphones are now an ideal target for attackers. Since the number of malware designed for Android devices is increasing fast, Android users are looking for security solutions aimed at preventing malicious actions from damaging their smartphones. 
 
In this paper, we describe MADAM, a Multi-level Anomaly Detector for Android Malware. MADAM concurrently monitors Android at the kernel-level and user-level to detect real malware infections using machine learning techniques to distinguish between standard behaviors and malicious ones. The first prototype of MADAM is able to detect several real malware found in the wild. The device usability is not affected by MADAM due to the low number of false positives generated after the learning phase.},
author = {Gianluca Dini and Fabio Martinelli and Andrea Saracino and Daniele Sgandurra},
}

@article{bd0a1acb9d90432d4cbb4a70a94326906d9595ca,
title = {Detecting repackaged smartphone applications in third-party android marketplaces},
year = {2012},
url = {https://semanticscholar.org/paper/bd0a1acb9d90432d4cbb4a70a94326906d9595ca},
abstract = {Recent years have witnessed incredible popularity and adoption of smartphones and mobile devices, which is accompanied by large amount and wide variety of feature-rich smartphone applications. These smartphone applications (or apps), typically organized in different application marketplaces, can be conveniently browsed by mobile users and then simply clicked to install on a variety of mobile devices. In practice, besides the official marketplaces from platform vendors (e.g., Google and Apple), a number of third-party alternative marketplaces have also been created to host thousands of apps (e.g., to meet regional or localization needs). To maintain and foster a hygienic smartphone app ecosystem, there is a need for each third-party marketplace to offer quality apps to mobile users.
 In this paper, we perform a systematic study on six popular Android-based third-party marketplaces. Among them, we find a common "in-the-wild" practice of repackaging legitimate apps (from the official Android Market) and distributing repackaged ones via third-party marketplaces. To better understand the extent of such practice, we implement an app similarity measurement system called DroidMOSS that applies a fuzzy hashing technique to effectively localize and detect the changes from app-repackaging behavior. The experiments with DroidMOSS show a worrisome fact that 5% to 13% of apps hosted on these studied marketplaces are repackaged. Further manual investigation indicates that these repackaged apps are mainly used to replace existing in-app advertisements or embed new ones to "steal" or re-route ad revenues. We also identify a few cases with planted backdoors or malicious payloads among repackaged apps. The results call for the need of a rigorous vetting process for better regulation of third-party smartphone application marketplaces.},
author = {Wu Zhou and Yajin Zhou and Xuxian Jiang and Peng Ning},
}

@article{d13dcf524d7a96255b8c89db9db77c408190f079,
title = {Crowdroid: behavior-based malware detection system for Android},
year = {2011},
url = {https://semanticscholar.org/paper/d13dcf524d7a96255b8c89db9db77c408190f079},
abstract = {The sharp increase in the number of smartphones on the market, with the Android platform posed to becoming a market leader makes the need for malware analysis on this platform an urgent issue.
 In this paper we capitalize on earlier approaches for dynamic analysis of application behavior as a means for detecting malware in the Android platform. The detector is embedded in a overall framework for collection of traces from an unlimited number of real users based on crowdsourcing. Our framework has been demonstrated by analyzing the data collected in the central server using two types of data sets: those from artificial malware created for test purposes, and those from real malware found in the wild. The method is shown to be an effective means of isolating the malware and alerting the users of a downloaded malware. This shows the potential for avoiding the spreading of a detected malware to a larger community.},
author = {Iker Burguera and Urko Zurutuza and Simin Nadjm-Tehrani},
}

@article{53a1373a3280e04a63185bd9ce48bc18be518c20,
title = {An Android Application Sandbox system for suspicious software detection},
year = {2010},
url = {https://semanticscholar.org/paper/53a1373a3280e04a63185bd9ce48bc18be518c20},
abstract = {Smartphones are steadily gaining popularity, creating new application areas as their capabilities increase in terms of computational power, sensors and communication. Emerging new features of mobile devices give opportunity to new threats. Android is one of the newer operating systems targeting smartphones. While being based on a Linux kernel, Android has unique properties and specific limitations due to its mobile nature. This makes it harder to detect and react upon malware attacks if using conventional techniques. In this paper, we propose an Android Application Sandbox (AASandbox) which is able to perform both static and dynamic analysis on Android programs to automatically detect suspicious applications. Static analysis scans the software for malicious patterns without installing it. Dynamic analysis executes the application in a fully isolated environment, i.e. sandbox, which intervenes and logs low-level interactions with the system for further analysis. Both the sandbox and the detection algorithms can be deployed in the cloud, providing a fast and distributed detection of suspicious software in a mobile software store akin to Google's Android Market. Additionally, AASandbox might be used to improve the efficiency of classical anti-virus applications available for the Android operating system.},
author = {Thomas Bläsing and Leonid Batyuk and Aubrey-Derrick Schmidt and Seyit Ahmet Çamtepe and Sahin Albayrak},
}

@article{ad0b6de604df043940f1446a82b564dddfb8938f,
title = {A New Android Malware Detection Approach Using Bayesian Classification},
year = {2013},
url = {https://semanticscholar.org/paper/ad0b6de604df043940f1446a82b564dddfb8938f},
abstract = {Mobile malware has been growing in scale and complexity as smartphone usage continues to rise. Android has surpassed other mobile platforms as the most popular whilst also witnessing a dramatic increase in malware targeting the platform. A worrying trend that is emerging is the increasing sophistication of Android malware to evade detection by traditional signature-based scanners. As such, Android app marketplaces remain at risk of hosting malicious apps that could evade detection before being downloaded by unsuspecting users. Hence, in this paper we present an effective approach to alleviate this problem based on Bayesian classification models obtained from static code analysis. The models are built from a collection of code and app characteristics that provide indicators of potential malicious activities. The models are evaluated with real malware samples in the wild and results of experiments are presented to demonstrate the effectiveness of the proposed approach.},
author = {Suleiman Y. Yerima and Sakir Sezer and Gavin McWilliams and Igor Muttik},
}

@article{bd736ada1822b69e13d5a5aa68acc84cb9c5fb36,
title = {Android permissions demystified},
year = {2011},
url = {https://semanticscholar.org/paper/bd736ada1822b69e13d5a5aa68acc84cb9c5fb36},
abstract = {Android provides third-party applications with an extensive API that includes access to phone hardware, settings, and user data. Access to privacy- and security-relevant parts of the API is controlled with an install-time application permission system. We study Android applications to determine whether Android developers follow least privilege with their permission requests. We built Stowaway, a tool that detects overprivilege in compiled Android applications. Stowaway determines the set of API calls that an application uses and then maps those API calls to permissions. We used automated testing tools on the Android API in order to build the permission map that is necessary for detecting overprivilege. We apply Stowaway to a set of 940 applications and find that about one-third are overprivileged. We investigate the causes of overprivilege and find evidence that developers are trying to follow least privilege but sometimes fail due to insufficient API documentation.},
author = {Adrienne Porter Felt and Erika Chin and Steve Hanna and Dawn Xiaodong Song and David A. Wagner},
}

@article{519b17ea300eda0e30ac00f532db48215b56b354,
title = {DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis},
year = {2012},
url = {https://semanticscholar.org/paper/519b17ea300eda0e30ac00f532db48215b56b354},
abstract = {The prevalence of mobile platforms, the large market share of Android, plus the openness of the Android Market makes it a hot target for malware attacks. Once a malware sample has been identified, it is critical to quickly reveal its malicious intent and inner workings. In this paper we present DroidScope, an Android analysis platform that continues the tradition of virtualization-based malware analysis. Unlike current desktop malware analysis platforms, DroidScope reconstructs both the OS-level and Java-level semantics simultaneously and seamlessly. To facilitate custom analysis, DroidScope exports three tiered APIs that mirror the three levels of an Android device: hardware, OS and Dalvik Virtual Machine. On top of DroidScope, we further developed several analysis tools to collect detailed native and Dalvik instruction traces, profile API-level activity, and track information leakage through both the Java and native components using taint analysis. These tools have proven to be effective in analyzing real world malware samples and incur reasonably low performance overheads.},
author = {Lok-Kwong Yan and Heng Yin},
}

@article{1aca121136ce7e0d0e35dd6c9404fc65550b72c8,
title = {Robust clustering methods for detecting smartphone's abnormal behavior},
year = {2014},
url = {https://semanticscholar.org/paper/1aca121136ce7e0d0e35dd6c9404fc65550b72c8},
abstract = {Smartphones have become increasingly popular, and, nowadays, thanks to the use of 3G networks, the need for connectivity in a business environment is significant. Smartphones provide access to a tremendous amount of sensitive information related to business, such as customer contacts, financial data and Intranet networks. If any of this information were to fall into the hands of hackers, it would be devastating for the company. In this paper, we propose a cluster-based approach to detecting abnormal behaviour in smartphone applications. First we carry out various robust clustering techniques that help to identify and regroup applications that exhibit similar behaviour. The clustering results are then used to define a cluster-based outlier factor for each application, which in turn identifies the top n malware applications. Initial results of the experiments prove the efficiency and accuracy of cluster-based approaches in detecting abnormal smartphone applications and those with a low false-alert rate.},
author = {Ali El Attar and Rida Khatoun and Babiga Birregah and Marc Lemercier},
}

@article{bdb2f03c7d99e4d57a6010e0d64e99f388779f67,
title = {Lightweight Security Auditing Tool for Android Smart Mobile Phone : Design and Implementation},
year = {2014},
url = {https://semanticscholar.org/paper/bdb2f03c7d99e4d57a6010e0d64e99f388779f67},
abstract = {Semantic Scholar extracted view of "Lightweight Security Auditing Tool for Android Smart Mobile Phone : Design and Implementation" by Misikre Tadesse},
author = {Misikre Tadesse},
}

@article{a4e956265abb25f9db47daaab079380fa69c00f1,
title = {Systematic Detection of Capability Leaks in Stock Android Smartphones},
year = {2012},
url = {https://semanticscholar.org/paper/a4e956265abb25f9db47daaab079380fa69c00f1},
abstract = {Recent years have witnessed a meteoric increase in the adoption of smartphones. To manage information and features on such phones, Android provides a permission-based security model that requires each application to explicitly request permissions before it can be installed to run. In this paper, we analyze eight popular Android smartphones and discover that the stock phone images do not properly enforce the permission model. Several privileged permissions are unsafely exposed to other applications which do not need to request them for the actual use. To identify these leaked permissions or capabilities, we have developed a tool called Woodpecker. Our results with eight phone images show that among 13 privileged permissions examined so far, 11 were leaked, with individual phones leaking up to eight permissions. By exploiting them, an untrusted application can manage to wipe out the user data, send out SMS messages, or record user conversation on the affected phones – all without asking for any permission.},
author = {Michael C. Grace and Yajin Zhou and Zhi Wang and Xuxian Jiang},
}

@article{a7e8910b74715175cb20d9a08d34b3541060076b,
title = {On lightweight mobile phone application certification},
year = {2009},
url = {https://semanticscholar.org/paper/a7e8910b74715175cb20d9a08d34b3541060076b},
abstract = {Users have begun downloading an increasingly large number of mobile phone applications in response to advancements in handsets and wireless networks. The increased number of applications results in a greater chance of installing Trojans and similar malware. In this paper, we propose the Kirin security service for Android, which performs lightweight certification of applications to mitigate malware at install time. Kirin certification uses security rules, which are templates designed to conservatively match undesirable properties in security configuration bundled with applications. We use a variant of security requirements engineering techniques to perform an in-depth security analysis of Android to produce a set of rules that match malware characteristics. In a sample of 311 of the most popular applications downloaded from the official Android Market, Kirin and our rules found 5 applications that implement dangerous functionality and therefore should be installed with extreme caution. Upon close inspection, another five applications asserted dangerous rights, but were within the scope of reasonable functional needs. These results indicate that security configuration bundled with Android applications provides practical means of detecting malware.},
author = {William Enck and Machigar Ongtang and Patrick D. McDaniel},
}

@article{67c2a1c131c5f81d3fab352340ab8721cbee0627,
title = {Study on Intrusion Detection on Mobile Security using SIM and PDA},
year = {2016},
url = {https://semanticscholar.org/paper/67c2a1c131c5f81d3fab352340ab8721cbee0627},
abstract = {A new wave in advancement of the Internet of Things is driving toward ubiquitous mutually connected wireless sensor networks and embedded devices that can be potentially accessed from anywhere in the world. Hence cyber security is essential in Internet of things and also it becomes a challenge in securing the data in the Internet connected devices. I Therefore, IoT devices specifically Wireless sensor may now embody an idyllic intention for malware writers. As the number of vulnerabilities and, hence, of attacks increase, there has been a corresponding rise of security solutions proposed by researchers. This paper is a general survey of all the security issues existing in the Internet of Things (IoT) along with an analysis of the privacy issues that an end-user may face as a consequence of the spread of IoT. The majority of the survey is focused on the security loopholes arising out of the information exchange technologies used in Internet of Things.},
author = {Ketheeswari Kathirvel},
}

@article{9337e967802d5442888d6bb46892e51010745c13,
title = {A Survey on Android Malware Detection Techniques},
year = {2017},
url = {https://semanticscholar.org/paper/9337e967802d5442888d6bb46892e51010745c13},
abstract = {Now-a-days widely applicable smart phone application adoption and rapid growth of contextually sensitive nature of smartphone devices has led to a renaissance in mobile application services and increased concerns over smartphone malware. Most of the smart phone users are connected to internet for various purposes. Even after the advanced technology used in the smartphones still the users are remaining unprotected from malware attacks. To overcome these issues and to keep the smartphones safe a number of malicious applications, malware threat and adwares for mobile phones is expected to increase with the functionality enhancement of smart mobile phone. Android Operating Systems are most commonly used systems in the smartphones. Many applications are available in android play store and it is very difficult to distinguish and to discriminate between clean and malicious applications. We have briefly discussed different methods for detecting android malwares in this review and present a clear picture about these detection tools in the smartphone applications.},
author = {Rubata Riasat and Muntaha Sakeena and Chong Wang and Abdul Hannan Sadiq and Yong-Ji Wang},
}

@article{79c390d256f259735bf78f5f81295db8f532b488,
title = {Using probabilistic generative models for ranking risks of Android apps},
year = {2012},
url = {https://semanticscholar.org/paper/79c390d256f259735bf78f5f81295db8f532b488},
abstract = {One of Android's main defense mechanisms against malicious apps is a risk communication mechanism which, before a user installs an app, warns the user about the permissions the app requires, trusting that the user will make the right decision. This approach has been shown to be ineffective as it presents the risk information of each app in a "tand-alone" ashion and in a way that requires too much technical knowledge and time to distill useful information.
 We introduce the notion of risk scoring and risk ranking for Android apps, to improve risk communication for Android apps, and identify three desiderata for an effective risk scoring scheme. We propose to use probabilistic generative models for risk scoring schemes, and identify several such models, ranging from the simple Naive Bayes, to advanced hierarchical mixture models. Experimental results conducted using real-world datasets show that probabilistic general models significantly outperform existing approaches, and that Naive Bayes models give a promising risk scoring approach.},
author = {Hao Peng and Christopher S. Gates and Bhaskar Pratim Sarma and Ninghui Li and Yuan Qi and Rahul Potharaju and Cristina Nita-Rotaru and Ian Molloy},
}

@article{4295efb3cece6735d123fdc8ea61c362cdc7fe38,
title = {Behaviour Based Anomaly Detection for Smartphones Using Machine Learning Algorithm},
year = {2014},
url = {https://semanticscholar.org/paper/4295efb3cece6735d123fdc8ea61c362cdc7fe38},
abstract = {Since the first handheld cellular phone was introduced in 1973, the mobile phones have evolved into immensely popular smartphones. These devices provide all-in-one expediency by integrating traditional mobile phones with handheld computing devices making them more open and general purpose. Smartphones have become hosts for sensitive or personal data and applications. However many smartphones are prone to attacks. In the past few years, hundreds of malware have appeared to target these devices, propagating through various channels including SMS, MMS, Bluetooth, traditional IP-based applications and platform level vulnerabilities. These malware not only pose a threat to mobile system data confidentiality, availability and integrity but can also result in unwanted billing, depletion of battery power and denial-ofservice attacks. Current smartphone malware detection and prevention techniques are generally limited to signature-based antivirus scanners. These can efficiently detect malware with a known signature, but they are unable to detect new and unknown malware. This shortcoming creates a window of opportunity for attackers. Recent research in smartphone security has also focused on classification of applications as either benign or malicious by using data mining and machine learning algorithms. The scope of these techniques is also limited because they rely on static analysis of application permissions and system calls etc. Consequently, it is vital to address these shortcomings. In this paper, we propose a novel, platform independent behavior-based anomaly detection framework for mobile devices. The fundamental premise of this framework is that every smartphone user has a unique usage patterns. By modeling these patterns into a profile we can uniquely identify users. To test this hypothesis, a data collection application was developed to accumulate real-life dataset consisting of application usage statistics, various system metrics and contextual information from mobile devices. Then K-Means Clustering algorithm was used to create baseline usage profile for each user. To detect accuracy of profiling, we tried to fit every user's data into profiles of other users and monitored the deviation. By monitoring the deviation between profiles, we were able to assert our hypothesis. Whilst some users were difficult to profile, a significant proportion fell within the performance expectations. Our tests show that 80% of user profiles had accuracy (measure of uniqueness) between 64% and 95%. Another novelty of our research is that it is one of the first to implement behavior based anomaly detection on mobile devices. The Khurram Majeed is with the School of Computing, London Metropolitan University, London, UK (e-mail: k.majeed@londonmet.ac.uk). Dr Yanguo Jing is with the School of Computing, London Metropolitan University, London, UK (e-mail:y.jing@londonmet.ac.uk). Dr Dusica Novakovic, is with School of Computing and Technology, University of West London.UK (e-mail: d.novakovic@uwl.ac.uk). Prof Karim Ouazzane is with the School of Computing, London Metropolitan University, London, UK (e-mail:k.ouazzane@londonmet.ac.uk). implications of our research are far reaching as it can also provide means of transparent, continuous user authentication on mobile devices. Keywords— Anomaly detection, behavior profiling, malware, security, smartphones.},
author = {Khurram Majeed and Dr Yanguo Jing and Dr Dusica Novakovic and Prof Karim Ouazzane},
}

@article{ac9caaf2b0a89ae8a12939709577c5718ba12995,
title = {Enhancing security of linux-based android devices},
year = {2008},
url = {https://semanticscholar.org/paper/ac9caaf2b0a89ae8a12939709577c5718ba12995},
abstract = {Our daily lives become more and more dependent upon smartphones due to their increased capabilities. Smartphones are used in various ways from payment systems to assisting the lives of elderly or disabled people. Security threats for these devices become increasingly dangerous since there is still a lack of proper security tools for protection. Android emerges as an open smartphone platform which allows modification even on operating system level. Therefore, third-party developers have the opportunity to develop kernel-based low-level security tools which is not normal for smartphone platforms. Android quickly gained its popularity among smartphone developers and even beyond since it bases on Java on top of "open" Linux in comparison to former proprietary platforms which have very restrictive SDKs and corresponding APIs. Symbian OS for example, holding the greatest market share among all smartphone OSs, was closing critical APIs to common developers and introduced application certification. This was done since this OS was the main target for smartphone malwares in the past. In fact, more than 290 malwares designed for Symbian OS appeared from July 2004 to July 2008. Android, in turn, promises to be completely open source. Together with the Linux-based smartphone OS OpenMoko, open smartphone platforms may attract malware writers for creating malicious applications endangering the critical smartphone applications and owners� privacy. In this work, we present our current results in analyzing the security of Android smartphones with a focus on its Linux side. Our results are not limited to Android, they are also applicable to Linux-based smartphones such as OpenMoko Neo FreeRunner. Our contribution in this work is three-fold. First, we analyze android framework and the Linux-kernel to check security functionalities. We survey wellaccepted security mechanisms and tools which can increase device security. We provide descriptions on how to adopt these security tools on Android kernel, and provide their overhead analysis in terms of resource usage. As open smartphones are released and may increase their market share similar to Symbian, they may attract attention of malware writers. Therefore, our second contribution focuses on malware detection techniques at the kernel level. We test applicability of existing signature and intrusion detection methods in Android environment. We focus on monitoring events on the kernel; that is, identifying critical kernel, log file, file system and network activity events, and devising efficient mechanisms to monitor them in a resource limited environment. Our third contribution involves initial results of our malware detection mechanism basing on static function call analysis. We identified approximately 105 Executable and Linking Format (ELF) executables installed to the Linux side of Android. We perform a statistical analysis on the function calls used by these applications. The results of the analysis can be compared to newly installed applications for detecting significant differences. Additionally, certain function calls indicate malicious activity. Therefore, we present a simple decision tree for deciding the suspiciousness of the corresponding application. Our results present a first step towards detecting malicious applications on Android-based devices.},
author = {Aubrey-Derrick Schmidt and Hans-Gunther Schmidt and Jan Clausen and Kamer Ali Yuksel and Osman Kiraz and Seyit Ahmet Çamtepe and Sahin Albayrak},
}

@article{4ba7709ba1773db3c84a244915791a2393ff8f08,
title = {Behavior-based malware detection system for the Android platform},
year = {2011},
url = {https://semanticscholar.org/paper/4ba7709ba1773db3c84a244915791a2393ff8f08},
abstract = {Malware in smartphones is growing at a significant rate. There are currently more than 250 million smartphone users in the world and this number is expected to grow in coming years.
 In the past fe ...},
author = {Iker Burguera Hidalgo},
}

@article{8498bd71973b8ef6d2a7b2842a2495559fe088ca,
title = {Detecting Symbian OS malware through static function call analysis},
year = {2009},
url = {https://semanticscholar.org/paper/8498bd71973b8ef6d2a7b2842a2495559fe088ca},
abstract = {Smartphones become very critical part of our lives as they offer advanced capabilities with PC-like functionalities. They are getting widely deployed while not only being used for classical voice-centric communication. New smartphone malwares keep emerging where most of them still target Symbian OS. In the case of Symbian OS, application signing seemed to be an appropriate measure for slowing down malware appearance. Unfortunately, latest examples showed that signing can be bypassed resulting in new malware outbreak. In this paper, we present a novel approach to static malware detection in resource-limited mobile environments. This approach can be used to extend currently used third-party application signing mechanisms for increasing malware detection capabilities. In our work, we extract function calls from binaries in order to apply our clustering mechanism, called centroid. This method is capable of detecting unknown malwares. Our results are promising where the employed mechanism might find application at distribution channels, like online application stores. Additionally, it seems suitable for directly being used on smartphones for (pre-)checking installed applications.},
author = {Aubrey-Derrick Schmidt and Jan Hendrik Clausen and Seyit Ahmet Çamtepe and Sahin Albayrak},
}

@article{b444e56f31694b3ba4b14f91b4b3d1a8ebc19830,
title = {A survey of mobile malware in the wild},
year = {2011},
url = {https://semanticscholar.org/paper/b444e56f31694b3ba4b14f91b4b3d1a8ebc19830},
abstract = {Mobile malware is rapidly becoming a serious threat. In this paper, we survey the current state of mobile malware in the wild. We analyze the incentives behind 46 pieces of iOS, Android, and Symbian malware that spread in the wild from 2009 to 2011. We also use this data set to evaluate the effectiveness of techniques for preventing and identifying mobile malware. After observing that 4 pieces of malware use root exploits to mount sophisticated attacks on Android phones, we also examine the incentives that cause non-malicious smartphone tinkerers to publish root exploits and survey the availability of root exploits.},
author = {Adrienne Porter Felt and Matthew Finifter and Erika Chin and Steve Hanna and David A. Wagner},
}

@article{7b1996d4446f7682fa0ae36527f3cbc5e46dad58,
title = {DroidMat: Android Malware Detection through Manifest and API Calls Tracing},
year = {2012},
url = {https://semanticscholar.org/paper/7b1996d4446f7682fa0ae36527f3cbc5e46dad58},
abstract = {Recently, the threat of Android malware is spreading rapidly, especially those repackaged Android malware. Although understanding Android malware using dynamic analysis can provide a comprehensive view, it is still subjected to high cost in environment deployment and manual efforts in investigation. In this study, we propose a static feature-based mechanism to provide a static analyst paradigm for detecting the Android malware. The mechanism considers the static information including permissions, deployment of components, Intent messages passing and API calls for characterizing the Android applications behavior. In order to recognize different intentions of Android malware, different kinds of clustering algorithms can be applied to enhance the malware modeling capability. Besides, we leverage the proposed mechanism and develop a system, called Droid Mat. First, the Droid Mat extracts the information (e.g., requested permissions, Intent messages passing, etc) from each application's manifest file, and regards components (Activity, Service, Receiver) as entry points drilling down for tracing API Calls related to permissions. Next, it applies K-means algorithm that enhances the malware modeling capability. The number of clusters are decided by Singular Value Decomposition (SVD) method on the low rank approximation. Finally, it uses kNN algorithm to classify the application as benign or malicious. The experiment result shows that the recall rate of our approach is better than one of well-known tool, Androguard, published in Black hat 2011, which focuses on Android malware analysis. In addition, Droid Mat is efficient since it takes only half of time than Androguard to predict 1738 apps as benign apps or Android malware.},
author = {Dong-Jie Wu and Ching-Hao Mao and Te-En Wei and Hahn-Ming Lee and Kuo-Ping Wu},
}

@article{a479144f157513d3f9cf9bf9ffe1b4ee01457a4e,
title = {Intrusion detection for mobile devices using the knowledge-based, temporal abstraction method},
year = {2010},
url = {https://semanticscholar.org/paper/a479144f157513d3f9cf9bf9ffe1b4ee01457a4e},
abstract = {In this paper, a new approach for detecting previously unencountered malware targeting mobile device is proposed. In the proposed approach, time-stamped security data is continuously monitored within the target mobile device (i.e., smartphones, PDAs) and then processed by the knowledge-based temporal abstraction (KBTA) methodology. Using KBTA, continuously measured data (e.g., the number of sent SMSs) and events (e.g., software installation) are integrated with a mobile device security domain knowledge-base (i.e., an ontology for abstracting meaningful patterns from raw, time-oriented security data), to create higher level, time-oriented concepts and patterns, also known as temporal abstractions. Automatically-generated temporal abstractions are then monitored to detect suspicious temporal patterns and to issue an alert. These patterns are compatible with a set of predefined classes of malware as defined by a security expert (or the owner) employing a set of time and value constraints. The goal is to identify malicious behavior that other defensive technologies (e.g., antivirus or firewall) failed to detect. Since the abstraction derivation process is complex, the KBTA method was adapted for mobile devices that are limited in resources (i.e., CPU, memory, battery). To evaluate the proposed modified KBTA method a lightweight host-based intrusion detection system (HIDS), combined with central management capabilities for Android-based mobile phones, was developed. Evaluation results demonstrated the effectiveness of the new approach in detecting malicious applications on mobile devices (detection rate above 94% in most scenarios) and the feasibility of running such a system on mobile devices (CPU consumption was 3% on average).},
author = {Asaf Shabtai and Uri Kanonov and Yuval Elovici},
}

@article{48322738d25efe1b1d8f8426320367f0c8ab3b2d,
title = {TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones},
year = {2014},
url = {https://semanticscholar.org/paper/48322738d25efe1b1d8f8426320367f0c8ab3b2d},
abstract = {Today’s smartphone operating systems frequently fail to provide users with visibility into how third-party applications collect and share their private data. We address these shortcomings with TaintDroid, an efficient, system-wide dynamic taint tracking and analysis system capable of simultaneously tracking multiple sources of sensitive data. TaintDroid enables realtime analysis by leveraging Android’s virtualized execution environment. TaintDroid incurs only 32% performance overhead on a CPU-bound microbenchmark and imposes negligible overhead on interactive third-party applications. Using TaintDroid to monitor the behavior of 30 popular third-party Android applications, in our 2010 study we found 20 applications potentially misused users’ private information; so did a similar fraction of the tested applications in our 2012 study. Monitoring the flow of privacy-sensitive data with TaintDroid provides valuable input for smartphone users and security service firms seeking to identify misbehaving applications.},
author = {William Enck and Peter Gilbert and Byung-Gon Chun and Landon P. Cox and Jaeyeon Jung and Patrick D. McDaniel and Anmol Sheth},
}

@article{0b38a236d2377068408309f1d31e5c5fc5eedd0b,
title = {DREBIN: Effective and Explainable Detection of Android Malware in Your Pocket},
year = {2014},
url = {https://semanticscholar.org/paper/0b38a236d2377068408309f1d31e5c5fc5eedd0b},
abstract = {Malicious applications pose a threat to the security of the Android platform. The growing amount and diversity of these applications render conventional defenses largely ineffective and thus Android smartphones often remain unprotected from novel malware. In this paper, we propose DREBIN, a lightweight method for detection of Android malware that enables identifying malicious applications directly on the smartphone. As the limited resources impede monitoring applications at run-time, DREBIN performs a broad static analysis, gathering as many features of an application as possible. These features are embedded in a joint vector space, such that typical patterns indicative for malware can be automatically identified and used for explaining the decisions of our method. In an evaluation with 123,453 applications and 5,560 malware samples DREBIN outperforms several related approaches and detects 94% of the malware with few false alarms, where the explanations provided for each detection reveal relevant properties of the detected malware. On five popular smartphones, the method requires 10 seconds for an analysis on average, rendering it suitable for checking downloaded applications directly on the device.},
author = {Daniel Arp and Michael Spreitzenbarth and Malte Hubner and Hugo Gascon and Konrad Rieck},
}

@article{507f4c6b3d25f346293d7532fb30dd61ee29dd84,
title = {“Andromaly”: a behavioral malware detection framework for android devices},
year = {2010},
url = {https://semanticscholar.org/paper/507f4c6b3d25f346293d7532fb30dd61ee29dd84},
abstract = {This article presents Andromaly—a framework for detecting malware on Android mobile devices. The proposed framework realizes a Host-based Malware Detection System that continuously monitors various features and events obtained from the mobile device and then applies Machine Learning anomaly detectors to classify the collected data as normal (benign) or abnormal (malicious). Since no malicious applications are yet available for Android, we developed four malicious applications, and evaluated Andromaly’s ability to detect new malware based on samples of known malware. We evaluated several combinations of anomaly detection algorithms, feature selection method and the number of top features in order to find the combination that yields the best performance in detecting new malware on Android. Empirical results suggest that the proposed framework is effective in detecting malware on mobile devices in general and on Android in particular.},
author = {Asaf Shabtai and Uri Kanonov and Yuval Elovici and Chanan Glezer and Yael Weiss},
}

@article{12ef153d9c7ccc374d56acf34b59fb2eaec6f755,
title = {Dissecting Android Malware: Characterization and Evolution},
year = {2012},
url = {https://semanticscholar.org/paper/12ef153d9c7ccc374d56acf34b59fb2eaec6f755},
abstract = {The popularity and adoption of smart phones has greatly stimulated the spread of mobile malware, especially on the popular platforms such as Android. In light of their rapid growth, there is a pressing need to develop effective solutions. However, our defense capability is largely constrained by the limited understanding of these emerging mobile malware and the lack of timely access to related samples. In this paper, we focus on the Android platform and aim to systematize or characterize existing Android malware. Particularly, with more than one year effort, we have managed to collect more than 1,200 malware samples that cover the majority of existing Android malware families, ranging from their debut in August 2010 to recent ones in October 2011. In addition, we systematically characterize them from various aspects, including their installation methods, activation mechanisms as well as the nature of carried malicious payloads. The characterization and a subsequent evolution-based study of representative families reveal that they are evolving rapidly to circumvent the detection from existing mobile anti-virus software. Based on the evaluation with four representative mobile security software, our experiments show that the best case detects 79.6% of them while the worst case detects only 20.2% in our dataset. These results clearly call for the need to better develop next-generation anti-mobile-malware solutions.},
author = {Yajin Zhou and Xuxian Jiang},
}

@article{e4f7e5a5886c06f3f84e1256941ceb3d149471bf,
title = {Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets},
year = {2012},
url = {https://semanticscholar.org/paper/e4f7e5a5886c06f3f84e1256941ceb3d149471bf},
abstract = {In this paper, we present a systematic study for the detection of malicious applications (or apps) on popular Android Markets. To this end, we first propose a permissionbased behavioral footprinting scheme to detect new samples of known Android malware families. Then we apply a heuristics-based filtering scheme to identify certain inherent behaviors of unknown malicious families. We implemented both schemes in a system called DroidRanger. The experiments with 204, 040 apps collected from five different Android Markets in May-June 2011 reveal 211 malicious ones: 32 from the official Android Market (0.02% infection rate) and 179 from alternative marketplaces (infection rates ranging from 0.20% to 0.47%). Among those malicious apps, our system also uncovered two zero-day malware (in 40 apps): one from the official Android Market and the other from alternative marketplaces. The results show that current marketplaces are functional and relatively healthy. However, there is also a clear need for a rigorous policing process, especially for non-regulated alternative marketplaces.},
author = {Yajin Zhou and Zhi Wang and Wu Zhou and Xuxian Jiang},
}

@article{cf03867e63560f83f9ceed2aeb92b50b47bc2bcd,
title = {A Non-cooperative Game Approach for Intrusion Detection in Smartphone Systems},
year = {2010},
url = {https://semanticscholar.org/paper/cf03867e63560f83f9ceed2aeb92b50b47bc2bcd},
abstract = {In this paper, we propose an intrusion detection framework for smartphone systems. We formulate the intrusion detection problem into a two-player, non-cooperative, complete-information, constant-sum game. The attacker and the security server are the players of the game. The security server wants to maximize the value of the system but the attacker wants to minimize it. We present the Nash equilibrium and the Nash equilibrium leads to a defense strategy for the security server. We implement the framework and the results show that the proposed defense strategy is better than traditional ones.},
author = {Feng Yang and Xuehai Zhou and Gangyong Jia and Qiyuan Zhang},
}

@article{5bac1731d21615b1b9e82f235e9eefb4308862cc,
title = {Intrusion Detection on Smartphones},
year = {2012},
url = {https://semanticscholar.org/paper/5bac1731d21615b1b9e82f235e9eefb4308862cc},
abstract = {Smartphone technology is more and more becoming the predominant communication tool for people across the world. People use their smartphones to keep their contact data, to browse the internet, to exchange messages, to keep notes, carry their personal files and documents, etc. Users while browsing are also capable of shopping online, thus provoking a need to type their credit card numbers and security codes. As the smartphones are becoming widespread so do the security threats and vulnerabilities facing this technology. Recent news and articles indicate huge increase in malware and viruses for operating systems employed on smartphones (primarily Android and iOS). Major limitations of smartphone technology are its processing power and its scarce energy source since smartphones rely on battery usage. Since smartphones are devices which change their network location as the user moves between different places, intrusion detection systems for smartphone technology are most often classified as IDSs designed for mobile ad-hoc networks. The aim of this research is to give a brief overview of IDS technology, give an overview of major machine learning and pattern recognition algorithms used in IDS technologies, give an overview of security models of iOS and Android and propose a new host-based IDS model for smartphones and create proof-of-concept application for Android platform for the newly proposed model. Keywords: IDS, SVM, Android, iOS;},
author = {Muhamed Halilovic and Abdulhamit Subasi},
}

@article{aa6b1aca41cb42d715d3d7852c9f3385683a642c,
title = {Google Android: A State-of-the-Art Review of Security Mechanisms},
year = {2009},
url = {https://semanticscholar.org/paper/aa6b1aca41cb42d715d3d7852c9f3385683a642c},
abstract = {Google's Android is a comprehensive software framework for mobile communication devices (i.e., smartphones, PDAs). The Android framework includes an operating system, middleware and a set of key applications. The incorporation of integrated access services to the Internet on such mobile devices, however, increases their exposure to damages inflicted by various types of malware. This paper provides a comprehensive security assessment of the Android framework and the security mechanisms incorporated into it. A methodological qualitative risk analysis that we conducted identifies the high-risk threats to the framework and any potential danger to information or to the system resulting from vulnerabilities that have been uncovered and exploited. Our review of current academic and commercial solutions in the area of smartphone security yields a list of applied and recommended defense mechanisms for hardening mobile devices in general and the Android in particular. Lastly, we present five major (high-risk) threats to the Android framework and propose security solutions to mitigate them. We conclude by proposing a set of security mechanisms that should be explored and introduced into Android-powered devices.},
author = {Asaf Shabtai and Yuval Fledel and Uri Kanonov and Yuval Elovici and Shlomi Dolev},
}

@article{24193bd89089c5160acf89d3653dc69b2db3f45e,
title = {Detection of Smartphone Malware},
year = {2011},
url = {https://semanticscholar.org/paper/24193bd89089c5160acf89d3653dc69b2db3f45e},
abstract = {Due to technological progress, mobile phones evolved into technically and functionally sophisticated devices called smartphones. Providing comprehensive capabilities, smartphones are getting increasingly popular not only for the targeted users but all. Since 2004, several malwares appeared targeting these devices. General countermeasures to smartphone malwares are currently limited to signature-based anti-virus scanners which efficiently detect known malwares, but they have serious shortcomings with new and unknown malwares creating a window of opportunity for attackers. As smartphones become a host for sensitive data and applications, extended malware detection mechanisms not basing on signatures are necessary complying with the resource constraints of current mobile devices. In this work, we tackle the field of smartphone malware. We give a clear definition on what a smartphone actually is since an industry standard does not exist. For understanding the threat of malwares targeting smartphones, we present an updated list including all published malwares that were recognized by anti-virus companies until the end of 2010. We introduce the fields of dynamic and static analysis. In the field of dynamic analysis, a monitoring system is introduced gathering behaviorand system-based information that are processed by a remote system using machine learning for anomaly detection. Furthermore, a monitoring and detection architecture for Linux-based smartphones is presented which is used to trace execution of binaries for extracting invoked system calls. In the field of static analysis, we discuss its applicability to the domain of different smartphone platforms, namely Symbian OS and Android. In both cases, function and system calls are used that are extracted from binaries in a static manner. Results of the analyses are promising and showed competitive character in comparison with standard state-of-the-art learning algorithms, such as Naive Bayes.},
author = {Aubrey-Derrick Schmidt},
}

@article{2831d26ee3cdd40791c534af2647c588e659dff0,
title = {DroidAPIMiner: Mining API-Level Features for Robust Malware Detection in Android},
year = {2013},
url = {https://semanticscholar.org/paper/2831d26ee3cdd40791c534af2647c588e659dff0},
abstract = {The increasing popularity of Android apps makes them the target of malware authors. To defend against this severe increase of Android malwares and help users make a better evaluation of apps at install time, several approaches have been proposed. However, most of these solutions suffer from some shortcomings; computationally expensive, not general or not robust enough. In this paper, we aim to mitigate Android malware installation through providing robust and lightweight classifiers. We have conducted a thorough analysis to extract relevant features to malware behavior captured at API level, and evaluated different classifiers using the generated feature set. Our results show that we are able to achieve an accuracy as high as 99% and a false positive rate as low as 2.2% using KNN classifier.},
author = {Yousra Aafer and Wenliang Du and Heng Yin},
}

@article{69146ff94c24b20905e92b9aa53c013ba7584134,
title = {Applying Behavioral Detection on Android-Based Devices},
year = {2010},
url = {https://semanticscholar.org/paper/69146ff94c24b20905e92b9aa53c013ba7584134},
abstract = {We present Andromaly - a behavioral-based detection framework for Android-powered mobile devices. The proposed framework realizes a Host-based Intrusion Detection System (HIDS) that continuously monitors various features and events obtained from the mobile device, and then applies Machine Learning methods to classify the collected data as normal (benign) or abnormal (malicious). Since no malicious applications are yet available for Android, we evaluated Andromaly’s ability to differentiate between game and tool applications. Successful differentiation between games and tools is expected to provide a positive indication about the ability of such methods to learn and model the behavior of an Android application and potentially detect malicious applications. Several combinations of classification algorithms, feature selections and the number of top features were evaluated. Empirical results suggest that the proposed detection framework is effective in detecting types of applications having similar behavior, which is an indication for the ability to detect unknown malware in the Android framework.},
author = {Asaf Shabtai and Yuval Elovici},
}

@article{28d82be56e54df4b28a17908de17480d699e1409,
title = {A Machine Learning Approach to Android Malware Detection},
year = {2012},
url = {https://semanticscholar.org/paper/28d82be56e54df4b28a17908de17480d699e1409},
abstract = {With the recent emergence of mobile platforms capable of executing increasingly complex software and the rising ubiquity of using mobile platforms in sensitive applications such as banking, there is a rising danger associated with malware targeted at mobile devices. The problem of detecting such malware presents unique challenges due to the limited resources avalible and limited privileges granted to the user, but also presents unique opportunity in the required metadata attached to each application. In this article, we present a machine learning-based system for the detection of malware on Android devices. Our system extracts a number of features and trains a One-Class Support Vector Machine in an offline (off-device) manner, in order to leverage the higher computing power of a server or cluster of servers.},
author = {Justin Sahs and Latifur Khan},
}

@article{8e59d0b130cd34bf03282b0f61c3a4c56e2df6fd,
title = {Monitoring Android for Collaborative Anomaly Detection: A First Architectural Draft},
year = {2008},
url = {https://semanticscholar.org/paper/8e59d0b130cd34bf03282b0f61c3a4c56e2df6fd},
abstract = {Our daily lives become more and more dependent upon smartphones due to their increased capabilities. Smartphones are used in various ways, e.g. for payment systems or assisting the lives of elderly or disabled people. Security threats for these devices become more and more dangerous since there is still a lack of proper security tools for protection. Android emerges as an open smartphone platform which allows modification even on operating system level and where third-party developers first time have the opportunity to develop kernel-based low-level security tools. Android quickly gained its popularity among smartphone developers and even beyond since it bases on Java on top of "open" Linux in comparison to former proprietary platforms which have very restrictive SDKs and corresponding APIs. Symbian OS, holding the greatest market share among all smartphone OSs, was even closing critical APIs to common developers and introduced application certification. This was done since this OS was the main target for smartphone malwares in the past. In fact, more than 290 malwares designed for Symbian OS appeared from July 2004 to July 2008. Android, in turn, promises to be completely open source. Together with the Linux-based smartphone OS OpenMoko, open smartphone platforms may attract malware writers for creating malicious applications endangering the critical smartphone applications and owners privacy. Since signature-based approaches mainly detect known malwares, anomaly-based approaches can be a valuable addition to these systems. They base on mathematical algorithms processing data that describe the state of a certain device. For gaining this data, a monitoring client is needed that has to extract usable information (features) from the monitored system. Our approach follows a dual system for analyzing these features. On the one hand, functionality for on-device light-weight detection is provided. But since most algorithms are resource exhaustive, remote feature analysis is provided on the other hand. Having this dual system enables event-based detection that can react to the current detection need. In our ongoing research we aim to investigates the feasibility of light-weight on-device detection for certain occasions. On other occasions, whenever significant changes are detected on the device, the system can trigger remote detection with heavy-weight algorithms for better detection results. In the absence of the server respectively as a supplementary approach, we also consider a collaborative scenario. Here, mobile devices sharing a common objective are enabled by a collaboration module to share information, such as intrusion detection data and results. This is based on an ad-hoc network mode that can be provided by a WiFi or Bluetooth adapter nearly every smartphone possesses.},
author = {Aubrey-Derrick Schmidt and Rainer Bye and Hans-Gunther Schmidt and Kamer Ali Yuksel and Osman Kiraz and Jan Clausen and Karsten Raddatz and Seyit Ahmet Çamtepe and Sahin Albayrak},
}

@article{76f96ffa541f52f67469ac8fbd34b9dee9bf8ee8,
title = {RiskRanker: scalable and accurate zero-day android malware detection},
year = {2012},
url = {https://semanticscholar.org/paper/76f96ffa541f52f67469ac8fbd34b9dee9bf8ee8},
abstract = {Smartphone sales have recently experienced explosive growth. Their popularity also encourages malware authors to penetrate various mobile marketplaces with malicious applications (or apps). These malicious apps hide in the sheer number of other normal apps, which makes their detection challenging. Existing mobile anti-virus software are inadequate in their reactive nature by relying on known malware samples for signature extraction. In this paper, we propose a proactive scheme to spot zero-day Android malware. Without relying on malware samples and their signatures, our scheme is motivated to assess potential security risks posed by these untrusted apps. Specifically, we have developed an automated system called RiskRanker to scalably analyze whether a particular app exhibits dangerous behavior (e.g., launching a root exploit or sending background SMS messages). The output is then used to produce a prioritized list of reduced apps that merit further investigation. When applied to examine 118,318 total apps collected from various Android markets over September and October 2011, our system takes less than four days to process all of them and effectively reports 3281 risky apps. Among these reported apps, we successfully uncovered 718 malware samples (in 29 families) and 322 of them are zero-day (in 11 families). These results demonstrate the efficacy and scalability of RiskRanker to police Android markets of all stripes.},
author = {Michael C. Grace and Yajin Zhou and Qiang Zhang and Shihong Zou and Xuxian Jiang},
}

@article{7216ec1cbc1d9241489c27d9b0001cdaef676480,
title = {CHEX: statically vetting Android apps for component hijacking vulnerabilities},
year = {2012},
url = {https://semanticscholar.org/paper/7216ec1cbc1d9241489c27d9b0001cdaef676480},
abstract = {An enormous number of apps have been developed for Android in recent years, making it one of the most popular mobile operating systems. However, the quality of the booming apps can be a concern [4]. Poorly engineered apps may contain security vulnerabilities that can severally undermine users' security and privacy. In this paper, we study a general category of vulnerabilities found in Android apps, namely the component hijacking vulnerabilities. Several types of previously reported app vulnerabilities, such as permission leakage, unauthorized data access, intent spoofing, and etc., belong to this category.
 We propose CHEX, a static analysis method to automatically vet Android apps for component hijacking vulnerabilities. Modeling these vulnerabilities from a data-flow analysis perspective, CHEX analyzes Android apps and detects possible hijack-enabling flows by conducting low-overhead reachability tests on customized system dependence graphs. To tackle analysis challenges imposed by Android's special programming paradigm, we employ a novel technique to discover component entry points in their completeness and introduce app splitting to model the asynchronous executions of multiple entry points in an app.
 We prototyped CHEX based on Dalysis, a generic static analysis framework that we built to support many types of analysis on Android app bytecode. We evaluated CHEX with 5,486 real Android apps and found 254 potential component hijacking vulnerabilities. The median execution time of CHEX on an app is 37.02 seconds, which is fast enough to be used in very high volume app vetting and testing scenarios.},
author = {Long Lu and Zhichun Li and Zhenyu Wu and Wenke Lee and Guofei Jiang},
}

@article{fae437495416846ffb3b66a6f8ab5c6db7d9ae5f,
title = {Behavioral detection of malware on mobile handsets},
year = {2008},
url = {https://semanticscholar.org/paper/fae437495416846ffb3b66a6f8ab5c6db7d9ae5f},
abstract = {A novel behavioral detection framework is proposed to detect mobile worms, viruses and Trojans, instead of the signature-based solutions currently available for use in mobile devices. First, we propose an efficient representation of malware behaviors based on a key observation that the logical ordering of an application's actions over time often reveals the malicious intent even when each action alone may appear harmless. Then, we generate a database of malicious behavior signatures by studying more than 25 distinct families of mobile viruses and worms targeting the Symbian OS - the most widely-deployed handset OS - and their variants. Next, we propose a two-stage mapping technique that constructs these signatures at run-time from the monitored system events and API calls in Symbian OS. We discriminate the malicious behavior of malware from the normal behavior of applications by training a classifier based on Support Vector Machines (SVMs). Our evaluation on both simulated and real-world malware samples indicates that behavioral detection can identify current mobile viruses and worms with more than 96% accuracy. We also find that the time and resource overheads of constructing the behavior signatures from low-level API calls are acceptably low for their deployment in mobile devices.},
author = {Abhijit Bose and Xin Hu and Kang G. Shin and Taejoon Park},
}

@article{410d48ddd9173049d0b3c9a2a6dbf3b606842262,
title = {Automated Static Code Analysis for Classifying Android Applications Using Machine Learning},
year = {2010},
url = {https://semanticscholar.org/paper/410d48ddd9173049d0b3c9a2a6dbf3b606842262},
abstract = {In this paper we apply Machine Learning (ML) techniques on static features that are extracted from Android's application files for the classification of the files. Features are extracted from Android’s Java byte-code (i.e.,.dex files) and other file types such as XML-files. Our evaluation focused on classifying two types of Android applications: tools and games. Successful differentiation between games and tools is expected to provide positive indication about the ability of such methods to learn and model Android benign applications and potentially detect malware files. The results of an evaluation, performed using a test collection comprising 2,285 Android. apk files, indicate that features, extracted statically from. apk files, coupled with ML classification algorithms can provide good indication about the nature of an Android application without running the application, and may assist in detecting malicious applications. This method can be used for rapid examination of Android. apks and informing of suspicious applications.},
author = {Asaf Shabtai and Yuval Fledel and Yuval Elovici},
}

@article{d381cbcf7dbbfdffcff83fb5c1366d7e698cfbe9,
title = {Analysis of Bayesian classification-based approaches for Android malware detection},
year = {2014},
url = {https://semanticscholar.org/paper/d381cbcf7dbbfdffcff83fb5c1366d7e698cfbe9},
abstract = {Mobile malware has been growing in scale and complexity spurred by the unabated uptake of smartphones worldwide. Android is fast becoming the most popular mobile platform resulting in sharp increase in malware targeting the platform. Additionally, Android malware is evolving rapidly to evade detection by traditional signature-based scanning. Despite current detection measures in place, timely discovery of new malware is still a critical issue. This calls for novel approaches to mitigate the growing threat of zero-day Android malware. Hence, the authors develop and analyse proactive machine-learning approaches based on Bayesian classification aimed at uncovering unknown Android malware via static analysis. The study, which is based on a large malware sample set of majority of the existing families, demonstrates detection capabilities with high accuracy. Empirical results and comparative analysis are presented offering useful insight towards development of effective static-analytic Bayesian classification-based solutions for detecting unknown Android malware.},
author = {Suleiman Y. Yerima and Sakir Sezer and Gavin McWilliams},
}

@article{96b9ad1dc02bf90d34f010ea8d43932449a4c8a1,
title = {A Survey on Various Malware Detection Techniques on Mobile Platform},
year = {2016},
url = {https://semanticscholar.org/paper/96b9ad1dc02bf90d34f010ea8d43932449a4c8a1},
abstract = {With the rapid arrival of mobile platforms on the market, android Platform has become a market leader in 2015 Q2, according to IDC. As Android has ruling most of the market, the problem of malware threats and security is also increasing. In this review paper, a fastidious study of the terms related to mobile malware and the techniques used for the detection of malware is done. Some proposed methods and type of approaches used in those methods are also summarized. General Terms Pattern Recognition, Permission based detection Technique.},
author = {Aashima Malhotra and Karan Bajaj},
}
