@article{923724b0fa65494ddfbacaca20a4561cc7eb7c8b,
title = {The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory},
year = {2014},
url = {https://www.semanticscholar.org/paper/923724b0fa65494ddfbacaca20a4561cc7eb7c8b},
abstract = {Memory forensics provides cutting edge technology to help investigate digital attacks Memory forensics is the art of analyzing computer memory (RAM) to solve digital crimes. As a follow-up to the best seller Malware Analyst's Cookbook, experts in the fields of malware, security, and digital forensics bring you a step-by-step guide to memory forensicsnow the most sought after skill in the digital forensics and incident response fields. Beginning with introductory concepts and moving toward the advanced, The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory is based on a five day training course that the authors have presented to hundreds of students. It is the only book on the market that focuses exclusively on memory forensics and how to deploy such techniques properly. Discover memory forensics techniques: How volatile memory analysis improves digital investigationsProper investigative steps for detecting stealth malware and advanced threatsHow to use free, open source tools for conducting thorough memory forensics Ways to acquire memory from suspect systems in a forensically sound manner The next era of malware and security breaches are more sophisticated and targeted, and the volatile memory of a computer is often overlooked or destroyed as part of the incident response process. The Art of Memory Forensics explains the latest technological innovations in digital forensics to help bridge this gap. It covers the most popular and recently released versions of Windows, Linux, and Mac, including both the 32 and 64-bit editions. Bonus materials include more than 20 real-world exercises, sample memory and code files, and even a formal presentation, syllabus, and test bank.},
author = {Michael Ligh and Andrew Case and Jamie Levy and A. Walters},
}

@article{baa9fee1106040d057bd4f5fcdd31849fd31024e,
title = {Evaluating atomicity, and integrity of correct memory acquisition methods},
year = {2016},
url = {https://www.semanticscholar.org/paper/baa9fee1106040d057bd4f5fcdd31849fd31024e},
abstract = {Abstract With increased use of forensic memory analysis, the soundness of memory acquisition becomes more important. We therefore present a black box analysis technique in which memory contents are constantly changed via our payload application with a traceable access pattern. This way, given the correctness of a memory acquisition procedure, we can evaluate its atomicity and one aspect of integrity as defined by Vomel and Freiling (2012). We evaluated our approach on several memory acquisition techniques represented by 12 memory acquisition tools using a Windows 7 64-bit operating system running on a i5-2400 with 2 GiB RAM. We found user-mode memory acquisition software (ProcDump, Windows Task Manager), which suspend the process during memory acquisition, to provide perfect atomicity and integrity for snapshots of process memory. Cold-boot attacks (memimage, msramdump), virtualization (VirtualBox) and emulation (QEMU) all deliver perfect atomicity and integrity of full physical system memory snapshots. Kernel level software acquisition tools (FTK Imager, DumpIt, win64dd, WinPmem) exhibit memory smear from concurrent system activity reducing their atomicity. There integrity is reduced by running within the imaged memory space, hence overwriting part of the memory contents to be acquired. The least amount of atomicity is exhibited by a DMA attack (inception using IEEE 1394). Further, even if DMA is performed completely in hardware, integrity violations with respect to the point in time of the acquisition let this method appear inferior to all other methods. Our evaluation methodology is generalizable to examine further memory acquisition procedures on other operating systems and platforms.},
author = {M. Gruhn and F. Freiling},
journal = {Digital Investigation},
volume = {16},
pages = {},
doi = {10.1016/J.DIIN.2016.01.003},
}

@article{0b7cc7c466d87549aa788638d70dc5c24f54ddc1,
title = {Exploratory study on memory analysis of Windows 7 operating system},
year = {2010},
url = {https://www.semanticscholar.org/paper/0b7cc7c466d87549aa788638d70dc5c24f54ddc1},
abstract = {Several new features of Windows 7 may provide new challenges for memory investigation, and also offer opportunities for acquiring more forensically sensitive information which can be recovered and extracted from the memory image file. This paper analyzed the new features in Windows 7 and developed the memory analysis method according to these new features. The method is based on the data structure in windows which is known as Kernel Processor Control Region (KPCR). Details of address translation from virtual address to physical address are presented, including three steps: acquisition of KPCR structure, acquisition the address of CR3 register and address translation algorithm. Running processes, object type and registry can be extracted by this method. It is verified on 32-bit Windows 7 and 64-bit Windows 7.},
author = {Shuhui Zhang and Lianhai Wang and Ruichao Zhang and Qiuxiang Guo},
journal = {2010 3rd International Conference on Advanced Computer Theory and Engineering(ICACTE)},
volume = {6},
pages = {V6-373-V6-377},
doi = {10.1109/ICACTE.2010.5579832},
}

@article{4a6de0af3568634209ad86fa4d0b163e1f7ef912,
title = {Extracting Windows command line details from physical memory},
year = {2010},
url = {https://www.semanticscholar.org/paper/4a6de0af3568634209ad86fa4d0b163e1f7ef912},
abstract = {Current memory forensic tools concentrate mainly on system-related information like processes and sockets. There is a need for more memory forensic techniques to extract user-entered data retained in various Microsoft Windows applications such as the Windows command prompt. The command history is a prime source of evidence in many intrusions and other computer crimes, revealing important details about an offender's activities on the subject system. This paper dissects the data structures of the command prompt history and gives forensic practitioners a tool for reconstructing the Windows command history from a Windows XP memory capture. At the same time, this paper demonstrates a methodology that can be generalized to extract user-entered data on other versions of Windows.},
author = {Richard M. Stevens and E. Casey},
journal = {Digit. Investig.},
volume = {7},
pages = {S57-S63},
doi = {10.1016/J.DIIN.2010.05.008},
}

@article{8dc649c3a441c4780d471d30d5c3f0d32d121461,
title = {Dynamic recreation of kernel data structures for live forensics},
year = {2010},
url = {https://www.semanticscholar.org/paper/8dc649c3a441c4780d471d30d5c3f0d32d121461},
abstract = {The role of live forensics in digital forensic investigations has become vital due to the importance of volatile data such as encryption keys, network activity, currently running processes, in memory only malware, and other key pieces of data that are lost when a device is powered down. While the technology to perform the first steps of a live investigation, physical memory collection and preservation, is available, the tools for completing the remaining steps remain incomplete. First-generation memory analyzers performed simple string and regular expression operations on the memory dump to locate data such as passwords, credit card numbers, fragments of chat conversations, and social security numbers. A more in-depth analysis can reveal information such as running processes, networking information, open file data, loaded kernel modules, and other critical information that can be used to gain insight into activity occurring on the machine when a memory acquisition occurred. To be useful, tools for performing this in-depth analysis must support a wide range of operating system versions with minimum configuration. Current live forensics tools are generally limited to a single kernel version, a very restricted set of closely related versions, or require substantial manual intervention. This paper describes techniques developed to allow automatic adaptation of memory analysis tools to a wide range of kernel versions. Dynamic reconstruction of kernel data structures is obtained by analyzing the memory dump for the instructions that reference needed kernel structure members. The ability to dynamically recreate C structures used within the kernel allows for a large amount of information to be obtained and processed. Currently, this capability is used within a tool called RAMPARSER that is able to simulate commands such as ps and netstat as if an investigator were sitting at the machine at the time of the memory acquisition. Other applications of the developed capabilities include kernel-level malware detection, recovery of processes memory and file mappings, and other areas of forensics interest.},
author = {Andrew Case and Lodovico Marziale and G. Richard},
journal = {Digital Investigation},
volume = {7},
pages = {},
doi = {10.1016/J.DIIN.2010.05.005},
}

@article{920fab8b6e5847f2c3f0c08c1f16d7ebf02d2a0d,
title = {Pool Allocations as an Information Source in Windows Memory Forensics},
year = {2006},
url = {https://www.semanticscholar.org/paper/920fab8b6e5847f2c3f0c08c1f16d7ebf02d2a0d},
abstract = {The Microsoft Windows kernel provides a heap-like memory management, called "pools". Whenever some kernel-mode code requires an amount of memory, it is allocated from a pool. Ignoring the documented interface and searching the whole dump of physical memory for signatures of pool allocations allows the forensic examiner to gain information not only from currently active but also from freed and not yet overwritten allocations. Understanding the inner mechanics of memory pools enables an examiner to connect certain finds in memory to the originating piece of code. As an example this articles describes the steps necessary to detect traces of network activity in a memory dump.},
author = {Andreas Schuster},
}

@article{9133478dafcaea102c14ea963928ddb0f4f73189,
title = {Correctness, atomicity, and integrity: Defining criteria for forensically-sound memory acquisition},
year = {2012},
url = {https://www.semanticscholar.org/paper/9133478dafcaea102c14ea963928ddb0f4f73189},
abstract = {Abstract While procedures for forensic memory analysis have been well described in the literature, the actual data acquisition process has been researched to a lesser degree. In particular, even though forensic analysts commonly agree that a memory snapshot should be “correct”, “sound”, and “reliable”, the meaning of these terms still remains informal and vague. In this paper, we formalize three fundamental criteria, correctness , atomicity , and integrity , that determine the quality of a forensic memory image. We illustrate the criteria with the help of a number of intuitive examples, discuss the meaning of forensic soundness as well as outline implications and challenges for memory acquisition solutions available on the market to date.},
author = {Stefan Vömel and F. Freiling},
journal = {Digit. Investig.},
volume = {9},
pages = {125-137},
doi = {10.1016/j.diin.2012.04.005},
}

@article{b69b74eea7fd1fee7c422044cdb17e51c4c3f205,
title = {Vis: Virtualization enhanced live forensics acquisition for native system},
year = {2012},
url = {https://www.semanticscholar.org/paper/b69b74eea7fd1fee7c422044cdb17e51c4c3f205},
abstract = {Abstract Current live acquisition systems can obtain memory content of a running system, but they either fail to provide accurate native system physical memory acquisition at the given time point or require suspending the machine and altering the execution environment drastically. To address this issue, we propose Vis, a lightweight virtualization approach to provide accurate retrieval of physical memory content without disturbing the execution of the target native system. Our experimental results indicate that Vis is capable of reliably retrieving an accurate system image. Moreover, Vis accomplishes live acquisition in around 100 s, where previous remote live acquisition tools take hours and static acquisition takes days. On average, the performance reduction for the target system is 9.62%.},
author = {M. Yu and Zhengwei Qi and Qian Lin and Xianming Zhong and Bingyu Li and Haibing Guan},
journal = {Digit. Investig.},
volume = {9},
pages = {22-33},
doi = {10.1016/j.diin.2012.04.002},
}

@article{81774e1c5bd77ef717c7980f4459da3d31097ff5,
title = {Windows Memory Analysis Based on KPCR},
year = {2009},
url = {https://www.semanticscholar.org/paper/81774e1c5bd77ef717c7980f4459da3d31097ff5},
abstract = {his paper briefly introduces the challenges facing collection of volatile data in a target computer. Resons to favor physical memory analysis are also given. After describing the related work of the memory analysis, details of a windows memory analysing method are given through which it is possible to extract useful information, such as running processes , current network connections, file contents, etc., from a memory image. The method is based on a data structure in windows known as Kernel Processor Control Region, or KPCR. Besides, details of address translation from virtual address to physical address are thoroughly discussed and an algorithm of address translation for practice is given. This method is verified on Windows XP SP2, Windows 2003 Server SP2 and Windows Vista Home Basic.},
author = {Ruichao Zhang and Lianhai Wang and Shuhui Zhang},
journal = {2009 Fifth International Conference on Information Assurance and Security},
volume = {2},
pages = {677-680},
doi = {10.1109/IAS.2009.103},
}

@article{8a9821665797da330ad4c254a57e5299f530cfd7,
title = {Live and Trustworthy Forensic Analysis of Commodity Production Systems},
year = {2010},
url = {https://www.semanticscholar.org/paper/8a9821665797da330ad4c254a57e5299f530cfd7},
abstract = {We present HyperSleuth, a framework that leverages the virtualization extensions provided by commodity hardware to securely perform live forensic analysis of potentially compromised production systems. HyperSleuth provides a trusted execution environment that guarantees four fundamental properties. First, an attacker controlling the system cannot interfere with the analysis and cannot tamper the results. Second, the framework can be installed as the system runs, without a reboot and without loosing any volatile data. Third, the analysis performed is completely transparent to the OS and to an attacker. Finally, the analysis can be periodically and safely interrupted to resume normal execution of the system. On top of HyperSleuth we implemented three forensic analysis applications: a lazy physical memory dumper, a lie detector, and a system call tracer. The experimental evaluation we conducted demonstrated that even time consuming analysis, such as the dump of the content of the physical memory, can be securely performed without interrupting the services offered by the system.},
author = {L. Martignoni and Aristide Fattori and Roberto Paleari and L. Cavallaro},
doi = {10.1007/978-3-642-15512-3_16},
}

@article{ab2d2a19da0c4eaba58ba7e7b089c1be4991c7af,
title = {Android Memory Capture and Applications for Security and Privacy},
year = {2011},
url = {https://www.semanticscholar.org/paper/ab2d2a19da0c4eaba58ba7e7b089c1be4991c7af},
abstract = {This Thesis-Restricted is protected by copyright and/or related rights. It has been brought to you by ScholarWorks@UNO with permission from the rights-holder(s). You are free to use this Thesis-Restricted in any way that is permitted by the copyright and related rights legislation that applies to your use. For other uses you need to obtain permission from the rights-holder(s) directly, unless additional rights are indicated by a Creative Commons license in the record and/or on the work itself.},
author = {Joe Sylve},
}

@article{3311ed0c63d4ca707c49256655e401f37f25ec50,
title = {Using every part of the buffalo in Windows memory analysis},
year = {2007},
url = {https://www.semanticscholar.org/paper/3311ed0c63d4ca707c49256655e401f37f25ec50},
abstract = {All Windows memory analysis techniques depend on the examiner's ability to translate the virtual addresses used by programs and operating system components into the true locations of data in a memory image. In some memory images up to 20% of all the virtual addresses in use point to so called ''invalid'' pages that cannot be found using a naive method for address translation. This paper explains virtual address translation, enumerates the different states of invalid memory pages, and presents a more robust strategy for address translation. This new method incorporates invalid pages and even the paging file to greatly increase the completeness of the analysis. By using every available page, every part of the buffalo as it were, the examiner can better recreate the state of the machine as it existed at the time of imaging.},
author = {Jesse D. Kornblum},
journal = {Digit. Investig.},
volume = {4},
pages = {24-29},
doi = {10.1016/j.diin.2006.12.002},
}

@article{0568f2cffeec6a1b38cc0ff2d1ea79c90671fb34,
title = {Forensic memory analysis: Files mapped in memory},
year = {2008},
url = {https://www.semanticscholar.org/paper/0568f2cffeec6a1b38cc0ff2d1ea79c90671fb34},
abstract = {In this paper we describe a method for recovering files mapped in memory and to link mapped-file information process data. This information is forensically interesting, because it helps determine the origin and usage of the file and because it reduces the amount of unidentified data in a memory dump. To find mapped-file content, we apply several different techniques. Together, these techniques can identify approximately 25% of test memory dumps as being part of a memory-mapped file.},
author = {R. Baar and W. Alink and A. R. Ballegooij},
journal = {Digit. Investig.},
volume = {5},
pages = {S52-S57},
doi = {10.1016/J.DIIN.2008.05.014},
}

@article{286b0d8a957f8f10ae5aa60975a14550249a61da,
title = {Anti-forensic resilient memory acquisition},
year = {2013},
url = {https://www.semanticscholar.org/paper/286b0d8a957f8f10ae5aa60975a14550249a61da},
abstract = {Memory analysis has gained popularity in recent years proving to be an effective technique for uncovering malware in compromised computer systems. The process of memory acquisition presents unique evidentiary challenges since many acquisition techniques require code to be run on a potential compromised system, presenting an avenue for anti-forensic subversion. In this paper, we examine a number of simple anti-forensic techniques and test a representative sample of current commercial and free memory acquisition tools. We find that current tools are not resilient to very simple anti-forensic measures. We present a novel memory acquisition technique, based on direct page table manipulation and PCI hardware introspection, without relying on operating system facilities - making it more difficult to subvert. We then evaluate this technique's further vulnerability to subversion by considering more advanced anti-forensic attacks.},
author = {Johannes Stüttgen and Michael I. Cohen},
journal = {Digital Investigation},
volume = {10},
pages = {},
doi = {10.1016/J.DIIN.2013.06.012},
}

@article{18c5e3834f537d8ae4da3a604317d575eb967192,
title = {Combining static and live digital forensic analysis in virtual environment},
year = {2009},
url = {https://www.semanticscholar.org/paper/18c5e3834f537d8ae4da3a604317d575eb967192},
abstract = {Traditional digital forensics is performed through static analysis of data preserved on permanent storage media. Not all data needed to understand the state of examined system exists in nonvolatile memory. Live analysis uses running system to obtain volatile data for deeper understanding of events going on. Sampling running system might irreversibly change its state making collected evidence invalid. This paper proposes combination of static and live analysis. Virtualization is used to bring static data to life. Volatile memory dump is used to enable offline analysis of live data. Using data from memory dump, virtual machine created from static data can be adjusted to provide better picture of the live system at the time when the dump was made. Investigator can have interactive session with virtual machine without violating evidence integrity. Tests with sample system confirm viability of proposed approach.},
author = {S. Mrdović and A. Huseinović and E. Zajko},
journal = {2009 XXII International Symposium on Information, Communication and Automation Technologies},
volume = {},
pages = {1-6},
doi = {10.1109/ICAT.2009.5348415},
}

@article{594fb4b652ef2022d1d51208bc3556f178625562,
title = {Acquisition and analysis of compromised firmware using memory forensics},
year = {2015},
url = {https://www.semanticscholar.org/paper/594fb4b652ef2022d1d51208bc3556f178625562},
abstract = {To a great degree, research in memory forensics concentrates on the acquisition and analysis of kernel- and user-space software from physical memory to date. With the system firmware, a much more privileged software layer exists in modern computer systems though that has recently become the target in sophisticated computer attacks more often. Compromise strategies used by high profile rootkits are almost completely invisible to standard forensic procedures and can only be detected with special soft- or hardware mechanisms. In this paper, we illustrate a variety of firmware manipulation techniques and propose methods for identifying firmware-level threats in the course of memory forensic investigations. We have implemented our insights into well-known open-source memory forensic tools and have evaluated our approach within both physical and virtual environments.},
author = {Johannes Stüttgen and Stefan Vömel and Michael Denzel},
journal = {Digit. Investig.},
volume = {12 Supplement 1},
pages = {S50-S60},
doi = {10.1016/j.diin.2015.01.010},
}

@article{1c3c217b80d84ede1174d9d692a9e6696bc8e55c,
title = {When hardware meets software: a bulletproof solution to forensic memory acquisition},
year = {2012},
url = {https://www.semanticscholar.org/paper/1c3c217b80d84ede1174d9d692a9e6696bc8e55c},
abstract = {The acquisition of volatile memory of running systems has become a prominent and essential procedure in digital forensic analysis and incident responses. In fact, unencrypted passwords, cryptographic material, text fragments and latest-generation malware may easily be protected as encrypted blobs on persistent storage, while living seamlessly in the volatile memory of a running system. Likewise, systems' run-time information, such as open network connections, open files and running processes, are by definition live entities that can only be observed by examining the volatile memory of a running system. In this context, tampering of volatile data while an acquisition is in progress or during transfer to an external trusted entity is an ongoing issue as it may irremediably invalidate the collected evidence.
 To overcome such issues, we present SMMDumper, a novel technique to perform atomic acquisitions of volatile memory of running systems. SMMDumper is implemented as an x86 firmware, which leverages the System Management Mode of Intel CPUs to create a complete and reliable snapshot of the state of the system that, with a minimal hardware support, is resilient to malware attacks. To the best of our knowledge, SMMDumper is the first technique that is able to atomically acquire the whole volatile memory, overcoming the SMM-imposed 4GB barrier while providing integrity guarantees and running on commodity systems.
 Experimental results show that the time SMMDumper requires to acquire and transfer 6GB of physical memory of a running system is reasonable to allow for a real-world adoption in digital forensic analyses and incident responses.},
author = {Alessandro Reina and Aristide Fattori and Fabio Pagani and L. Cavallaro and D. Bruschi},
doi = {10.1145/2420950.2420962},
}

@article{f889e33aa8e6d70f7ea8484375e6e9cc415aac9e,
title = {Forensic memory analysis: From stack and code to execution history},
year = {2007},
url = {https://www.semanticscholar.org/paper/f889e33aa8e6d70f7ea8484375e6e9cc415aac9e},
abstract = {Forensics memory analysis has recently gained great attention in cyber forensics community. However, most of the proposals have focused on the extraction of important kernel data structures such as executive objects from the memory. In this paper, we propose a formal approach to analyze the stack memory of process threads to discover a partial execution history of the process. Our approach uses a process logic to model the extracted properties from the stack and then verify these properties against models generated from the program assembly code. The main focus of the paper is on Windows thread stack analysis though the same idea is applicable to other operating systems.},
author = {A. Arasteh and M. Debbabi},
journal = {Digit. Investig.},
volume = {4},
pages = {114-125},
doi = {10.1016/J.DIIN.2007.06.010},
}

@article{4dbf6c4a69bd5633707dd5e140c10a19b58612b3,
title = {Acquisition and analysis of volatile memory from android devices},
year = {2012},
url = {https://www.semanticscholar.org/paper/4dbf6c4a69bd5633707dd5e140c10a19b58612b3},
abstract = {Abstract The Android operating system for mobile phones, which is still relatively new, is rapidly gaining market share, with dozens of smartphones and tablets either released or set to be released. In this paper, we present the first methodology and toolset for acquisition and deep analysis of volatile physical memory from Android devices. The paper discusses some of the challenges in performing Android memory acquisition, discusses our new kernel module for dumping memory, named dmd, and specifically addresses the difficulties in developing device-independent acquisition tools. Our acquisition tool supports dumping memory to either the SD on the phone or via the network. We also present analysis of kernel structures using newly developed Volatility functionality. The results of this work illustrate the potential that deep memory analysis offers to digital forensics investigators.},
author = {Joe Sylve and Andrew Case and Lodovico Marziale and G. Richard},
journal = {Digit. Investig.},
volume = {8},
pages = {175-184},
doi = {10.1016/j.diin.2011.10.003},
}

@article{ec32b322c62275797fc71c5eaae52f7e8a7e9430,
title = {Windows operating systems agnostic memory analysis},
year = {2010},
url = {https://www.semanticscholar.org/paper/ec32b322c62275797fc71c5eaae52f7e8a7e9430},
abstract = {Memory analysis is an integral part of any computer forensic investigation, providing access to volatile data not found on a drive image. While memory analysis has recently made significant progress, it is still hampered by hard-coded tools that cannot generalize beyond the specific operating system and version they were developed for. This paper proposes using the debug structures embedded in memory dumps and Microsoft's program database (PDB) files to create a flexible tool that takes an arbitrary memory dump from any of the family of Windows NT operating systems and extract process, configuration, and network activity information. The debug structures and PDB files are incorporated into a memory analysis tool and tested against dumps from 32-bit Windows XP with physical address extensions (PAE) enabled and disabled, 32-bit Windows Vista with PAE enabled, and 64-bit Windows 7 systems. The results show the analysis tool is able to identify and parse an arbitrary memory dump and extract process, registry, and network communication information.},
author = {James S. Okolica and Gilbert L. Peterson},
journal = {Digital Investigation},
volume = {7},
pages = {},
doi = {10.1016/J.DIIN.2010.05.007},
}

@article{d12a62665af853abb247e52a6e2670a9be2bb650,
title = {A proposal for an integrated memory acquisition mechanism},
year = {2008},
url = {https://www.semanticscholar.org/paper/d12a62665af853abb247e52a6e2670a9be2bb650},
abstract = {Volatile memory forensics has become increasingly prominent in forensic analysis and incident response. Unfortunately there is currently no forensically sound method of acquiring an image of a system's memory without attaching specialized hardware. This paper proposes the addition of a memory acquisition mechanism to the operating system, thereby removing the need to load an external program. The method minimizes the acquisition's impact on the system's state, as well as making it more difficult for malicious programs to avoid detection or interfere with the memory dump. The risks of allowing a full memory capture and some considerations on how this method would interact with rootkits are also discussed.},
author = {Eugene Libster and Jesse D. Kornblum},
journal = {Operating Systems Review},
volume = {42},
pages = {14-20},
doi = {10.1145/1368506.1368510},
}

@article{fbf1fdef0d08258c0740170dbe793be133887e2f,
title = {Memory Forensic Challenges Under Misused Architectural Features},
year = {2018},
url = {https://www.semanticscholar.org/paper/fbf1fdef0d08258c0740170dbe793be133887e2f},
abstract = {With increasingly complex cyber attacks occurring every day, memory-based forensic techniques are becoming instrumental in digital investigations. Forensic examiners can unravel what happened on a system by acquiring and inspecting in-memory data. However, the foundation of this analysis can be invalidated if the memory acquisition has been altered. In this paper, we study the feasibility of malicious software misusing architectural features to sabotage memory forensics. The misuse of two architectural features, namely, physical address layout and secure containers, is presented. The first architectural feature explored in this paper is the physical address layout. It is used by the northbridge to route memory access to either physical memory or I/O devices on x86 platforms. Observing this design choice, we propose Hidden in I/O Space (HIveS), which manipulates CPU registers to alter the physical address layout to conceal memory. The system uses a novel I/O shadowing technique to lock a memory region named HIveS memory into I/O address space to prevent access. Two novel techniques, blackbox write and TLB camouflage, are developed to further protect the unlocked HIveS memory against memory forensics while allowing access for attackers. The second architectural feature explored in this paper is hardware-aided secure execution technology. More specifically, hardware-enforced memory encryption in Intel secure guard extension is used in malicious enclave software (Malclaveware) to prevent introspection and memory forensics. A prototype of HIveS is built and tested against a set of memory acquisition tools for both Windows and Linux running on the x86 platform. Malclaveware is also prototyped in Windows to demonstrate the risk. More importantly, we proposed countermeasures and mitigations for the newly discovered attacks. Through these discussions, we aim to raise the awareness of the potential risks of misusing hardware architectural features.},
author = {N. Zhang and Ruide Zhang and Kun Sun and W. Lou and Y. T. Hou and S. Jajodia},
journal = {IEEE Transactions on Information Forensics and Security},
volume = {13},
pages = {2345-2358},
doi = {10.1109/TIFS.2018.2819119},
}

@article{d81d8a05ce7ea20632e953809017917d9a4a2938,
title = {An evaluation platform for forensic memory acquisition software},
year = {2013},
url = {https://www.semanticscholar.org/paper/d81d8a05ce7ea20632e953809017917d9a4a2938},
abstract = {Memory forensics has gradually moved into the focus of researchers and practitioners alike in recent years. With an increasing effort to extract valuable information from a snapshot of a computer's RAM, the necessity to properly assess the respective solutions rises as well. In this paper, we present an evaluation platform for forensic memory acquisition software. The platform is capable of measuring distinct factors that determine the quality of a generated memory image, specifically its correctness, atomicity, and integrity. Tests are performed for three popular open source applications, win32dd, WinPMEM, and mdd, as well as for different memory sizes.},
author = {Stefan Vömel and Johannes Stüttgen},
journal = {Digital Investigation},
volume = {10},
pages = {},
doi = {10.1016/J.DIIN.2013.06.004},
}

@article{4189b0dda088a8e4a13195348b3a4080e5d4eefd,
title = {The impact of Microsoft Windows pool allocation strategies on memory forensics},
year = {2016},
url = {https://www.semanticscholar.org/paper/4189b0dda088a8e4a13195348b3a4080e5d4eefd},
abstract = {An image of a computer’s physical memory can provide a forensic examiner with a wealth of information. A small area of system memory, the nonpaged pool, contains lots of information about currently and formerly active processes. As this paper shows, more than 90% of such information can be retrieved even 24 h after process termination under optimum},
author = {Deutsche Telekom and Friedrich-Ebert-Allee},
}

@article{1c2281061b6a893651207b87b1cefef51709680c,
title = {Firmware-assisted Memory Acquisition and Analysis tools for Digital Forensics},
year = {2011},
url = {https://www.semanticscholar.org/paper/1c2281061b6a893651207b87b1cefef51709680c},
abstract = {Being able to inspect and analyze the operational state of commodity machines is crucial for modern digital forensics. Indeed, volatile system state including memory data and CPU registers contain information that cannot be directly inferred or reconstructed by acquiring the contents of the nonvolatile storage. Unfortunately, it still remains an open problem how to reliably and consistently retrieve the volatile machine state without disrupting its operation. In this paper, we propose to leverage commercial PCI network cards and the current x86 implementation of System Management Mode to reliably replicate the physical memory and critical CPU registers from commodity hardware. Furthermore, we demonstrate how remote state replication can be used for semantic reconstruction, where the analysis of memory structures enables us to interactively perform forensic analysis of the machine's memory content.},
author = {Jiang Wang and F. Zhang and Kun Sun and A. Stavrou},
journal = {2011 Sixth IEEE International Workshop on Systematic Approaches to Digital Forensic Engineering},
volume = {},
pages = {1-5},
doi = {10.1109/SADFE.2011.7},
}

@article{b358feb9c8f2704aa742ff69ab04d04766468146,
title = {Memory forensics: The path forward},
year = {2017},
url = {https://www.semanticscholar.org/paper/b358feb9c8f2704aa742ff69ab04d04766468146},
abstract = {Traditionally, digital forensics focused on artifacts located on the storage devices of computer systems, mobile phones, digital cameras, and other electronic devices. In the past decade, however, researchers have created a number of powerful memory forensics tools that expand the scope of digital forensics to include the examination of volatile memory as well. While memory forensic techniques have evolved from simple string searches to deep, structured analysis of application and kernel data structures for a number of platforms and operating systems, much research remains to be done. This paper surveys the state-of-the-art in memory forensics, provide critical analysis of current-generation techniques, describe important changes in operating systems design that impact memory forensics, and sketches important areas for further research.},
author = {Andrew Case and G. Richard},
journal = {Digit. Investig.},
volume = {20},
pages = {23-33},
doi = {10.1016/J.DIIN.2016.12.004},
}

@article{e362edd8953ced590d79f5d15360233131913c80,
title = {A survey of main memory acquisition and analysis techniques for the windows operating system},
year = {2011},
url = {https://www.semanticscholar.org/paper/e362edd8953ced590d79f5d15360233131913c80},
abstract = {Traditional, persistent data-oriented approaches in computer forensics face some limitations regarding a number of technological developments, e.g., rapidly increasing storage capabilities of hard drives, memory-resident malicious software applications, or the growing use of encryption routines, that make an in-time investigation more and more difficult. In order to cope with these issues, security professionals have started to examine alternative data sources and emphasize the value of volatile system information in RAM more recently. In this paper, we give an overview of the prevailing techniques and methods to collect and analyze a computer's memory. We describe the characteristics, benefits, and drawbacks of the individual solutions and outline opportunities for future research in this evolving field of IT security.},
author = {Stefan Vömel and F. Freiling},
journal = {Digit. Investig.},
volume = {8},
pages = {3-22},
doi = {10.1016/j.diin.2011.06.002},
}

@article{e6bdb460aea36fb1480f3514fc7f4d71ea66aac4,
title = {Searching for processes and threads in Microsoft Windows memory dumps},
year = {2006},
url = {https://www.semanticscholar.org/paper/e6bdb460aea36fb1480f3514fc7f4d71ea66aac4},
abstract = {Current tools to analyze memory dumps of systems running Microsoft Windows usually build on the concept of enumerating lists maintained by the kernel to keep track of processes, threads and other objects. Therefore they will frequently fail to detect objects that are already terminated or which have been hidden by Direct Kernel Object Manipulation techniques. This article analyzes the in-memory structures which represent processes and threads. It develops search patterns which will then be used to scan the whole memory dump for traces of said objects, independent from the aforementioned lists. As demonstrated by a proof-of-concept implementation this approach could reveal hidden and terminated processes and threads, under some circumstances even after the system under examination has been rebooted.},
author = {Andreas Schuster},
journal = {Digit. Investig.},
volume = {3},
pages = {10-16},
doi = {10.1016/j.diin.2006.06.010},
}

@article{99451dc73fd9b708610fc32c56f6fc7d497b75c6,
title = {The VAD tree: A process-eye view of physical memory},
year = {2007},
url = {https://www.semanticscholar.org/paper/99451dc73fd9b708610fc32c56f6fc7d497b75c6},
abstract = {This paper describes the use of the Virtual Address Descriptor (VAD) tree structure in Windows memory dumps to help guide forensic analysis of Windows memory. We describe how to locate and parse the structure, and show its value in breaking up physical memory into more manageable and semantically meaningful units than can be obtained by simply walking the page directory for the process. Several tools to display information about the VAD tree and dump the memory regions it describes will also be presented.},
author = {Brendan Dolan-Gavitt},
journal = {Digit. Investig.},
volume = {4},
pages = {62-64},
doi = {10.1016/J.DIIN.2007.06.008},
}

@article{a46fdf54e36c64212310246ca71e64cd66d1ffc7,
title = {Volatools : Integrating Volatile Memory Forensics into the Digital Investigation Process},
year = {2007},
url = {https://www.semanticscholar.org/paper/a46fdf54e36c64212310246ca71e64cd66d1ffc7},
abstract = {In this work, we demonstrate the integral role of volatile memory analysis in the digital investigation process and how that analysis can be used to help address many of the challenges facing the digital forensics community. We also provide a look at some of the shortcomings of existing approaches to live response. Finally, we provide the technical details for extracting in-memory cryptographic keying material from a popular disk encryption application without knowledge of the password.},
author = {A. Walters and Nick L. Petroni},
}

@article{3c7a8ba9ae667e8dd4fffb561fd1254ecf94432e,
title = {In lieu of swap: Analyzing compressed RAM in Mac OS X and Linux},
year = {2014},
url = {https://www.semanticscholar.org/paper/3c7a8ba9ae667e8dd4fffb561fd1254ecf94432e},
abstract = {The forensics community is increasingly embracing the use of memory analysis to enhance traditional storage-based forensics techniques, because memory analysis yields a wealth of information not available on non-volatile storage. Memory analysis involves capture of a system's physical memory so that the live state of a system can be investigated, including executing and terminated processes, application data, network connections, and more. One aspect of memory analysis that remains elusive is investigation of the system's swap file, which is a backing store for the operating system's virtual memory system. Swap files are a potentially interesting source of forensic evidence, but traditionally, most swap file analysis has consisted of string searches and scans for small binary structures, which may in some cases be revelatory, but are also fraught with provenance issues. Unfortunately, more sophisticated swap file analysis is complicated by the difficulty of capturing mutually consistent memory dumps and swap files, the increasing use of swap file encryption, and other issues. Fortunately, compressed RAM facilities, such as those in Mac OS X Mavericks and recent versions of the Linux kernel, attempt to reduce or eliminate swapping to disk through compression. The storage of compressed pages in RAM both increases performance and offers an opportunity to gather digital evidence which in the past would have been swapped out. This paper discusses the difficulty of analyzing swap files in more detail, the compressed RAM facilities in Mac OS X and Linux, and our new tools for analysis of compressed RAM. These tools are integrated into the open-source Volatility framework.},
author = {G. Richard and Andrew Case},
journal = {Digit. Investig.},
volume = {11},
pages = {S3-S12},
doi = {10.1016/j.diin.2014.05.011},
}

@article{8e270da16d0292f269cbc2b239c5db95760a495d,
title = {Forensic analysis of the Windows registry in memory},
year = {2008},
url = {https://www.semanticscholar.org/paper/8e270da16d0292f269cbc2b239c5db95760a495d},
abstract = {This paper describes the structure of the Windows registry as it is stored in physical memory. We present tools and techniques that can be used to extract this data directly from memory dumps. We also provide guidelines to aid investigators and experimentally demonstrate the value of our techniques. Finally, we describe a compelling attack that modifies the cached version of the registry without altering the on-disk version. While this attack would be undetectable with conventional on-disk registry analysis techniques, we demonstrate that such malicious modifications are easily detectable by examining memory.},
author = {Brendan Dolan-Gavitt},
journal = {Digit. Investig.},
volume = {5},
pages = {S26-S32},
doi = {10.1016/J.DIIN.2008.05.003},
}

@article{3d22a90519c96bf0cf5e98266eab2ee1be6b87c0,
title = {Locating ×86 paging structures in memory images},
year = {2010},
url = {https://www.semanticscholar.org/paper/3d22a90519c96bf0cf5e98266eab2ee1be6b87c0},
abstract = {Digital memory forensics consists of analyzing various components of a memory image from a compromised host. A memory image consists of data and processes that were running on the system at the time the image was created. Previously running processes are one of the key items in memory images to identify, including potentially hidden processes. Each process has its own paging structures that define its address space, so locating the paging structures can potentially lead to finding all of the processes that were running. In this paper, we describe an algorithm to locate paging structures in a memory image of an x86 platform running either Linux or Windows XP. The algorithm can be used to find paging structures for potential processes that were hidden by rootkits or other malware. Furthermore, if the system was running an x86 virtual machine, the algorithm can locate paging structures associated with both the host kernel and the guest kernel processes. Our algorithm relies more on the constructs of the x86 hardware and less on the operating system running on top of the hardware. This means that the algorithm works for many different operating systems with only minor tweaking.},
author = {Karla Saur and J. Grizzard},
journal = {Digit. Investig.},
volume = {7},
pages = {28-37},
doi = {10.1016/j.diin.2010.08.002},
}

@article{3494657d981b651cf09f9cf88643855bc74a0a9c,
title = {BodySnatcher: Towards reliable volatile memory acquisition by software},
year = {2007},
url = {https://www.semanticscholar.org/paper/3494657d981b651cf09f9cf88643855bc74a0a9c},
abstract = {Recently there has been a surge in interest in memory forensics: the acquisition and analysis of the contents of physical memory obtained from live hosts. The emergence of kernel level rootkits, anti-forensics, and the threat of subversion that they pose threatens to undermine the reliability of such memory images and digital evidence in general. In this paper we propose a method of acquiring the contents of volatile memory from arbitrary operating systems in a manner that provides point in time atomic snapshots of the host OS volatile memory. Additionally the method is more resistant to subversion due to its reduced attack surface. Our method is to inject an independent, acquisition specific OS into the potentially subverted host OS kernel, snatching full control of the host's hardware. We describe an implementation of this proposal, which we call BodySnatcher, which has demonstrated proof of concept by acquiring memory from Windows 2000 operating systems.},
author = {Bradley L. Schatz},
journal = {Digit. Investig.},
volume = {4},
pages = {126-134},
doi = {10.1016/J.DIIN.2007.06.009},
}

@article{4372e6b97b5aad19ecae8a5f3ac930a23eedc495,
title = {Extracting the windows clipboard from physical memory},
year = {2011},
url = {https://www.semanticscholar.org/paper/4372e6b97b5aad19ecae8a5f3ac930a23eedc495},
abstract = {When attempting to reconstruct the events leading up to a cyber security incident, one potentially important piece of information is the clipboard (Prosise et al., 2003). The clipboard has been present in Windows since Windows 3.1 and is the mechanism for transferring information from one application to another through copy and pasting actions. Being able to retrieve the last file copied or the last password used may provide investigators with invaluable information during a forensic investigation. This paper describes the Windows clipboard structure and the process of retrieving copy/paste information from Windows XP, Vista, and Windows 7 (both 32 bit and 64 bit) memory captures with data from applications including Notepad, Microsoft Word, and Microsoft Excel.},
author = {James S. Okolica and Gilbert L. Peterson},
journal = {Digit. Investig.},
volume = {8},
pages = {S118-S124},
doi = {10.1016/J.DIIN.2011.05.014},
}

@article{baeea64dc1b7128149bcfcd4e2f82b312b221aff,
title = {A universal taxonomy and survey of forensic memory acquisition techniques},
year = {2019},
url = {https://www.semanticscholar.org/paper/baeea64dc1b7128149bcfcd4e2f82b312b221aff},
abstract = {Abstract Main memory analysis plays an increasingly important role in today's digital forensic analysis. It can be used to retrieve encryption keys or to analyze malware that solely resides in RAM. Typically, the memory is acquired prior to analysis. As of today, there exist a large number of different techniques and tools to accomplish this task that all have their own advantages and disadvantages and appear to be incompareable. In this paper, we define a taxonomy of acquisition methods based on a well-defined partial order that generalizes the concept of ring-based privilege separation. Using this taxonomy, we provide a comprehensive survey of state-of-the-art memory acquisition techniques that is agnostic towards the used operating system and the hardware architecture.},
author = {Tobias Latzo and Ralph Palutke and F. Freiling},
journal = {Digit. Investig.},
volume = {28},
pages = {56-69},
doi = {10.1016/J.DIIN.2019.01.001},
}

@article{4b33508bb8aebd3e8b8d697e93f3164e801a011c,
title = {Network Connections Information Extraction of 64-Bit Windows 7 Memory Images},
year = {2010},
url = {https://www.semanticscholar.org/paper/4b33508bb8aebd3e8b8d697e93f3164e801a011c},
abstract = {Memory analysis technique is a key element of computer live forensics, and how to get status information of network connections is one of the difficulties of memory analysis and plays an important roles in identifying attack sources. It is more difficult to find the drivers and get network connections information from a 64-bit win7 memory image file than its from a 32-bit operating system memory image file. In a this paper, We will describe the approachs to find drivers and get network connection information from windows 7 memory images. This method is reliable and efficient. It is verified on Windows version 6.1.7600.},
author = {Lianhai Wang and Lijuan Xu and Shuhui Zhang},
doi = {10.1007/978-3-642-23602-0_8},
}

@article{2424aae49b192ddd350f7540dfbfcbc3c3e7db38,
title = {Now You See Me: Hide and Seek in Physical Address Space},
year = {2015},
url = {https://www.semanticscholar.org/paper/2424aae49b192ddd350f7540dfbfcbc3c3e7db38},
abstract = {With the growing complexity of computing systems, memory based forensic techniques are becoming instrumental in digital investigations. Digital forensic examiners can unravel what happened on a system by acquiring and inspecting in-memory data. Meanwhile, attackers have developed numerous anti-forensic mechanisms to defeat existing memory forensic techniques by manipulation of system software such as OS kernel. To counter anti-forensic techniques, some recent researches suggest that memory acquisition process can be trusted if the acquisition module has not been tampered with and all the operations are performed without relying on any untrusted software including the operating system. However, in this paper, we show that it is possible for malware to bypass the current state-of-art trusted memory acquisition module by manipulating the physical address space layout, which is shared between physical memory and I/O devices on x86 platforms. This fundamental design on x86 platform enables an attacker to build an OS agnostic anti-forensic system. Base on this finding, we propose Hidden in I/O Space (HIveS) which manipulates CPU registers to alter such physical address layout. The system uses a novel I/O Shadowing technique to lock a memory region named HIveS memory into I/O address space, so all operation requests to the HIveS memory will be redirected to the I/O bus instead of the memory controller. To access the HIveS memory, the attacker unlocks the memory by mapping it back into the memory address space. Two novel techniques, Blackbox Write and TLB Camouflage, are developed to further protect the unlocked HIveS memory against memory forensics while allowing attackers to access it. A HIveS prototype is built and tested against a set of memory acquisition tools for both Windows and Linux running on x86 platform. Lastly, we propose potential countermeasures to detect and mitigate HIveS.},
author = {N. Zhang and Kun Sun and W. Lou and Yiwei Thomas Hou and S. Jajodia},
journal = {Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security},
volume = {},
pages = {},
doi = {10.1145/2714576.2714600},
}

@article{15f8315e44d4de0152415a295f07e567f240316c,
title = {Styx: Countering robust memory acquisition},
year = {2018},
url = {https://www.semanticscholar.org/paper/15f8315e44d4de0152415a295f07e567f240316c},
abstract = {Abstract Images of main memory are an increasingly important piece of evidence in cybercrime investigations, especially against advanced malware threats, and software tools that dump memory during normal system operation are the most common way to acquire memory images today. Of all proposed methods, Stuttgen and Cohen's robust memory acquistion (as implemented in the pmem tool) can be considered the most advanced technique today. This paper presents Styx, of a proof-of-concept system that perfectly covers its traces against pmem and other tools that perform software-based forensic memory acquisition. Styx is implemented as a loadable kernel module and is able to subvert running 64-bit Linux systems using Intel's VT-x hardware virtualization extension, without requiring the system to reboot. It further uses the second address translation via Intel's EPT to hide behind hidden memory. While exhibiting the limitations of robust memory acquisition, it also shows the potential of undetectable forensic analysis software.},
author = {Ralph Palutke and F. Freiling},
journal = {Digit. Investig.},
volume = {24 Supplement},
pages = {S18-S28},
doi = {10.1016/j.diin.2018.01.004},
}

@article{da9e9968b7dc55c016c127c04e5ce88d568644f7,
title = {Forensic acquisition and analysis of volatile data in memory=Forensische Sicherung und Auswertung flüchtiger Daten im Hauptspeicher},
year = {2013},
url = {https://www.semanticscholar.org/paper/da9e9968b7dc55c016c127c04e5ce88d568644f7},
abstract = {Standard procedures in computer forensics mainly describe the acquisition and analysis of persistent data, e.g., of hard drives or attached devices. However, due to the increasing storage capacity of these media and, correspondingly, significantly larger data volumes, creating forensically-sound duplicates and recovering valuable artifacts in time gets more and more challenging. Moreover, with the wide availability of free and easy-to-use encryption technologies, a growing number of individuals actively try to protect personal information against unauthorized access. If a suspect is unwilling to share the respective decryption key such measures can therefore quickly thwart an investigation. Last but not least, many sophisticated malicious applications entirely run in memory to date and do not leave any traces on hard disks anymore. Solely focusing on traditional sources can thus lead to an incomplete or inaccurate picture of an incident. In order to cope with these issues, researchers have proposed alternative investigative strategies and extracting pieces of evidence from a computer's RAM. For this purpose, a so-called memory snapshot is taken and inspected offline on a trusted workstation. These activities known as memory forensics have gained broad attention among practitioners over the last years, primarily because operations are repeatable and may be safely verified by other experts without polluting the system environment as, for instance, in a live response situation. 
 
In this thesis, we give a comprehensive overview of fundamental concepts and approaches for seizing as well as examining volatile information. It consists of two parts: In the first part, we formalize criteria for sound memory imaging and illustrate the characteristics, benefits, and drawbacks of proven acquisition technologies available on the market to date. As we will see, especially for software-based solutions it is difficult to produce reliable memory snapshots, because the system state cannot be effectively frozen during runtime. With the help of an evaluation platform that we have developed in the course of the dissertation period, the performance and quality of software imagers can be thoroughly assessed for the first time. 
 
In the second part of this thesis, we explain how common system compromise and manipulation techniques as they are typically employed by rootkits or other types of intelligent malware can be discovered during memory analysis. We also present rkfinder, a new plug-in for the popular, open source forensic suite DFF that facilitates some of these tasks. Rkfinder implements cross-viewing algorithms for checking the integrity of a machine and detecting possible inconsistencies that indicate the presence of a threat. By automatically highlighting suspicious resources that are likely to have been tampered with, even less experienced investigators are able to identify system areas that require particular attention. Thereby, potential sources of an intrusion can be quickly found and addressed.},
author = {Stefan Vömel},
}

@article{f377505ebda391e7f0f942e443f33e0c859a8051,
title = {Towards the Virtual Memory Space Reconstruction for Windows Live Forensic Purposes},
year = {2008},
url = {https://www.semanticscholar.org/paper/f377505ebda391e7f0f942e443f33e0c859a8051},
abstract = {The aim of this paper is to demonstrate the usefulness of the pagefile in a live forensic context. The forensic science is striving to find new methodologies to analyze the massive quantity of data normally present in a medium-sized workstation, which can have up to several terabytes of storage devices. As a result, the live forensic approach seems to be the only one which can guarantee promptness in obtaining evidential data to be used in the investigative process. The current approach of volatile forensic analysis does not consider the pagefile as an important element to be used in the analysis. Therefore, we have developed a solution which permits to correlate evidential data within the pagefile to the relative process located in the RAM dump. This work can be considered a natural extension of our previous work on this topic.},
author = {A. Savoldi and P. Gubian},
journal = {2008 Third International Workshop on Systematic Approaches to Digital Forensic Engineering},
volume = {},
pages = {15-22},
doi = {10.1109/SADFE.2008.21},
}
