@article{9c32818c03d210c9763a0c2abfda09f77321fb09,
title = {Protecting Browsers from Extension Vulnerabilities},
year = {2010},
url = {https://www.semanticscholar.org/paper/9c32818c03d210c9763a0c2abfda09f77321fb09},
abstract = {Browser extensions are remarkably popular, with one in three Firefox users running at least one extension. Although well-intentioned, extension developers are often not security experts and write buggy code that can be exploited by malicious web site operators. In the Firefox extension system, these exploits are dangerous because extensions run with the user’s full privileges and can read and write arbitrary files and launch new processes. In this paper, we analyze 25 popular Firefox extensions and find that 88% of these extensions need less than the full set of available privileges. Additionally, we find that 76% of these extensions use unnecessarily powerful APIs, making it difficult to reduce their privileges. We propose a new browser extension system that improves security by using least privilege, privilege separation, and strong isolation. Our system limits the misdeeds an attacker can perform through an extension vulnerability. Our design has been adopted as the Google Chrome extension system.},
author = {A. Barth and A. Felt and P. Saxena and A. Boodman},
}

@article{a4ebb757ea215851146b7a4f78b79278f6d42b33,
title = {VEX: Vetting Browser Extensions for Security Vulnerabilities},
year = {2010},
url = {https://www.semanticscholar.org/paper/a4ebb757ea215851146b7a4f78b79278f6d42b33},
abstract = {The browser has become the de facto platform for everyday computation. Among the many potential attacks that target or exploit browsers, vulnerabilities in browser extensions have received relatively little attention. Currently, extensions are vetted by manual inspection, which does not scale well and is subject to human error. 
 
In this paper, we present VEX, a framework for highlighting potential security vulnerabilities in browser extensions by applying static information-flow analysis to the JavaScript code used to implement extensions. We describe several patterns of flows as well as unsafe programming practices that may lead to privilege escalations in Firefox extensions. VEX analyzes Firefox extensions for such flow patterns using high-precision, context-sensitive, flow-sensitive static analysis. We analyze thousands of browser extensions, and VEX finds six exploitable vulnerabilities, three of which were previously unknown. VEX also finds hundreds of examples of bad programming practices that may lead to security vulnerabilities. We show that compared to current Mozilla extension review tools, VEX greatly reduces the human burden for manually vetting extensions when looking for key types of dangerous flows.},
author = {Sruthi Bandhakavi and Samuel T. King and P. Madhusudan and M. Winslett},
}

@article{23635419a19a5ad1b317ed6ef0fba8f4e892167b,
title = {Enhancing web browser security against malware extensions},
year = {2008},
url = {https://www.semanticscholar.org/paper/23635419a19a5ad1b317ed6ef0fba8f4e892167b},
abstract = {In this paper we examine security issues of functionality extension mechanisms supported by web browsers. Extensions (or “plug-ins”) in modern web browsers enjoy unrestrained access at all times and thus are attractive vectors for malware. To solidify the claim, we take on the role of malware writers looking to assume control of a user’s browser space. We have taken advantage of the lack of security mechanisms for browser extensions and implemented a malware application for the popular Firefox web browser, which we call browserSpy, that requires no special privileges to be installed. browserSpy takes complete control of the user’s browser space, can observe all activity performed through the browser and is undetectable. We then adopt the role of defenders to discuss defense strategies against such malware. Our primary contribution is a mechanism that uses code integrity checking techniques to control the extension installation and loading process. We describe two implementations of this mechanism: a drop-in solution that employs JavaScript and a faster, in-browser solution that makes uses of the browser’s native cryptography implementation. We also discuss techniques for runtime monitoring of extension behavior to provide a foundation for defending threats posed by installed extensions.},
author = {M. Louw and Jin Soon Lim and V. Venkatakrishnan},
journal = {Journal in Computer Virology},
volume = {4},
pages = {179-195},
doi = {10.1007/s11416-007-0078-5},
}

@article{fde1a4806a8cfef90f1cc913156a13de81063f62,
title = {Chrome Extensions: Threat Analysis and Countermeasures},
year = {2012},
url = {https://www.semanticscholar.org/paper/fde1a4806a8cfef90f1cc913156a13de81063f62},
abstract = {The widely popular browser extensions now become one of the most commonly used malware attack vectors. The Google Chrome browser, which implements the principles of least privileges and privilege separation by design, offers a strong security mechanism to protect malicious websites from damaging the whole browser system via extensions. In this study, we however reveal that Chrome’s extension security model is not a panacea for all possible attacks with browser extensions. Through a series of practical bot-based attacks that can be performed even under typical settings, we demonstrate that malicious Chrome extensions pose serious threats, including both information dispersion and harvesting, to browsers. We further conduct an in-depth analysis of Chrome’s extension security model, and conclude that its vulnerabilities are rooted from the violation of the principles of least privileges and privilege separation. Following these principles, we propose a set of countermeasures that enforce the policies of microprivilege management and differentiating DOM elements. Using a prototype developed on the latest Chrome browser, we show that they can effectively mitigate the threats posed by malicious Chrome extensions with little effect on normal browsing experience.},
author = {Lei Liu and Xinwen Zhang and Guanhua Yan and Songqing Chen},
}

@article{abf406857d28b65bcfffc17da42d22ee95f9fd1a,
title = {Vetting browser extensions for security vulnerabilities with VEX},
year = {2011},
url = {https://www.semanticscholar.org/paper/abf406857d28b65bcfffc17da42d22ee95f9fd1a},
abstract = {The browser has become the de facto platform for everyday computation and a popular target for attackers of computer systems. Among the many potential attacks that target or exploit browsers, vulnerabilities in browser extensions have received relatively little attention. Currently, extensions are vetted by manual inspection, which is time consuming and subject to human error. In this paper, we present VEX, a framework for applying static information flow analysis to JavaScript code to identify security vulnerabilities in browser extensions. We describe several patterns of flows that can lead to privilege escalations in Firefox extensions. VEX analyzes Firefox extensions for such flow patterns using high-precision, context-sensitive, flow-sensitive static analysis. We subject 2460 browser extensions to the analysis, and VEX finds 5 of the 18 previously known vulnerabilities and 7 previously unknown vulnerabilities.},
author = {Sruthi Bandhakavi and Nandit Tiku and Wyatt Pittman and Samuel T. King and P. Madhusudan and M. Winslett},
journal = {Communications of the ACM},
volume = {54},
pages = {91 - 99},
doi = {10.1145/1995376.1995398},
}

@article{19d74776ad8065eb8967347b9eab408a944798d6,
title = {Verified Security for Browser Extensions},
year = {2011},
url = {https://www.semanticscholar.org/paper/19d74776ad8065eb8967347b9eab408a944798d6},
abstract = {Popup blocking, form filling, and many other features of modern web browsers were first introduced as third-party extensions. New extensions continue to enrich browsers in unanticipated ways. However, powerful extensions require capabilities, such as cross-domain network access and local storage, which, if used improperly, pose a security risk. Several browsers try to limit extension capabilities, but an empirical survey we conducted shows that many extensions are over-privileged under existing mechanisms. This paper presents \ibex, a new framework for authoring, analyzing, verifying, and deploying secure browser extensions. Our approach is based on using type-safe, high-level languages to program extensions against an API providing access to a variety of browser features. We propose using Data log to specify fine-grained access control and dataflow policies to limit the ways in which an extension can use this API, thus restricting its privilege over security-sensitive web content and browser resources. We formalize the semantics of policies in terms of a safety property on the execution of extensions and develop a verification methodology that allows us to statically check extensions for policy compliance. Additionally, we provide visualization tools to assist with policy analysis, and compilers to translate extension source code to either. NET byte code or JavaScript, facilitating cross-browser deployment of extensions. We evaluate our work by implementing and verifying~\NumExt extensions with a diverse set of features and security policies. We deploy our extensions in Internet Explorer, Chrome, Fire fox, and a new experimental HTML5 platform called C3. In so doing, we demonstrate the versatility and effectiveness of our approach.},
author = {Arjun Guha and Matt Fredrikson and B. Livshits and N. Swamy},
journal = {2011 IEEE Symposium on Security and Privacy},
volume = {},
pages = {115-130},
doi = {10.1109/SP.2011.36},
}

@article{5045391bf0dd8868f1f96520f24ef47593697c30,
title = {Analyzing Information Flow in JavaScript-Based Browser Extensions},
year = {2009},
url = {https://www.semanticscholar.org/paper/5045391bf0dd8868f1f96520f24ef47593697c30},
abstract = {JavaScript-based browser extensions (JSEs) enhance the core functionality of web browsers by improving their look and feel, and are widely available for commodity browsers. To enable a rich set of functionalities, browsers typically execute JSEs with elevated privileges. For example, unlike JavaScript code in a web application, code in a JSE is not constrained by the same-origin policy. Malicious JSEs can misuse these privileges to compromise confidentiality and integrity, e.g., by stealing sensitive information, such as cookies and saved passwords, or executing arbitrary code on the host system. Even if a JSE is not overtly malicious, vulnerabilities in the JSE and the browser may allow a remote attacker to compromise browser security. We present Sabre (Security Architecture for Browser Extensions), a system that uses in-browser information-flow tracking to analyze JSEs. Sabre associates a label with each in-memory JavaScript object in the browser, which determines whether the object contains sensitive information. Sabre propagates labels as objects are modified by the JSE and passed between browser subsystems. Sabre raises an alert if an object containing sensitive information is accessed in an unsafe way, e.g., if a JSE attempts to send the object over the network or write it to a file. We implemented Sabre by modifying the Firefox browser and evaluated it using both malicious JSEs as well as benign ones that contained exploitable vulnerabilities. Our experiments show that Sabre can precisely identify potential information flow violations by JSEs.},
author = {Mohan Dhawan and V. Ganapathy},
journal = {2009 Annual Computer Security Applications Conference},
volume = {},
pages = {382-391},
doi = {10.1109/ACSAC.2009.43},
}

@article{5d9b6da578552b50b572d365cd2a837cc1305fc5,
title = {Extensible Web Browser Security},
year = {2007},
url = {https://www.semanticscholar.org/paper/5d9b6da578552b50b572d365cd2a837cc1305fc5},
abstract = {In this paper we examine the security issues in functionality extension mechanisms supported by web browsers. Extensions (or "plug-ins") in modern web browsers enjoy unlimited power without restraint and thus are attractive vectors for malware. To solidify the claim, we take on the role of malware writers looking to assume control of a user's browser space. We have taken advantage of the lack of security mechanisms for browser extensions and have implemented a piece of malware for the popular Firefox web browser, which we call browserSpy , that requires no special privileges to be installed. Once installed, browserSpy takes complete control of a user's browser space and can observe all the activity performed through the browser while being undetectable. We then adopt the role of defenders to discuss defense strategies against such malware. Our primary contribution is a mechanism that uses code integrity checking techniques to control the extension installation and loading process. We also discuss techniques for runtime monitoring of extension behavior that provide a foundation for defending threats due to installed extensions.},
author = {M. Louw and Jin Soon Lim and V. Venkatakrishnan},
doi = {10.1007/978-3-540-73614-1_1},
}

@article{1a2630e41f1519b701c799a1907f441e85496c62,
title = {Securing Script-Based Extensibility in Web Browsers},
year = {2010},
url = {https://www.semanticscholar.org/paper/1a2630e41f1519b701c799a1907f441e85496c62},
abstract = {Web browsers are increasingly designed to be extensible to keep up with the Web's rapid pace of change. This extensibility is typically implemented using script-based extensions. Script extensions have access to sensitive browser APIs and content from untrusted web pages. Unfortunately, this powerful combination creates the threat of privilege escalation attacks that grant web page scripts the full privileges of extensions and control over the entire browser process. 
 
This paper makes two contributions. First, it describes the pitfalls of script-based extensibility based on our study of the Firefox web browser. We find that script-based extensions can lead to arbitrary code injection and execution control, the same types of vulnerabilities found in unsafe code. Second, we propose a taint-based system to track the spread of untrusted data in the browser and to detect the characteristic signatures of privilege escalation attacks. We evaluate this approach by using exploits from the Firefox bug database and show that our system detects the vast majority of attacks with almost no false alarms.},
author = {Vladimir Djerić and A. Goel},
}

@article{470c5dfa56ef0e5623b5902f589c3a0c3f0eef5c,
title = {An Evaluation of the Google Chrome Extension Security Architecture},
year = {2012},
url = {https://www.semanticscholar.org/paper/470c5dfa56ef0e5623b5902f589c3a0c3f0eef5c},
abstract = {Vulnerabilities in browser extensions put users at risk by providing a way for website and network attackers to gain access to users' private data and credentials. Extensions can also introduce vulnerabilities into the websites that they modify. In 2009, Google Chrome introduced a new extension platform with several features intended to prevent and mitigate extension vulnerabilities: strong isolation between websites and extensions, privilege separation within an extension, and an extension permission system. We performed a security review of 100 Chrome extensions and found 70 vulnerabilities across 40 extensions. Given these vulnerabilities, we evaluate how well each of the security mechanisms defends against extension vulnerabilities. We find that the mechanisms mostly succeed at preventing direct web attacks on extensions, but new security mechanisms are needed to protect users from network attacks on extensions, website metadata attacks on extensions, and vulnerabilities that extensions add to websites. We propose and evaluate additional defenses, and we conclude that banning HTTP scripts and inline scripts would prevent 47 of the 50 most severe vulnerabilities with only modest impact on developers.},
author = {Nicholas Carlini and A. Felt and D. Wagner},
}
