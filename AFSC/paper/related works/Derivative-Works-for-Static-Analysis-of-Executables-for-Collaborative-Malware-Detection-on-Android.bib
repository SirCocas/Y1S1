@article{b20ed8fe63f66c25b6173efb6cf95c940b2c84a8,
title = {Efficient Permission-Aware Analysis of Android Apps},
year = {2017},
url = {https://semanticscholar.org/paper/b20ed8fe63f66c25b6173efb6cf95c940b2c84a8},
abstract = {Author(s): Sadeghi, Alireza | Advisor(s): Malek, Sam | Abstract: Permissions are the cornerstone for Android security model, as they enable secure access to sensitive resources of the phone. Consequently, improper use of Android permission model can lead to permission-induced issues that disrupt the functional and nonfunctional behavior of the apps. However, due to the lack of automated tools for detecting such issues, many of those defects are shipped with the final product, which not only dissatisfies end users but also poses security risks to their phones. This dissertation proposes and describes a set of automated tools, namely Covert, Separ, Terminator, and PATDroid, to detect and prevent permission-induced issues in Android apps, specifically (I) permission-induced security attacks, and (II) permission-induced compatibility defects.Through combining static analysis with formal methods, Covert and Separ provide compositional analysis and enforcement techniques, respectively, for detection and prevention of permission-induced security attacks, particularly those that occur due to the interaction of multiple apps. However, by ignoring the temporal aspects of an attack, Covert and Separ, as well as the other techniques aimed at protecting the users against permission-induced attacks, are prone to have low-coverage in detection and high-disruption in prevention of such attacks. Terminator addresses this shortcoming by incorporating the notion of time in both detection and prevention of the attacks. Terminator leverages temporal logic model checking to detect permission-induced threats, and then relies on Android’s dynamic permission mechanism to thwart the identified threats by revoking unsafe permissions. However, such countermeasure, i.e., permission revocation, could itself result in other defects, such as crash, if the target app suffers from dynamic-permission-compatibility issue. To identify such permission-induced compatibility defects, developers need to exhaustively re-execute tests for all possible permission combinations, thereby increasing the time and resources required to test apps. PATDroid, the last proposed approach in this dissertation, is intended to help app developers with this challenge. PATDroid can significantly reduce the testing effort by performing a hybrid program analysis that determines which tests should be executed on what permission combinations. All conducted experiments corroborate the effectiveness and efficiency of Covert, Separ, Terminator, and PATDroid and their ability to identify and eliminate the defects rooted in permission misuse of Android apps.},
author = {Alireza Sadeghi},
}

@article{a54e5957b5f27f15cfc4967a33f92decbff31e0b,
title = {A Taxonomy and Qualitative Comparison of Program Analysis Techniques for Security Assessment of Android Software},
year = {2017},
url = {https://semanticscholar.org/paper/a54e5957b5f27f15cfc4967a33f92decbff31e0b},
abstract = {In parallel with the meteoric rise of mobile software, we are witnessing an alarming escalation in the number and sophistication of the security threats targeted at mobile platforms, particularly Android, as the dominant platform. While existing research has made significant progress towards detection and mitigation of Android security, gaps and challenges remain. This paper contributes a comprehensive taxonomy to classify and characterize the state-of-the-art research in this area. We have carefully followed the systematic literature review process, and analyzed the results of more than 300 research papers, resulting in the most comprehensive and elaborate investigation of the literature in this area of research. The systematic analysis of the research literature has revealed patterns, trends, and gaps in the existing literature, and underlined key challenges and opportunities that will shape the focus of future research efforts.},
author = {Alireza Sadeghi and Hamid Bagheri and Jesús E. García and Sam Malek},
}

@article{30c7daed94dcf51c33624c2f9d4f9d4175f555a6,
title = {The Evolution of Android Malware and Android Analysis Techniques},
year = {2017},
url = {https://semanticscholar.org/paper/30c7daed94dcf51c33624c2f9d4f9d4175f555a6},
abstract = {With the integration of mobile devices into daily life, smartphones are privy to increasing amounts of sensitive information. Sophisticated mobile malware, particularly Android malware, acquire or utilize such data without user consent. It is therefore essential to devise effective techniques to analyze and detect these threats. This article presents a comprehensive survey on leading Android malware analysis and detection techniques, and their effectiveness against evolving malware. This article categorizes systems by methodology and date to evaluate progression and weaknesses. This article also discusses evaluations of industry solutions, malware statistics, and malware evasion techniques and concludes by supporting future research paths.},
author = {Kimberly Tam and Ali Feizollah and Nor Badrul Anuar and Rosli Salleh and Lorenzo Cavallaro},
}

@article{d1693e9d7101c170eb67ad732e6b9bd7525d0c4b,
title = {Analysis and classification of Android malware},
year = {2016},
url = {https://semanticscholar.org/paper/d1693e9d7101c170eb67ad732e6b9bd7525d0c4b},
abstract = {"With the integration of mobile devices into our daily lives, smartphones are privy to increasing amounts of sensitive information. As of 2016, Android is the leading smartphone in popularity with sophisticated mobile malware targeting its data and services. Thus this thesis attempts to determine how accurate and scalable Android malware analysis and classification methods can be developed to robustly withstand frequent, and substantial, changes within the Android device and in the Android malware ecosystem.},
author = {Kimberly Tam},
}

@article{5f41c797f3006bca6b045f47a73f8e22c31208e4,
title = {A framework for detection of malicious software in Android handheld systems using machine learning techniques},
year = {2015},
url = {https://semanticscholar.org/paper/5f41c797f3006bca6b045f47a73f8e22c31208e4},
abstract = {Nowadays the Android platform is the fastest growing handheld operating system. As such, it has become the most coveted and viable target of malicious applications. The present study aims at designing and developing new approaches to detect malicious applications in Android-based devices. More precisely, MaLDroide (Machine Learning–based Detector for Android malware), a framework for detection of Android malware based on Machine Learning techniques, is introduced here. It is devised to identify malicious applications. To start with, features of real–world known-benign and known–malicious applications are extracted, gathering 299 features grouped into 8 categories: stats, requested permissions, used permission, API calls, Intents, risks, system calls, and content access. MaLDroide uses static analysis in order to automatically extract these features. As an essential part of the work, a mechanism for dimensionality reduction, using Principal Component Analysis (PCA), was applied, the original 299 features are reduced to 27, retaining 90% of the variance, and dramatically reducing time and space consumption. Once determined the appropriate data set, a training process of the seven most widely used Machine Learning algorithms (Naı̈ve Bayes, Decision Tree, Random Forest, k-Nearest Neighbor, Support Vector Machine, Multi-Layer Perceptron, and AdaBoost) is undertaken. After an evaluation process with 436 normal applications and 2295 malware samples, and on the basis of the evaluation results, one can conclude that Support Vector Machine classifier produces the most accurate predictions, and identifies malware with an accuracy of 99.8%. The evaluation also shows that our framework constitutes a valuable tool which is effective in detecting malware for Android devices.},
author = {Blas Torregrosa García},
}

@article{325b24023940e8f5b268b63d958772336b65aa83,
title = {Evolution, Detection and Analysis of Malware for Smart Devices},
year = {2014},
url = {https://semanticscholar.org/paper/325b24023940e8f5b268b63d958772336b65aa83},
abstract = {Smart devices equipped with powerful sensing, computing and networking capabilities have proliferated lately, ranging from popular smartphones and tablets to Internet appliances, smart TVs, and others that will soon appear (e.g., watches, glasses, and clothes). One key feature of such devices is their ability to incorporate third-party apps from a variety of markets. This poses strong security and privacy issues to users and infrastructure operators, particularly through software of malicious (or dubious) nature that can easily get access to the services provided by the device and collect sensory data and personal information. Malware in current smart devices -mostly smartphones and tablets- have rocketed in the last few years, in some cases supported by sophisticated techniques purposely designed to overcome security architectures currently in use by such devices. Even though important advances have been made on malware detection in traditional personal computers during the last decades, adopting and adapting those techniques to smart devices is a challenging problem. For example, power consumption is one major constraint that makes unaffordable to run traditional detection engines on the device, while externalized (i.e., cloud-based) techniques rise many privacy concerns. This article examines the problem of malware in smart devices and recent progress made in detection techniques. We first present a detailed analysis on how malware has evolved over the last years for the most popular platforms. We identify exhibited behaviors, pursued goals, infection and distribution strategies, etc. and provide numerous examples through case studies of the most relevant specimens. We next survey, classify and discuss efforts made on detecting both malware and other suspicious software (grayware), concentrating on the 20 most relevant techniques proposed between 2010 and 2013. Based on the conclusions extracted from this study, we finally provide constructive discussion on open research problems and areas where we believe that more work is needed.},
author = {Guillermo Suarez-Tangil and Juan E. Tapiador and Pedro Peris-Lopez and Arturo Ribagorda},
}

@article{e452248e14963da24d32ec70a4f0d5fed4a16885,
title = {A malware analysis and detection system for mobile devices / Ali Feizollah},
year = {2017},
url = {https://semanticscholar.org/paper/e452248e14963da24d32ec70a4f0d5fed4a16885},
abstract = {Smartphones, tablets, and other mobile devices have quickly become ubiquitous due to their highly personal and powerful attributes. Android has been the most popular mobile operating system. Such popularity, however, also extends to attackers. The amount of Android malware has risen steeply during the last few years, making it the most targeted mobile operating system. Although there have been important advances made on malware analysis and detection in traditional PCs during recent decades, adopting and adapting those methods to mobile devices poses a considerable challenge. Power consumption is one major constraint that makes traditional detection methods impractical for mobile devices, while cloud-based techniques raise many privacy concerns. This study examines the problem of Android malware, and aims to develop and implement new approaches to help users confront such threats more effectively, considering the limitations of these devices. First, we present a comprehensive analysis on the development of mobile malware, specifically Android, over recent years, as well as the most useful and salient analysis and detection methods for Android malware. We also discuss a compilation of available tools for Android malware analysis. Secondly, we propose a number of new and distinctive Android malware analysis and detection methods. More specifically, we introduce AndroDialysis, which is a static analysis method. Recent research has focused on analysing Android Intent in the XML file. We propose a new method of analysing Android Intent in Java code, which includes implicit intent and explicit intent. We used a Drebin data sample, which is a collection of 5,560 applications, as well as clean data sample containing 1,846 applications. The results show a detection rate of 91% using Android Intent against 83% using Android permission. We also introduce a dynamic analysis method, AndroPsychology, in order to analyse the network communications of Android applications. We extracted 30 different features from network traffic. We then used feature selection algorithms and deep learning algorithms to build a detection model. The results show that network traffic is an appropriate candidate for Android malware detection. Finally, we assembled AndroDialysis and AndroPsychology in order to build a comprehensive analysis and detection system for Android, called DroidProtect. Unlike current systems that either perform analyses on the device or send the whole application to a server for analyses, our system has the distinction of extracting features on the device and analysing them on the Google App Engine servers using an offloading technique. Our extensive experiments show that the energy consumption of the proposed system is less than currently available systems.},
author = {Feizollah Ali},
}

@article{2dd06097c9b30d70ace669ead8bd611aa32ec035,
title = {A security framework for mobile health applications on android platform / Muzammil Hussain},
year = {2017},
url = {https://semanticscholar.org/paper/2dd06097c9b30d70ace669ead8bd611aa32ec035},
abstract = {The advent of smartphones dramatically changed the way of communication, computation, and the model of many services, including healthcare delivery. The adoption of smartphones in the healthcare system is rapidly growing, and enormous number of apps are being developed to monitor patient health, access patient records, test results, prescribe medications, and for numerous related purposes under the collective term of mobile Health (mHealth). These apps are readily accessible to the average user of mobile devices, and despite the potential of mHealth apps to improve the availability, affordability and effectiveness of delivering healthcare services, they handle sensitive medical data, and as such, have also the potential to carry substantial risks to the security and privacy of their users. Developers of apps are usually unknown, and users are unaware of how their data are being managed and used. This is combined with the emergence of new threats due to the deficiency in mobile apps development or the design ambiguities of the current mobile operating systems. A number of mobile operating systems are available in the market, but the Android platform has gained the topmost popularity. However, Android security model is short of completely ensuring the privacy and security of users’ data, including the data of mHealth apps. Despite the security mechanisms provided by Android such as permissions and sandboxing, mHealth apps are still plagued by serious privacy and security issues. These security issues need to be addressed in order to improve the acceptance of mHealth apps among users and the efficacy of mHealth apps in the healthcare system. The focus of this research is on the security of mHealth apps, and the main objective is to propose a coherent, practical and efficient framework to improve the security of medical data associated with Android mHealth apps, as well as to protect the privacy of their users. The proposed framework provides its intended protection mainly through a set of security checks and policies that ensure protection against traditional as well as recently published threats to mHealth apps. The design of the framework comprises two layers: a Security Module Layer (SML) that implements the security-check modules, and a System Interface Layer (SIL) that interfaces SML to the Android OS. SML enforces security and privacy policies at different levels of Android platform through SIL. The proposed framework is validated via a prototypic implementation on actual Android devices to show its practicality and evaluate its performance. The framework is evaluated in terms of effectiveness and efficiency. Effectiveness is evaluated by demonstrating the performance of the framework against a selected set of attacks, while efficiency is evaluated by comparing the performance overhead in terms of energy consumption, memory and CPU utilization, with the performance of a mainline, stock version of Android. Results of the experimental evaluations showed that the proposed framework can successfully protect mHealth apps against a wide range of attacks with negligible overhead, so it is both effective and practical. Furthermore, this framework is available to other researchers for research purposes as well as for real-world deployments.},
author = {Hussain Muzammil},
}

@article{bf4d231f2f96de38cdeb377146d78fa06a28a489,
title = {Security and privacy of users' personal Information on smartphones},
year = {2014},
url = {https://semanticscholar.org/paper/bf4d231f2f96de38cdeb377146d78fa06a28a489},
abstract = {This research investigated the proliferation of malicious applications on smartphones and a framework that can efficiently detect and classify such applications based on behavioural patterns was proposed. Additionally the causes and impact of unauthorised disclosure of personal information by clean applications were examined and countermeasures to protect smartphone users’ privacy were proposed.},
author = {Veelasha Moonsamy},
}

@article{e1e37b4d798848298a80c55784db95519caecb8e,
title = {Man-machine partial program analysis for malware detection},
year = {2015},
url = {https://semanticscholar.org/paper/e1e37b4d798848298a80c55784db95519caecb8e},
abstract = {With the meteoric rise in popularity of the Android platform, there is an urgent need to combat the accompanying proliferation of malware. Existing work addresses the area of consumer malware detection, but cannot detect novel, sophisticated, domain-speci c malware that is targeted speci cally at one aspect of an organization (eg. ground operations of the US Military). Adversaries can exploit domain knowledge to camo auge malice within the legitimate behaviors of an app and behind a domain-speci c trigger, rendering traditional approaches such as signature-matching, machine learning, and dynamic monitoring ine ective. Manual code inspections are also inadequate, scaling poorly and introducing human error. Yet, there is a dire need to detect this kind of malware before it causes catastrophic loss of life and property. This dissertation presents the Security Toolbox, our novel solution for this challenging new problem posed by DARPA's Automated Program Analysis for Cybersecurity (APAC) program. We employ a human-in-the-loop approach to amplify the natural intelligence of our analysts. Our automation detects interesting program behaviors and exposes them in an analysis Dashboard, allowing the analyst to brainstorm aw hypotheses and ask new questions, which in turn can be answered by our automated analysis primitives. The Security Toolbox is built on top of Atlas, a novel program analysis platform made by EnSoft. Atlas uses a graphbased mathematical abstraction of software to produce a uni ed property multigraph, exposes a powerful API for writing analyzers using graph traversals, and provides both automated and interactive capabilities to facilitate program comprehension. The Security Toolbox is also powered by FlowMiner, a novel solution to mine ne-grained, compact data ow summaries of Java libraries. FlowMiner allows the Security Toolbox to complete a scalable and accurate partial program analysis of an application without including all of the libraries that it uses (eg. Android).},
author = {Thomas Norman Deering},
}
