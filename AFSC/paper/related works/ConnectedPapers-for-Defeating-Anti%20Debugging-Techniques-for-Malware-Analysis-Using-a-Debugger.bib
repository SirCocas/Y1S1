@article{0a49f7dc2733b16d05a1eb068b47051990d6d054,
title = {Defeating Anti-Debugging Techniques for Malware Analysis Using a Debugger},
year = {2020},
url = {https://www.semanticscholar.org/paper/0a49f7dc2733b16d05a1eb068b47051990d6d054},
abstract = {Article history: Received: 31 August, 2020 Accepted: 25 November, 2020 Online: 14 December, 2020 Cyberattacks such as spear phishing and malspam pretending to be companies, institutes, and government officials are increasing and evolving. Malware has a variety of purposes, such as collecting personal information and illegal access to the system. New types of malware are increasing every day, and many malware programs spread all over the Internet, causing severe problems. To analyze such malware effectively, analysts first need to understand the inner structure of the malware. They can try to analyze malware manually and automatically. However, attackers who create malware use many different kinds of techniques, such as antireverse engineering, to hinder and delay analysis. They also extend malware life through a combination of different techniques, such as social engineering and anti-debugging. These techniques make the malware more sophisticated; thus, it is hard for an analyst to detect the malware. Anti-debugging, one way to protect malware, is a deadly poison to malware analysts because it makes the analysis more difficult by detecting a debugger or debugging environments. Therefore, this paper describes malware’s anti-debugging techniques and how to defeat them through anti-anti-debugging mechanisms. It applies its findings to analyze a sample program, packed files, and actual malware with anti-debugging modules and performs various experiments to verify the proposed techniques. After the experiments, it confirms whether its countermeasure is useful for malware analysis.},
author = {Jong-Wouk Kim and Jiwon Bang and Mi-Jung Choi},
doi = {10.25046/aj0506142},
}

@article{a32cc16a0f6077907a27bba0c1def7df64de66f5,
title = {Handling Anti-Virtual Machine Techniques in Malicious Software},
year = {2017},
url = {https://semanticscholar.org/paper/a32cc16a0f6077907a27bba0c1def7df64de66f5},
abstract = {Malware analysis relies heavily on the use of virtual machines (VMs) for functionality and safety. There are subtle differences in operation between virtual and physical machines. Contemporary malware checks for these differences and changes its behavior when it detects a VM presence. These anti-VM techniques hinder malware analysis. Existing research approaches to uncover differences between VMs and physical machines use randomized testing, and thus cannot guarantee completeness.
 In this article, we propose a detect-and-hide approach, which systematically addresses anti-VM techniques in malware. First, we propose cardinal pill testing—a modification of red pill testing that aims to enumerate the differences between a given VM and a physical machine through carefully designed tests. Cardinal pill testing finds five times more pills by running 15 times fewer tests than red pill testing. We examine the causes of pills and find that, while the majority of them stem from the failure of VMs to follow CPU specifications, a small number stem from under-specification of certain instructions by the Intel manual. This leads to divergent implementations in different CPU and VM architectures. Cardinal pill testing successfully enumerates the differences that stem from the first cause. Finally, we propose VM Cloak—a WinDbg plug-in which hides the presence of VMs from malware. VM Cloak monitors each execute malware command, detects potential pills, and at runtime modifies the command’s outcomes to match those that a physical machine would generate. We implemented VM Cloak and verified that it successfully hides VM presence from malware.},
author = {Hao  Shi and Jelena  Mirkovic and Abdulla  Alwabel},
journal = {ACM Trans. Priv. Secur.},
volume = {21},
pages = {2:1-2:31},
doi = {10.1145/3139292},
}

@article{403a5d7bc2b08258cb1453fa0fd8225dab741851,
title = {A Static Instrumentation Method for ELF Binary},
year = {2019},
url = {https://www.semanticscholar.org/paper/403a5d7bc2b08258cb1453fa0fd8225dab741851},
abstract = {Binary instrumentation is a process of inserting other code into an executable to observe or modify the binary execution. However, current instrumentation tools depend on platform strongly and the execution efficiency is low, which make it difficult to be used in embedded devices. In this paper, we propose a static instrumentation method using the trampoline technology to perform the binary instrumentation on the Linux OS, which can support CISC and RISC instruction sets. The experiment showed that the file size and execution time of the binary are less affected after instrumentation by comparing with other dynamic and static instrumentation tools.},
author = {Wenchuan Yang and Yifei Wang and Baojiang Cui and Chen Chen},
doi = {10.1007/978-3-030-22263-5_38},
}

@article{c86e531169a80bbf3f9f93fce8de218c6b16ba1b,
title = {Disabling Anti-Debugging Techniques for Unpacking System in User-level Debugger},
year = {2019},
url = {https://www.semanticscholar.org/paper/c86e531169a80bbf3f9f93fce8de218c6b16ba1b},
abstract = {E-mail attacks and spear phishing attacks, which have been pretended as corporations and civil servants, are occurring frequently. Phishing is used to steal user’s personal or financial information by redirecting users to web-sites hosted with malicious code. Malware is becoming more and more intelligent as it combines with social engineering techniques, causing damage to companies, organization, or users through e-mail or web sites. Attackers who create malware use a variety of techniques, such as disrupting and delaying analysis to increase malware’s life time. Anti-debugging techniques interferes with malware analysis and make it more difficult to analysis. We introduce five functions and one data structure that malware uses for anti-debugging techniques. We propose and verify a method for disabling anti-debugging techniques for such malware which have been protected by packing and anti-debugging techniques in user level debugger. This can be expected to make it easier for malware analysts to analyze malware that includes anti-debugging techniques.},
author = {Jong-Wouk Kim and Jiwon Bang and Yang-Sae Moon and Mi-Jung Choi},
journal = {2019 International Conference on Information and Communication Technology Convergence (ICTC)},
volume = {},
pages = {954-959},
doi = {10.1109/ictc46691.2019.8939719},
}

@article{814a52b451872facdeec69f253a4b87c6fcf3b32,
title = {Mac-A-Mal: macOS malware analysis framework resistant to anti evasion techniques},
year = {2019},
url = {https://www.semanticscholar.org/paper/814a52b451872facdeec69f253a4b87c6fcf3b32},
abstract = {With macOS increasing popularity, the number, and variety of macOS malware are rising as well. Yet, very few tools exist for dynamic analysis of macOS malware. In this paper, we propose a macOS malware analysis framework called Mac-A-Mal. We develop a kernel extension to monitor malware behavior and mitigate several anti-evasion techniques used in the wild. Our framework exploits the macOS features of XPC service invocation that typically escape traditional mechanisms for detection of children processes. Performance benchmarks show that our system is comparable with professional tools and able to withstand VM detection. By using Mac-A-Mal, we discovered 71 unknown adware samples (8 of them using valid distribution certificates), 2 keyloggers, and 1 previously unseen trojan involved in the APT32 OceanLotus.},
author = {Duy-Phuc Pham and Duc-Ly Vu and F. Massacci},
journal = {Journal of Computer Virology and Hacking Techniques},
volume = {},
pages = {1-9},
doi = {10.1007/s11416-019-00335-w},
}

@article{8b02ded0a5f25632e6c99880dcdc1d782d287c50,
title = {UBER: Combating Sandbox Evasion via User Behavior Emulators},
year = {2019},
url = {https://www.semanticscholar.org/paper/8b02ded0a5f25632e6c99880dcdc1d782d287c50},
abstract = {Sandbox-enabled dynamic malware analysis has been widely used by cyber security teams to handle the threat of malware. Correspondingly, malware authors have developed various anti-sandbox techniques to evade the analysis. Most of those evasion techniques are well studied and can be defeated with appropriate mitigation strategies. However, one particular technique is usually overlooked and can be extremely effective in defeating sandbox-based malware analysis, i.e., usage artifacts analysis. This technique leverages a variety of system artifacts that are expected to exist in a real system as a result of typical user activities for sandbox environment identification. To tackle this drawback of lacking authentic system artifacts in existing sandbox designs, in this paper we propose a novel system UBER for automatic artifact generation based on the emulation of real user behavior. Instead of cloning real usage artifacts or directly simulating user behaviors, UBER generalizes the user’s computer usage pattern with an abstract behavior profile, employs the profile to guide the simulation of user actions and the generation of artifacts, and then clones the system with generated artifacts into the sandbox environment. We implement a prototype of UBER and verify the effectiveness of the generated artifacts. The experimental results further demonstrate that UBER can effectively mitigate the system artifacts based sandbox evasion and significantly increase the difficulty for the attacker to distinguish the sandbox from the real user system.},
author = {Pengbin Feng and Jianhua Sun and Songsong Liu and Kun Sun},
doi = {10.1007/978-3-030-41579-2_3},
}

@article{a98a190d5317cfce028831eaf5f5c2a7548bf5a2,
title = {Evasive Malware via Identifier Implanting},
year = {2018},
url = {https://www.semanticscholar.org/paper/a98a190d5317cfce028831eaf5f5c2a7548bf5a2},
abstract = {To cope with the increasing number of malware attacks that organizations face, anti-malware appliances and sandboxes have become an integral security defense. In particular, appliances have become the de facto standard in the fight against targeted attacks. Yet recent incidents have demonstrated that malware can effectively detect and thus evade sandboxes, resulting in an ongoing arms race between sandbox developers and malware authors.},
author = {Rui Tanabe and Wataru Ueno and Kou Ishii and K. Yoshioka and Tsutomu Matsumoto and Takahiro Kasama and D. Inoue and C. Rossow},
doi = {10.1007/978-3-319-93411-2_8},
}

@article{8fb0b59accc53769e96a73ee283c4b75efd5d632,
title = {Malware Analysis Through High-level Behavior},
year = {2018},
url = {https://www.semanticscholar.org/paper/8fb0b59accc53769e96a73ee283c4b75efd5d632},
abstract = {Malware is becoming more and more stealthy to evade detection and analysis. Stealth techniques often involve code transformation, ranging from equivalent code substitution and junk code injection, to continuously transforming code using a polymorphic or a metamorphic engine. Evasion techniques have a great impact on signature-based malware detection, making it very costly and often unsuccessful. We propose to study a malware’s network behavior during its execution. While malware may transform its code to evade analysis, we contend that its behavior must mostly remain the same to achieve the malware’s ultimate purpose, such as sending spam, scanning for vulnerable hosts, etc. While live malware analysis is hard, we leverage our Fantasm platform on the DeterLab testbed to perform it safely and effectively. Based on observed network traffic we propose a behavior classification approach, which can help us interpret the malware’s actions and its ultimate purpose at a high level. We then apply our approach to 999 diverse samples from the Georgia Tech Apiary project to understand current trends in malware behaviors.},
author = {Xiyue Deng and J. Mirkovic},
}

@article{6177addaa9bb3badd34eb1275fbb0cb77a200d20,
title = {Who Watches the Watchmen},
year = {2018},
url = {https://www.semanticscholar.org/paper/6177addaa9bb3badd34eb1275fbb0cb77a200d20},
abstract = {Malicious software, a threat users face on a daily basis, have evolved from simple bankers based on social engineering to advanced persistent threats. Recent research and discoveries reveal that malware developers have been using a wide range of anti-analysis and evasion techniques, in-memory attacks, and system subversion, including BIOS and hypervisors. In addition, code-reuse attacks like Returned Oriented Programming emerge as highly potential remote code execution threats. To counteract the broadness of malicious codes, distinct techniques and tools have been proposed, such as transparent malware tracers, system-wide debuggers, live forensics tools, and isolated execution rings. In this work, we present a survey on state-of-the-art techniques that detect, mitigate, and analyze the aforementioned attacks. We show approaches based on Hardware Virtual Machines introspection, System Management Mode instrumentation, Hardware Performance Counters, isolated rings (e.g., Software Guard eXtensions), as well as others based on external hardware. We also discuss upcoming threats based on the very same technologies used for defense. Our main goal is to provide the reader with a broader, more comprehensive understanding of recently surfaced tools and techniques aiming at binary analysis for modern platforms.},
author = {Marcus Botacin and P. Geus and A. Grégio},
journal = {ACM Computing Surveys (CSUR)},
volume = {51},
pages = {1 - 34},
doi = {10.1145/3199673},
}

@article{119aed470625a4fdadc6393e822130b1f250e957,
title = {Hiding debuggers from malware with apate},
year = {2017},
url = {https://semanticscholar.org/paper/119aed470625a4fdadc6393e822130b1f250e957},
abstract = {Malware analysis uses debuggers to understand and manipulate the behaviors of stripped binaries. To circumvent analysis, malware applies a variety of anti-debugging techniques, such as self-modifying, checking for or removing breakpoints, hijacking keyboard and mouse events, escaping the debugger, etc. Most state-of-the-art debuggers are vulnerable to these anti-debugging techniques. In this paper, we first systematically analyze the spectrum of possible anti-debugging techniques and compile a list of 79 attack vectors. We then propose a framework, called Apate, which detects and defeats each of these attack vectors, by performing: (1) just-in-time disassembling based on single-stepping, (2) careful monitoring of the debuggee's execution and, when needed, modification of the debuggee's states to hide the debugger's presence. We implement Apate as an extension to WinDbg and extensively evaluate it using five different datasets, with known and new malware samples. Apate outperforms other debugger-hiding technologies by a wide margin, addressing 58+--465+ more attack vectors.},
author = {Hao  Shi and Jelena  Mirkovic},
journal = {Proceedings of the Symposium on Applied Computing},
volume = {},
pages = {},
doi = {10.1145/3019612.3019791},
}

@article{5ac89c685bbedd673ddce73b55e54803c328bec8,
title = {Scalability, fidelity and stealth in the DRAKVUF dynamic malware analysis system},
year = {2014},
url = {https://www.semanticscholar.org/paper/5ac89c685bbedd673ddce73b55e54803c328bec8},
abstract = {Malware is one of the biggest security threats on the Internet today and deploying effective defensive solutions requires the rapid analysis of a continuously increasing number of malware samples. With the proliferation of metamorphic malware the analysis is further complicated as the efficacy of signature-based static analysis systems is greatly reduced. While dynamic malware analysis is an effective alternative, the approach faces significant challenges as the ever increasing number of samples requiring analysis places a burden on hardware resources. At the same time modern malware can both detect the monitoring environment and hide in unmonitored corners of the system. In this paper we present DRAKVUF, a novel dynamic malware analysis system designed to address these challenges by building on the latest hardware virtualization extensions and the Xen hypervisor. We present a technique for improving stealth by initiating the execution of malware samples without leaving any trace in the analysis machine. We also present novel techniques to eliminate blind-spots created by kernel-mode rootkits by extending the scope of monitoring to include kernel internal functions, and to monitor file-system accesses through the kernel's heap allocations. With extensive tests performed on recent malware samples we show that DRAKVUF achieves significant improvements in conserving hardware resources while providing a stealthy, in-depth view into the behavior of modern malware.},
author = {Tamas K. Lengyel and S. Maresca and B. Payne and George D. Webster and S. Vogl and A. Kiayias},
journal = {Proceedings of the 30th Annual Computer Security Applications Conference},
volume = {},
pages = {},
doi = {10.1145/2664243.2664252},
}

@article{5db680f254053a515f0dd1eb811fd36746fc6fa9,
title = {A Survey On Automated Dynamic Malware Analysis Evasion and Counter-Evasion: PC, Mobile, and Web},
year = {2017},
url = {https://www.semanticscholar.org/paper/5db680f254053a515f0dd1eb811fd36746fc6fa9},
abstract = {Automated dynamic malware analysis systems are important in combating the proliferation of modern malware. Unfortunately, malware can often easily detect and evade these systems. Competition between malware authors and analysis system developers has pushed each to continually evolve their tactics for countering the other.
 In this paper we systematically review i) "fingerprint"-based evasion techniques against automated dynamic malware analysis systems for PC, mobile, and web, ii) evasion detection, iii) evasion mitigation, and iv) offensive and defensive evasion case studies. We also discuss difficulties in experimental evaluation, highlight future directions in offensive and defensive research, and briefly survey related topics in anti-analysis.},
author = {Alexei Bulazel and B. Yener},
doi = {10.1145/3150376.3150378},
}

@article{d4efd0c4b635a69123755fa0d3aed23b091ebfc6,
title = {SPIDER: stealthy binary program instrumentation and debugging via hardware virtualization},
year = {2013},
url = {https://www.semanticscholar.org/paper/d4efd0c4b635a69123755fa0d3aed23b091ebfc6},
abstract = {The ability to trap the execution of a binary program at desired instructions is essential in many security scenarios such as malware analysis and attack provenance. However, an increasing percent of both malicious and legitimate programs are equipped with anti-debugging and anti-instrumentation techniques, which render existing debuggers and instrumentation tools inadequate. In this paper, we present Spider, a stealthy program instrumentation framework which enables transparent, efficient and flexible instruction-level trapping based on hardware virtualization. Spider uses invisible breakpoint, a novel primitive we develop that inherits the efficiency and flexibility of software breakpoint, and utilizes hardware virtualization to hide its side-effects from the guest. We have implemented a prototype of Spider on KVM. Our evaluation shows that Spider succeeds in remaining transparent against state-of-the-art anti-debugging and anti-instrumentation techniques; the overhead of invisible breakpoint is comparable with traditional hardware breakpoint. We also demonstrate Spider's usage in various security applications.},
author = {Zhui Deng and X. Zhang and Dongyan Xu},
journal = {Proceedings of the 29th Annual Computer Security Applications Conference},
volume = {},
pages = {},
doi = {10.1145/2523649.2523675},
}

@article{50c8e1245b8a1c9925d9e7de20b9fb5a7cef2eae,
title = {Scarecrow: Deactivating Evasive Malware via Its Own Evasive Logic},
year = {2020},
url = {https://www.semanticscholar.org/paper/50c8e1245b8a1c9925d9e7de20b9fb5a7cef2eae},
abstract = {Security analysts widely use dynamic malware analysis environments to exercise malware samples and derive virus signatures. Unfortunately, malware authors are becoming more aware of such analysis environments. Therefore, many have embedded evasive logic into malware to probe execution environments before exposing malicious behaviors. Consequently, such analysis environments become useless and evasive malware can damage victim systems with unforeseen malicious activities. However, adopting evasive techniques to bypass dynamic malware analysis is a double-edged sword. While evasive techniques can avoid early detection through sandbox analysis, it also significantly constrains the spectrum of execution environments where the malware activates. In this paper, we exploit this dilemma and seek to reverse the challenge by camouflaging end-user execution environments into analysis-like environments using a lightweight deception engine called SCARECROW. We thoroughly evaluate SCARECROW with real evasive malware samples and demonstrate that we can successfully deactivate 89.56% of evasive malware samples and the variants of ransomware (e.g., WannaCry and Locky) with little or no impact on the most commonly used benign software. Our evaluation also shows that SCARECROW is able to steer state-of-the-art analysis environment fingerprinting techniques so that end-user execution environments with SCARECROW and malware analysis environments with SCARECROW become indistinguishable.},
author = {Jialong Zhang and Zhongshu Gu and Jiyong Jang and D. Kirat and M. Stoecklin and Xiaokui Shu and Heqing Huang},
journal = {2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
volume = {},
pages = {76-87},
doi = {10.1109/DSN48063.2020.00027},
}

@article{1b828109062104787b4e76bcbc7709166b42d907,
title = {Hybrid emulation for bypassing anti-reversing techniques and analyzing malware},
year = {2020},
url = {https://www.semanticscholar.org/paper/1b828109062104787b4e76bcbc7709166b42d907},
abstract = {Malware uses a variety of anti-reverse engineering techniques, which makes its analysis difficult. Dynamic analysis tools, e.g., debuggers, DBI (Dynamic Binary Instrumentation), and CPU emulators, do not provide both accuracy and convenience when analyzing complex malware, which utilizes diverse anti-reversing techniques. Debuggers are convenient, but are easily detected by anti-debugging techniques. DBI tools are better for bypassing anti-reversing techniques than debuggers, but cannot execute complex programs correctly. Emulators are not designed for precise malware analysis. To address the problem fundamentally, we developed a new approach completely different from the previous works. We present a new dynamic analysis scheme for malware, which includes automatic detection and evasion of various anti-reversing techniques. This approach combines a CPU simulator and actual code execution, i.e., machine instructions are simulated with the CPU simulator, whereas API functions are directly executed when they are called. In this method, the CPU simulator can precisely execute code without modifying the code chunks for trampolines. Moreover, our method takes advantage of the OS functionalities, including thread management or interrupt handling. We conducted experiments on 16 widely used protectors, which show that our method outperforms conventional tools: Pin, DynamoRIO, Apate, and OllyAdvanced. Our scheme can unpack 15 protectors and bypass the anti-debugging techniques associated with them.},
author = {Seokwoo Choi and Taejoo Chang and Sung-woo Yoon and Yongsu Park},
journal = {The Journal of Supercomputing},
volume = {77},
pages = {471-497},
doi = {10.1007/s11227-020-03270-6},
}

@article{b4b88eb21098a999160d0d8489b52d52d2d7f25d,
title = {Trends of anti-analysis operations of malwares observed in API call logs},
year = {2018},
url = {https://www.semanticscholar.org/paper/b4b88eb21098a999160d0d8489b52d52d2d7f25d},
abstract = {Some malwares execute operations that determine whether they are running in an analysis environment created by monitoring software, such as debuggers, sandboxing systems, or virtual machine monitors, and if such an operation finds that the malware is running in an analysis environment, it terminates execution to prevent analysis. The existence of malwares that execute such operations (anti-analysis operations) is widely known. However, the knowledge acquired thus far, regarding what proportion of current malwares execute anti-analysis operations, what types of anti-analysis operations they execute, and how effectively such operations prevent analysis, is insufficient. In this study, we analyze FFRI Dataset, which is a dataset of dynamic malware analysis results, and clarify the trends in the anti-analysis operations executed by malware samples collected in 2016. Our findings revealed that, among 8243 malware samples, 856 (10.4%) samples executed at least one type of the 28 anti-analysis operations investigated in this study. We also found that, among the virtual machine monitors, VMware was the most commonly searched for by the malware samples.},
author = {Y. Oyama},
journal = {Journal of Computer Virology and Hacking Techniques},
volume = {14},
pages = {69-85},
doi = {10.1007/s11416-017-0290-x},
}

@article{d1bb7422d613f2aae712cdfa7d66fa04b1635e06,
title = {x64Unpack: Hybrid Emulation Unpacker for 64-bit Windows Environments and Detailed Analysis Results on VMProtect 3.4},
year = {2020},
url = {https://www.semanticscholar.org/paper/d1bb7422d613f2aae712cdfa7d66fa04b1635e06},
abstract = {In spite of recent remarkable advances in binary code analysis, malware developers are still using complex anti-reversing techniques to make analysis difficult. To protect malware, they use packers, which are (commercial) tools that contain various anti-reverse engineering techniques such as code encryption, anti-debugging, and code virtualization. In this paper, we present x64Unpack: a hybrid emulation scheme that makes it easier to analyze packed executable files and automatically unpacks them in 64-bit Windows environments. The most distinguishable feature of x64Unpack compared to other dynamic analysis tools is that x64Unpack and the target program share virtual memory to support both instruction emulation and direct execution. Emulation runs slow but provides detailed information, whereas direct execution of the code chunk runs very fast and can handle complex cases regarding to operating systems or hardware devices. With x64Unpack, we can monitor major API (Application Programming Interface) function calls or conduct fine-grained analysis at the instruction-level. Furthermore, x64Unpack can detect anti-debugging code chunks, dump memory, and unpack the packed files. To verify the effectiveness of x64Unpack, experiments were conducted on the obfuscation tools: UPX 3.95, MPRESS 2.19, Themida 2.4.6, and VMProtect 3.4. Especially, VMProtect and Themida are considered as some of the most complex commercial packers in 64-bit Windows environments. Experimental results show that x64Unpack correctly emulates the packed executable files and successfully produces the unpacked version. Based on this, we provide the detailed analysis results on the obfuscated executable file that was generated by VMProtect 3.4.},
author = {Seokwoo Choi and Taejoo Chang and Changhyun Kim and Yongsu Park},
journal = {IEEE Access},
volume = {8},
pages = {127939-127953},
doi = {10.1109/ACCESS.2020.3008900},
}

@article{e66b58f498fe8ff14a8f0f538c8ab200298d9995,
title = {Evading Anti-debugging Techniques with Binary Substitution},
year = {2014},
url = {https://www.semanticscholar.org/paper/e66b58f498fe8ff14a8f0f538c8ab200298d9995},
abstract = {Anti-debugging technology refers to various ways of preventing binary files from being analyzed in debuggers or other virtual machine environments. If binary files conceal or modify themself using anti-debugging techniques, analyzing these binary files becomes harder. There are some anti-anti-debugging techniques proposed so far, but malware developers make dynamic analysis difficult using various ways, such as execution time delay, debugger detection techniques and so on. In this paper, we propose a Evading Antidebugging techniques method that can avoid anti-debugging techniques in binary files, and showed several samples of anti-debugging applications and how to detect and patch antidebugging techniques in common utilities or malicious code effectively.},
author = {JaeKeun Lee and Boojoong Kang and E. Im},
journal = {International journal of security and its applications},
volume = {8},
pages = {183-192},
doi = {10.14257/IJSIA.2014.8.1.17},
}

@article{b87659748b6508bd120aec204cfdfce4d0574f56,
title = {On the Dissection of Evasive Malware},
year = {2020},
url = {https://www.semanticscholar.org/paper/b87659748b6508bd120aec204cfdfce4d0574f56},
abstract = {Complex malware samples feature measures to impede automatic and manual analyses, making their investigation cumbersome. While automatic characterization of malware benefits from recently proposed designs for passive monitoring, the subsequent dissection process still sees human analysts struggling with adversarial behaviors, many of which also closely resemble those studied for automatic systems. This gap affects the day-to-day analysis of complex samples and researchers have not yet attempted to bridge it. We make a first step down this road by proposing a design that can reconcile transparency requirements with manipulation capabilities required for dissection. Our open-source prototype BluePill (i) offers a customizable execution environment that remains stealthy when analysts intervene to alter instructions and data or run third-party tools, (ii) is extensible to counteract newly encountered anti-analysis measures using insights from the dissection, and (iii) can accommodate program analyses that aid analysts, as we explore for taint analysis. On a set of highly evasive samples BluePill resulted as stealthy as commercial sandboxes while offering new intervention and customization capabilities for dissection.},
author = {Daniele Cono D'Elia and Emilio Coppa and F. Palmaro and L. Cavallaro},
journal = {IEEE Transactions on Information Forensics and Security},
volume = {15},
pages = {2750-2765},
doi = {10.1109/TIFS.2020.2976559},
}

@article{7f0c1afbd8dfc8e0036e23756485361b1e0e1716,
title = {MIMOSA: Reducing Malware Analysis Overhead with Coverings},
year = {2021},
url = {https://www.semanticscholar.org/paper/7f0c1afbd8dfc8e0036e23756485361b1e0e1716},
abstract = {There is a growing body of malware samples that evade automated analysis and detection tools. Malware may measure fingerprints (”artifacts”) of the underlying analysis tool or environment, and change their behavior when artifacts are detected. While analysis tools can mitigate artifacts to reduce exposure, such concealment is expensive. However, not every sample checks for every type of artifact—analysis efficiency can be improved by mitigating only those artifacts most likely to be used by a sample. Using that insight, we propose MIMOSA, a system which identifies a small set of ”covering” tool configurations that collectively defeat most malware samples with increased efficiency. MIMOSA identifies a set of tool configurations which maximize analysis throughput and detection accuracy while minimizing manual effort, enabling scalable automation for analyzing stealthy malware. We evaluate our approach against a benchmark of 1535 labeled stealthy malware samples. Our approach increases analysis throughput over the state of the art on over 95% of these samples. We also investigate cost-benefit tradeoffs between the fraction of successfully-analyzed samples and computing resources required. MIMOSA provides a practical, tunable method for efficiently deploying analysis resources.},
author = {Mohsen Ahmadi and Kevin Leach and Ryan E. Dougherty and S. Forrest and Westley Weimer},
journal = {ArXiv},
volume = {abs/2101.07328},
pages = {},
arxivid = {2101.07328},
}

@article{6c937fc3648ed23799421dfc6f720377a159e8fc,
title = {Towards Transparent Debugging},
year = {2018},
url = {https://www.semanticscholar.org/paper/6c937fc3648ed23799421dfc6f720377a159e8fc},
abstract = {Traditional malware analysis relies on virtualization or emulation technology to run samples in a confined environment, and to analyze malicious activities by instrumenting code execution. However, virtual machines and emulators inevitably create artifacts in the execution environment, making these approaches vulnerable to detection or subversion. In this paper, we present MalT, a debugging framework that employs System Management Mode, a CPU mode in the x86 architecture, to transparently study armored malware. MalT does not depend on virtualization or emulation and thus is immune to threats targeting such environments. Our approach reduces the attack surface at the software level, and advances state-of-the-art debugging transparency. MalT embodies various debugging functions, including register/memory accesses, breakpoints, and seven stepping modes. Additionally, MalT restores the system to a clean state after a debugging session. We implemented a prototype of MalT on two physical machines, and we conducted experiments by testing an array of existing anti-virtualization, anti-emulation, and packing techniques against MalT. The experimental results show that our prototype remains transparent and undetected against the samples. Furthermore, debugging and restoration introduce moderate but manageable overheads on both Windows and Linux platforms.},
author = {F. Zhang and Kevin Leach and A. Stavrou and Haining Wang},
journal = {IEEE Transactions on Dependable and Secure Computing},
volume = {15},
pages = {321-335},
doi = {10.1109/TDSC.2016.2545671},
}

@article{e0217797dcaf8f4c2548a2266324f0a3ac7342d6,
title = {Malware Dynamic Analysis Evasion Techniques},
year = {2020},
url = {https://semanticscholar.org/paper/e0217797dcaf8f4c2548a2266324f0a3ac7342d6},
abstract = {The cyber world is plagued with ever-evolving malware that readily infiltrate all defense mechanisms, operate viciously unbeknownst to the user, and surreptitiously exfiltrate sensitive data. Understanding the inner workings of such malware provides a leverage to effectively combat them. This understanding is pursued often through dynamic analysis which is conducted manually or automatically. Malware authors accordingly, have devised and advanced evasion techniques to thwart or evade these analyses. In this article, we present a comprehensive survey on malware dynamic analysis evasion techniques. In addition, we propose a detailed classification of these techniques and further demonstrate how their efficacy holds against different types of detection and analysis approaches. Our observations attest that evasive behavior is mostly concerned with detecting and evading sandboxes. The primary tactic of such malware we argue is fingerprinting followed by new trends for reverse Turing test tactic which aims at detecting human interaction. Furthermore, we will posit that the current defensive strategies, beginning with reactive methods to endeavors for more transparent analysis systems, are readily foiled by zero-day fingerprinting techniques or other evasion tactics such as stalling. Accordingly, we would recommend the pursuit of more generic defensive strategies with an emphasis on path exploration techniques that has the potential to thwart all the evasive tactics.},
author = {Amir  Afianian and Salman  Niksefat and Babak  Sadeghiyan and David  Baptiste},
journal = {ACM Computing Surveys (CSUR)},
volume = {52},
pages = {1 - 28},
doi = {10.1145/3365001},
}

@article{388c8682828ed3598491bf82417a1dfdd48cb83d,
title = {Hypervisor-assisted dynamic malware analysis},
year = {2021},
url = {https://www.semanticscholar.org/paper/388c8682828ed3598491bf82417a1dfdd48cb83d},
abstract = {Malware analysis is a task of utmost importance in cyber-security. Two approaches exist for malware analysis: static and dynamic. Modern malware uses an abundance of techniques to evade both dynamic and static analysis tools. Current dynamic analysis solutions either make modifications to the running malware or use a higher privilege component that does the actual analysis. The former can be easily detected by sophisticated malware while the latter often induces a significant performance overhead. We propose a method that performs malware analysis within the context of the OS itself. Furthermore, the analysis component is camouflaged by a hypervisor, which makes it completely transparent to the running OS and its applications. The evaluation of the system’s efficiency suggests that the induced performance overhead is negligible.},
author = {Roee S. Leon and Michael Kiperberg and Anat Anatey Leon Zabag and N. Zaidenberg},
journal = {Cybersecurity},
volume = {4},
pages = {1-14},
doi = {10.1186/s42400-021-00083-9},
}

@article{71a1426f4b45d079f5996649dac413d87b5202d6,
title = {Dynamic Malware Analysis in the Modern Era—A State of the Art Survey},
year = {2019},
url = {https://www.semanticscholar.org/paper/71a1426f4b45d079f5996649dac413d87b5202d6},
abstract = {Although malicious software (malware) has been around since the early days of computers, the sophistication and innovation of malware has increased over the years. In particular, the latest crop of ransomware has drawn attention to the dangers of malicious software, which can cause harm to private users as well as corporations, public services (hospitals and transportation systems), governments, and security institutions. To protect these institutions and the public from malware attacks, malicious activity must be detected as early as possible, preferably before it conducts its harmful acts. However, it is not always easy to know what to look for—especially when dealing with new and unknown malware that has never been seen. Analyzing a suspicious file by static or dynamic analysis methods can provide relevant and valuable information regarding a file's impact on the hosting system and help determine whether the file is malicious or not, based on the method's predefined rules. While various techniques (e.g., code obfuscation, dynamic code loading, encryption, and packing) can be used by malware writers to evade static analysis (including signature-based anti-virus tools), dynamic analysis is robust to these techniques and can provide greater understanding regarding the analyzed file and consequently can lead to better detection capabilities. Although dynamic analysis is more robust than static analysis, existing dynamic analysis tools and techniques are imperfect, and there is no single tool that can cover all aspects of malware behavior. The most recent comprehensive survey performed in this area was published in 2012. Since that time, the computing environment has changed dramatically with new types of malware (ransomware, cryptominers), new analysis methods (volatile memory forensics, side-channel analysis), new computing environments (cloud computing, IoT devices), new machine-learning algorithms, and more. The goal of this survey is to provide a comprehensive and up-to-date overview of existing methods used to dynamically analyze malware, which includes a description of each method, its strengths and weaknesses, and its resilience against malware evasion techniques. In addition, we include an overview of prominent studies presenting the usage of machine-learning methods to enhance dynamic malware analysis capabilities aimed at detection, classification, and categorization.},
author = {Ori Or-Meir and N. Nissim and Y. Elovici and L. Rokach},
journal = {ACM Computing Surveys (CSUR)},
volume = {52},
pages = {1 - 48},
doi = {10.1145/3329786},
}

@article{8a17db60ea69876de83fe7d179950657be1c021e,
title = {A Comparative Analysis of Classifiers in the Recognition of Packed Executables},
year = {2019},
url = {https://www.semanticscholar.org/paper/8a17db60ea69876de83fe7d179950657be1c021e},
abstract = {Although the packing of executable binaries can be adopted with legitimate intent such as intellectual property protection and size reduction, malware developers utilize those tools to obfuscate their code and thus increase the complexity of static analysis. In order to recognize packed executables, the BinStat application was proposed. It is based on two major steps: the feature extraction, which involves the calculation of statistics and information theory properties from a given binary; and the classification, which adopts a decision tree learned from input features of packed and unpacked binaries previously known in order to classify new executables. The results obtained proved the effectiveness of the tool, but the choice of using only one classifier is arguably a weakness that we chose to improve on the present study. For that end, we rebuilt the training and test datasets and selected the following six classifiers to our analyses: classification and regression trees, random forest, k-nearest neighbors, naive Bayes, neural network and support vector machines. Our results show that the original decision tree algorithm adopted in BinStat (C5.0) is not the best choice for the proposed problem. Indeed, random forest, k-nearest neighbors and support vector machines achieved the best predictive performances.},
author = {Cecília R. O. Assis and R. Miani and M. Carneiro and K. Park},
journal = {2019 IEEE 31st International Conference on Tools with Artificial Intelligence (ICTAI)},
volume = {},
pages = {1356-1360},
doi = {10.1109/ICTAI.2019.00189},
}

@article{8fd68c0d3fa1147863a7a583b2cc6506cb666c48,
title = {All-in-One Framework for Detection, Unpacking, and Verification for Malware Analysis},
year = {2019},
url = {https://www.semanticscholar.org/paper/8fd68c0d3fa1147863a7a583b2cc6506cb666c48},
abstract = {Packing is the most common analysis avoidance technique for hiding malware. Also, packing can make it harder for the security researcher to identify the behaviour of malware and increase the analysis time. In order to analyze the packed malware, we need to perform unpacking first to release the packing. In this paper, we focus on unpacking and its related technologies to analyze the packed malware. Through extensive analysis on previous unpacking studies, we pay attention to four important drawbacks: no phase integration, no detection combination, no real-restoration, and no unpacking verification. To resolve these four drawbacks, in this paper, we present an all-in-one structure of the unpacking system that performs packing detection, unpacking (i.e., restoration), and verification phases in an integrated framework. For this, we first greatly increase the packing detection accuracy in the detection phase by combining four existing and new packing detection techniques. We then improve the unpacking phase by using the state-of-the-art static and dynamic unpacking techniques. We also present a verification algorithm evaluating the accuracy of unpacking results. Experimental results show that the proposed all-in-one unpacking system performs all of the three phases well in an integrated framework. In particular, the proposed hybrid detection method is superior to the existing methods, and the system performs unpacking very well up to 100% of restoration accuracy for most of the files except for a few packers.},
author = {Mi-Jung Choi and Jiwon Bang and Jong-Wouk Kim and Hajin Kim and Yang-Sae Moon},
journal = {Secur. Commun. Networks},
volume = {2019},
pages = {5278137:1-5278137:16},
doi = {10.1155/2019/5278137},
}

@article{485a2076acdf469644a3997d73c4c065c3057412,
title = {Cardinal Pill Testing of System Virtual Machines},
year = {2014},
url = {https://www.semanticscholar.org/paper/485a2076acdf469644a3997d73c4c065c3057412},
abstract = {Malware analysis relies heavily on the use of virtual machines for functionality and safety. There are subtle differences in operation between virtual machines and physical machines. Contemporary malware checks for these differences to detect that it is being run in a virtual machine, and modifies its behavior to thwart being analyzed by the defenders. Existing approaches to uncover these differences use randomized testing, or malware analysis, and cannot guarantee completeness. 
 
In this paper we propose Cardinal Pill Testing--a modification of Red Pill Testing [21] that aims to enumerate the differences between a given VM and a physical machine, through carefully designed tests. Cardinal Pill Testing finds five times more pills by running fifteen times fewer tests than Red Pill Testing. We further examine the causes of pills and find that, while the majority of them stem from the failure of virtual machines to follow CPU design specifications, a significant number stem from under-specification of the effects of certain instructions by the Intel manual. This leads to divergent implementations in different CPU and virtual machine architectures. Cardinal Pill Testing successfully enumerates differences that stem from the first cause, but only exhaustive testing or an understanding of implementation semantics can enumerate those that stem from the second cause. Finally, we sketch a method to hide pills from malware by systematically correcting their outputs in the virtual machine.},
author = {Hao Shi and Abdulla Alwabel and J. Mirkovic},
}

@article{81565fc84e75508a14e1d65ae1bc8b0c3dd271a5,
title = {Using Hardware Features for Increased Debugging Transparency},
year = {2015},
url = {https://www.semanticscholar.org/paper/81565fc84e75508a14e1d65ae1bc8b0c3dd271a5},
abstract = {With the rapid proliferation of malware attacks on the Internet, understanding these malicious behaviors plays a critical role in crafting effective defense. Advanced malware analysis relies on virtualization or emulation technology to run samples in a confined environment, and to analyze malicious activities by instrumenting code execution. However, virtual machines and emulators inevitably create artifacts in the execution environment, making these approaches vulnerable to detection or subversion. In this paper, we present MALT, a debugging framework that employs System Management Mode, a CPU mode in the x86 architecture, to transparently study armored malware. MALT does not depend on virtualization or emulation and thus is immune to threats targeting such environments. Our approach reduces the attack surface at the software level, and advances state-of-the-art debugging transparency. MALT embodies various debugging functions, including register/memory accesses, breakpoints, and four stepping modes. We implemented a prototype of MALT on two physical machines, and we conducted experiments by testing an array of existing anti-virtualization, anti-emulation, and packing techniques against MALT. The experimental results show that our prototype remains transparent and undetected against the samples. Furthermore, our prototype of MALT introduces moderate but manageable overheads on both Windows and Linux platforms.},
author = {F. Zhang and Kevin Leach and A. Stavrou and Haining Wang and Kun Sun},
journal = {2015 IEEE Symposium on Security and Privacy},
volume = {},
pages = {55-69},
doi = {10.1109/SP.2015.11},
}

@article{7b69bfbf3d48de11b2307a5f3281ae0016c58558,
title = {Evasive Windows Malware: Impact on Antiviruses and Possible Countermeasures},
year = {2020},
url = {https://www.semanticscholar.org/paper/7b69bfbf3d48de11b2307a5f3281ae0016c58558},
abstract = {The perpetual opposition between antiviruses and malware leads both parties to evolve continuously. On the one hand, antiviruses put in place solutions that are more and more sophisticated and propose more complex detection techniques in addition to the classic signature analysis. This sophistication leads antiviruses to leave more traces of their presence on the machine they protect. To remain undetected as long as possible, malware can avoid executing within such environments by hunting down the modifications left by the antiviruses. This paper aims at determining the possibilities for malware to detect the antiviruses and then evaluating the efficiency of these techniques on a panel of antiviruses that are the most used nowadays. We then collect samples showing this kind of behavior and propose to evaluate a countermeasure that creates false artifacts, thus forcing malware to evade.},
author = {Cédric Herzog and Valérie Viet Triem Tong and Pierre Wilke and Arnaud Van Straaten and Jean-Louis Lanet},
journal = {ArXiv},
volume = {abs/2009.12204},
pages = {},
doi = {10.5220/0009816703020309},
arxivid = {2009.12204},
}

@article{23962a7742857876e5c477ad96d7cf01a22c955f,
title = {ApiScout: Robust Windows API Usage Recovery for Malware Characterization and Similarity Analysis},
year = {2018},
url = {https://www.semanticscholar.org/paper/23962a7742857876e5c477ad96d7cf01a22c955f},
abstract = {Given today's masses of malware there is a need for fast analysis and comparison of samples. System API usage has been proven to be a very valuable source of information for this e.g. shown by Rieck et al. However, the majority of malware samples is shipped packed, making it hard to get accurate information on their payload's API usage. Today's state of the art to get this information from packed samples is by unpacking them or dumping memory with subsequent reconstruction of imports using tools like ImpREC and Scylla. This has several drawbacks since it is a manual procedure requiring a live process environment and suffers from inaccuracy due to missed dynamic imports.
 

In this paper, we present ApiScout, a fully automated method to recover API usage information from memory dumps. It does not require a live process environment and is capable of handling dynamic imports leading to more accurate results compared to existing approaches. ApiScout is a two-staged approach. The first stage is a preparation step creating a database of candidate offsets for API functions. In the second step we crawl through a given memory dump of a process and match all possible DWORDs and QWORDs against this database yielding us API reference candidates. We filter and enrich candidates using different procedures leading us to the desired API usage information.
 

Based on this information, our second contribution in this paper is a concept called ApiVectors. It efficiently stores the information extracted by ApiScout. This enables fast assessment of a malware's potential capabilities and allows similarity analysis of API usage across samples. For the latter the methods imphash and impfuzzy are the de facto standard. However, they both suffer from inaccuracy due to exclusively relying on the import table and non-recoverability of input data. In our approach we use Jaccard and Tanimoto similarity to compare ApiVectors, leading to a much higher accuracy.
 

Our third contribution is an extensive analysis of API usage across 589 malware families of the Malpedia dataset. The families combined use only about 4500 APIs that can be grouped into 12 semantic groups. The analysis further proves the functionality of ApiScout and shows that ApiVectors clearly outperform imphash and impfuzzy.},
author = {D. Plohmann and Steffen Enders and Elmar Padilla},
doi = {10.18464/CYBIN.V4I1.20},
}

@article{e273fa98e9336676a5ecbba4fb8ae9b0aeba0701,
title = {Anti-Reverse-Engineering Tool of Executable Files on the Windows Platform},
year = {2017},
url = {https://www.semanticscholar.org/paper/e273fa98e9336676a5ecbba4fb8ae9b0aeba0701},
abstract = {In response to the problems of the Windows executable being reverse-analyzed easily, we introduce the technology of INT3 breakpoint detection and characteristics detection in the tail of the heap in the software anti-dynamic-debugging. We also applied the multistage security policy which contains self-stored secret key decryption and the UKEY based decryption to the anti-static-analysis. When an attacker is trying to attack the program with the debugger, the detection thread will check the existence of the INT3 breakpoint in the head of the key API and the debugging-characteristics in the tail of the heap. If the analysis behavior is confirmed, the program will be terminated. At the same time, the key function will be hidden in exception handlers and the attacker will be unable to follow in the key function. According to the multilevel security policy, the program can be executed directly under low level policy, and it should be authenticated by the U-KEY to execute under the high level policy. After the experiment of effectiveness and feasibility test, we can conclude that this system is able to detect the execution environment and protect the software from reverse-attacking effectively.},
author = {Luo Chenke and Y. Feng and Gao Qiyuan and Yang Jiateng and Xu Jian},
journal = {22017 IEEE International Conference on Computational Science and Engineering (CSE) and IEEE International Conference on Embedded and Ubiquitous Computing (EUC)},
volume = {01},
pages = {797-800},
doi = {10.1109/CSE-EUC.2017.158},
}

@article{b6e1f279411da924582d15582c9d9ee5fba8dd60,
title = {Down to the bare metal: using processor features for binary analysis},
year = {2012},
url = {https://www.semanticscholar.org/paper/b6e1f279411da924582d15582c9d9ee5fba8dd60},
abstract = {A detailed understanding of the behavior of exploits and malicious software is necessary to obtain a comprehensive overview of vulnerabilities in operating systems or client applications, and to develop protection techniques and tools. To this end, a lot of research has been done in the last few years on binary analysis techniques to efficiently and precisely analyze code. Most of the common analysis frameworks are based on software emulators since such tools offer a fine-grained control over the execution of a given program. Naturally, this leads to an arms race where the attackers are constantly searching for new methods to detect such analysis frameworks in order to successfully evade analysis.
 In this paper, we focus on two aspects. As a first contribution, we introduce several novel mechanisms by which an attacker can delude an emulator. In contrast to existing detection approaches that perform a dedicated test on the environment and combine the test with an explicit conditional branch, our detection mechanisms introduce code sequences that have an implicitly different behavior on a native machine when compared to an emulator. Such differences in behavior are caused by the side-effects of the particular operations and imperfections in the emulation process that cannot be mitigated easily. Motivated by these findings, we introduce a novel approach to generate execution traces. We propose to utilize the processor itself to generate such traces. Mores precisely, we propose to use a hardware feature called branch tracing available on commodity x86 processors in which the log of all branches taken during code execution is generated directly by the processor. Effectively, the logging is thus performed at the lowest level possible. We evaluate the practical viability of this approach.},
author = {C. Willems and R. Hund and Andreas Fobian and Dennis Felsch and Thorsten Holz and A. Vasudevan},
doi = {10.1145/2420950.2420980},
}

@article{10981451efc050ed4e71d170c4e314e164d1a9f8,
title = {Detecting Environment-Sensitive Malware},
year = {2011},
url = {https://www.semanticscholar.org/paper/10981451efc050ed4e71d170c4e314e164d1a9f8},
abstract = {The execution of malware in an instrumented sandbox is a widespread approach for the analysis of malicious code, largely because it sidesteps the difficulties involved in the static analysis of obfuscated code. As malware analysis sandboxes increase in popularity, they are faced with the problem of malicious code detecting the instrumented environment to evade analysis. In the absence of an "undetectable", fully transparent analysis sandbox, defense against sandbox evasion is mostly reactive: Sandbox developers and operators tweak their systems to thwart individual evasion techniques as they become aware of them, leading to a never-ending arms race. 
 
The goal of this work is to automate one step of this fight: Screening malware samples for evasive behavior. Thus, we propose novel techniques for detecting malware samples that exhibit semantically different behavior across different analysis sandboxes. These techniques are compatible with any monitoring technology that can be used for dynamic analysis, and are completely agnostic to the way that malware achieves evasion. We implement the proposed techniques in a tool called Disarm, and demonstrate that it can accurately detect evasive malware, leading to the discovery of previously unknown evasion techniques.},
author = {Martina Lindorfer and Clemens Kolbitsch and P. M. Comparetti},
doi = {10.1007/978-3-642-23644-0_18},
}

@article{9c15235735f06fd5cd708345b6694525238a82f4,
title = {Detecting Hardware-Assisted Virtualization},
year = {2016},
url = {https://www.semanticscholar.org/paper/9c15235735f06fd5cd708345b6694525238a82f4},
abstract = {Virtualization has become an indispensable technique for scaling up the analysis of malicious code, such as for malware analysis or shellcode detection systems. Frameworks like Ether, ShellOS and an ever-increasing number of commercially-operated malware sandboxes rely on hardware-assisted virtualization. A core technology is Intel's VT-x, which -- compared to software-emulated virtulization -- is believed to be stealthier, especially against evasive attackers that aim to detect virtualized systems to hide the malicious behavior of their code. 
 
We propose and evaluate low-level timing-based mechanisms to detect hardware-virtualized systems. We build upon the observation that an adversary can invoke hypervisors and trigger context switches that are noticeable both in timing and in their side effects on caching. We have locally trained and then tested our detection methodology on a wide variety of systems, including 240 PlanetLab nodes, showing a high detection accuracy. As a real-world evaluation, we detected the virtualization technology of more than 30 malware sandboxes. Finally, we demonstrate how an adversary may even use these detections to evade multi-path exploration systems that aim to explore the full behavior of a program. Our results show that VT-x is not sufficiently stealthy for reliable analysis of malicious code.},
author = {Michael Brengel and M. Backes and C. Rossow},
doi = {10.1007/978-3-319-40667-1_11},
}

@article{69d6a6713fd296982732718cb7fef3d702fbdf68,
title = {Research in Attacks, Intrusions, and Defenses},
year = {2016},
url = {https://www.semanticscholar.org/paper/69d6a6713fd296982732718cb7fef3d702fbdf68},
abstract = {Kernel rootkits can exploit an operating system and enable future accessibility and control, despite all recent advances in software protection. A promising defense mechanism against rootkits is Kernel Integrity Monitor (KIM) systems, which inspect the kernel text and data to discover any malicious changes. A KIM can be implemented either in software, using a hypervisor, or using extra hardware. The latter option is more attractive due to better performance and higher security, since the monitor is isolated from the potentially vulnerable host. To remain under the radar and avoid detection it is paramount for a rootkit to conceal its malicious activities. In order to detect self-hiding rootkits researchers have proposed snooping for inferring suspicious behaviour in kernel memory. This is accomplished by constantly monitoring all memory accesses on the bus and not the actual memory area where the kernel is mapped. In this paper, we present GRIM, an external memory monitor that is built on commodity, off-the-shelf, graphics hardware, and is able to verify OS kernel integrity at a speed that outperforms all so-far published snapshot-based systems. GRIM allows for checking eight thousand 64bit values simultaneously at a 10 KHz snapshot frequency, which is sufficient to accurately detect a self-hiding loadable kernel module insertion. According to the state-of-the-art, this detection can only happen using a snoop-based monitor. GRIM does not only demonstrate that snapshotbased monitors can be significantly improved, but it additionally offers a fully programmable platform that can be instantly deployed without requiring any modifications to the host it protects. Notice that all snoopbased monitors require substantial changes at the microprocessor level. L. Koromilas—This work was performed while at FORTH, Greece. c © Springer International Publishing Switzerland 2016 F. Monrose et al. (Eds.): RAID 2016, LNCS 9854, pp. 3–23, 2016. DOI: 10.1007/978-3-319-45719-2 1 4 L. Koromilas et al.},
author = {J. Kittler and John C. Mitchell and M. Naor},
doi = {10.1007/978-3-319-45719-2},
}

@article{8201eb1917fec9242d88fbfae8dee96f86dd8d1c,
title = {BareCloud: Bare-metal Analysis-based Evasive Malware Detection},
year = {2014},
url = {https://www.semanticscholar.org/paper/8201eb1917fec9242d88fbfae8dee96f86dd8d1c},
abstract = {The volume and the sophistication of malware are continuously increasing and evolving. Automated dynamic malware analysis is a widely-adopted approach for detecting malicious software. However, many recent malware samples try to evade detection by identifying the presence of the analysis environment itself, and refraining from performing malicious actions. Because of the sophistication of the techniques used by the malware authors, so far the analysis and detection of evasive malware has been largely a manual process. One approach to automatic detection of these evasive malware samples is to execute the same sample in multiple analysis environments, and then compare its behaviors, in the assumption that a deviation in the behavior is evidence of an attempt to evade one or more analysis systems. For this reason, it is important to provide a reference system (often called bare-metal) in which the malware is analyzed without the use of any detectable component. 
 
In this paper, we present BareCloud, an automated evasive malware detection system based on bare-metal dynamic malware analysis. Our bare-metal analysis system does not introduce any in-guest monitoring component into the malware execution platform. This makes our approach more transparent and robust against sophisticated evasion techniques. We compare the malware behavior observed in the bare-metal system with other popular malware analysis systems. We introduce a novel approach of hierarchical similarity-based malware behavior comparison to analyze the behavior of a sample in the various analysis systems. Our experiments show that our approach produces better evasion detection results compared to previous methods. BareCloud was able to automatically detect 5,835 evasive malware out of 110,005 recent samples.},
author = {D. Kirat and Giovanni Vigna and Christopher Krügel},
}

@article{986db22014e0523c762ba3f186aaf9320e5d8ba7,
title = {AVLeak: Fingerprinting Antivirus Emulators through Black-Box Testing},
year = {2016},
url = {https://www.semanticscholar.org/paper/986db22014e0523c762ba3f186aaf9320e5d8ba7},
abstract = {To fight the ever-increasing proliferation of novel malware, antivirus (AV) vendors have turned to emulation-based automated dynamic malware analysis. Malware authors have responded by creating malware that attempts to evade detection by behaving benignly while being running in an emulator. Malware may detect emulation by looking for emulator "fingerprints" such as unique environmental values, timing inconsistencies, or bugs in CPU emulation. 
 
Due to their immense complexity and the expert knowledge required to effectively analyze them, reverse-engineering AV emulators to discover fingerprints is an extremely challenging task. As an alternative, researchers have demonstrated fingerprinting attacks using simple black-box testing, but these techniques are slow, inefficient, and generally awkward to use. 
 
We propose a novel black-box technique to efficiently extract emulator fingerprints without reverse-engineering. To demonstrate our technique, we implemented an easy-to-use tool and API called AVLeak. We present an evaluation of AVLeak against several current consumer AVs and show emulator fingerprints derived from our experimentation. We also propose a classification of fingerprints as they apply to consumer AV emulators. Finally, we discuss the defensive implications of our work, and future directions of research in emulator evasion and exploitation.},
author = {Jeremy Blackthorne and Alexei Bulazel and Andrew Fasano and Patrick Biernat and B. Yener},
}

@article{c2e31301d6f5cf3688ae3145c5535a92e1b8a114,
title = {Evolution of evasive malwares: A survey},
year = {2016},
url = {https://www.semanticscholar.org/paper/c2e31301d6f5cf3688ae3145c5535a92e1b8a114},
abstract = {The threat of malware is perpetual in digital computing systems. To counter the infection, malware industries and analysts have been coming with cutting-edge solutions and preventive measures for various categories of malware threats. At the same time malware authors are putting consistent efforts to evade security solutions and prevention systems. In this paper we will discuss about indispensable need to study and analyze the effects of evasive malwares on analysis systems. Malicious intention of malware authors can be to harm the systems without being detected such that their malware can reside into the system for longer duration. This paper discusses number of techniques which has been found in evasive malwares to elude the malware solutions. We will discuss about piles of evasive technique that might be possible in next generation malwares. Also this paper can assists to build the hardened malware analysis environments such that chances of elusion by the evasive malwares can be diminished.},
author = {Ashish Jadhav and Deepti Vidyarthi and M. Hemavathy},
journal = {2016 International Conference on Computational Techniques in Information and Communication Technologies (ICCTICT)},
volume = {},
pages = {641-646},
doi = {10.1109/ICCTICT.2016.7514657},
}

@article{ee96b678fa0e7fcee6a489ecff786b62fe95e0dd,
title = {V2E: combining hardware virtualization and softwareemulation for transparent and extensible malware analysis},
year = {2012},
url = {https://www.semanticscholar.org/paper/ee96b678fa0e7fcee6a489ecff786b62fe95e0dd},
abstract = {A transparent and extensible malware analysis platform is essential for defeating malware. This platform should be transparent so malware cannot easily detect and bypass it. It should also be extensible to provide strong support for heavyweight instrumentation and analysis efficiency. However, no existing platform can meet both requirements. Leveraging hardware virtualization technology, analysis platforms like Ether can achieve good transparency, but its instrumentation support and analysis efficiency is poor. In contrast, software emulation provides strong support for code instrumentation and good analysis efficiency by using dynamic binary translation. However, analysis platforms based on software emulation can be easily detected by malware and thus is poor in transparency. To achieve both transparency and extensibility, we propose a new analysis platform that combines hardware virtualization and software emulation. The essence is precise heterogeneous replay: the malware execution is recorded via hardware virtualization and then replayed in software. Our design ensures the execution replay is precise. Moreover, with page-level recording granularity, the platform can easily adjust to analyze various forms of malware (a process, a kernel module, or a shared library). We implemented a prototype called V2E and demonstrated its capability and efficiency by conducting an extensive evaluation with both synthetic samples and 14 realworld emulation-resistant malware samples.},
author = {Lok K. Yan and Manjukumar Jayachandra and Mu Zhang and Heng Yin},
doi = {10.1145/2151024.2151053},
}

@article{73c6a2a9ea28c0008582503e8265f70c16167100,
title = {Spotless Sandboxes: Evading Malware Analysis Systems Using Wear-and-Tear Artifacts},
year = {2017},
url = {https://www.semanticscholar.org/paper/73c6a2a9ea28c0008582503e8265f70c16167100},
abstract = {Malware sandboxes, widely used by antivirus companies, mobile application marketplaces, threat detection appliances, and security researchers, face the challenge of environment-aware malware that alters its behavior once it detects that it is being executed on an analysis environment. Recent efforts attempt to deal with this problem mostly by ensuring that well-known properties of analysis environments are replaced with realistic values, and that any instrumentation artifacts remain hidden. For sandboxes implemented using virtual machines, this can be achieved by scrubbing vendor-specific drivers, processes, BIOS versions, and other VM-revealing indicators, while more sophisticated sandboxes move away from emulation-based and virtualization-based systems towards bare-metal hosts. We observe that as the fidelity and transparency of dynamic malware analysis systems improves, malware authors can resort to other system characteristics that are indicative of artificial environments. We present a novel class of sandbox evasion techniques that exploit the "wear and tear" that inevitably occurs on real systems as a result of normal use. By moving beyond how realistic a system looks like, to how realistic its past use looks like, malware can effectively evade even sandboxes that do not expose any instrumentation indicators, including bare-metal systems. We investigate the feasibility of this evasion strategy by conducting a large-scale study of wear-and-tear artifacts collected from real user devices and publicly available malware analysis services. The results of our evaluation are alarming: using simple decision trees derived from the analyzed data, malware can determine that a system is an artificial environment and not a real user device with an accuracy of 92.86%. As a step towards defending against wear-and-tear malware evasion, we develop statistical models that capture a system's age and degree of use, which can be used to aid sandbox operators in creating system images that exhibit a realistic wear-and-tear state.},
author = {N. Miramirkhani and Mahathi Priya Appini and Nick Nikiforakis and M. Polychronakis},
journal = {2017 IEEE Symposium on Security and Privacy (SP)},
volume = {},
pages = {1009-1024},
doi = {10.1109/SP.2017.42},
}

@article{7a2254e0b0a3d72af03ea85cc6e74671e1838791,
title = {SandPrint: Fingerprinting Malware Sandboxes to Provide Intelligence for Sandbox Evasion},
year = {2016},
url = {https://www.semanticscholar.org/paper/7a2254e0b0a3d72af03ea85cc6e74671e1838791},
abstract = {To cope with the ever-increasing volume of malware samples, automated program analysis techniques are inevitable. Malware sandboxes in particular have become the de facto standard to extract a program’s behavior. However, the strong need to automate program analysis also bears the risk that anyone that can submit programs to learn and leak the characteristics of a particular sandbox.},
author = {Akira Yokoyama and Kou Ishii and Rui Tanabe and Y. Papa and K. Yoshioka and Tsutomu Matsumoto and Takahiro Kasama and D. Inoue and Michael Brengel and M. Backes and C. Rossow},
doi = {10.1007/978-3-319-45719-2_8},
}
