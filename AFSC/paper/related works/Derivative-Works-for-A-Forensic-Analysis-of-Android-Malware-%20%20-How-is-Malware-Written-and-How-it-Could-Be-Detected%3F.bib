@article{a54e5957b5f27f15cfc4967a33f92decbff31e0b,
title = {A Taxonomy and Qualitative Comparison of Program Analysis Techniques for Security Assessment of Android Software},
year = {2017},
url = {https://semanticscholar.org/paper/a54e5957b5f27f15cfc4967a33f92decbff31e0b},
abstract = {In parallel with the meteoric rise of mobile software, we are witnessing an alarming escalation in the number and sophistication of the security threats targeted at mobile platforms, particularly Android, as the dominant platform. While existing research has made significant progress towards detection and mitigation of Android security, gaps and challenges remain. This paper contributes a comprehensive taxonomy to classify and characterize the state-of-the-art research in this area. We have carefully followed the systematic literature review process, and analyzed the results of more than 300 research papers, resulting in the most comprehensive and elaborate investigation of the literature in this area of research. The systematic analysis of the research literature has revealed patterns, trends, and gaps in the existing literature, and underlined key challenges and opportunities that will shape the focus of future research efforts.},
author = {Alireza Sadeghi and Hamid Bagheri and Joshua Garcia and S. Malek},
journal = {IEEE Transactions on Software Engineering},
volume = {43},
pages = {492-530},
doi = {10.1109/TSE.2016.2615307},
}

@article{b20ed8fe63f66c25b6173efb6cf95c940b2c84a8,
title = {Efficient Permission-Aware Analysis of Android Apps},
year = {2017},
url = {https://semanticscholar.org/paper/b20ed8fe63f66c25b6173efb6cf95c940b2c84a8},
abstract = {Author(s): Sadeghi, Alireza | Advisor(s): Malek, Sam | Abstract: Permissions are the cornerstone for Android security model, as they enable secure access to sensitive resources of the phone. Consequently, improper use of Android permission model can lead to permission-induced issues that disrupt the functional and nonfunctional behavior of the apps. However, due to the lack of automated tools for detecting such issues, many of those defects are shipped with the final product, which not only dissatisfies end users but also poses security risks to their phones. This dissertation proposes and describes a set of automated tools, namely Covert, Separ, Terminator, and PATDroid, to detect and prevent permission-induced issues in Android apps, specifically (I) permission-induced security attacks, and (II) permission-induced compatibility defects.Through combining static analysis with formal methods, Covert and Separ provide compositional analysis and enforcement techniques, respectively, for detection and prevention of permission-induced security attacks, particularly those that occur due to the interaction of multiple apps. However, by ignoring the temporal aspects of an attack, Covert and Separ, as well as the other techniques aimed at protecting the users against permission-induced attacks, are prone to have low-coverage in detection and high-disruption in prevention of such attacks. Terminator addresses this shortcoming by incorporating the notion of time in both detection and prevention of the attacks. Terminator leverages temporal logic model checking to detect permission-induced threats, and then relies on Androidâ€™s dynamic permission mechanism to thwart the identified threats by revoking unsafe permissions. However, such countermeasure, i.e., permission revocation, could itself result in other defects, such as crash, if the target app suffers from dynamic-permission-compatibility issue. To identify such permission-induced compatibility defects, developers need to exhaustively re-execute tests for all possible permission combinations, thereby increasing the time and resources required to test apps. PATDroid, the last proposed approach in this dissertation, is intended to help app developers with this challenge. PATDroid can significantly reduce the testing effort by performing a hybrid program analysis that determines which tests should be executed on what permission combinations. All conducted experiments corroborate the effectiveness and efficiency of Covert, Separ, Terminator, and PATDroid and their ability to identify and eliminate the defects rooted in permission misuse of Android apps.},
author = {Alireza Sadeghi},
}

@article{e452248e14963da24d32ec70a4f0d5fed4a16885,
title = {A malware analysis and detection system for mobile devices / Ali Feizollah},
year = {2017},
url = {https://semanticscholar.org/paper/e452248e14963da24d32ec70a4f0d5fed4a16885},
abstract = {Smartphones, tablets, and other mobile devices have quickly become ubiquitous due to their highly personal and powerful attributes. Android has been the most popular mobile operating system. Such popularity, however, also extends to attackers. The amount of Android malware has risen steeply during the last few years, making it the most targeted mobile operating system. Although there have been important advances made on malware analysis and detection in traditional PCs during recent decades, adopting and adapting those methods to mobile devices poses a considerable challenge. Power consumption is one major constraint that makes traditional detection methods impractical for mobile devices, while cloud-based techniques raise many privacy concerns. This study examines the problem of Android malware, and aims to develop and implement new approaches to help users confront such threats more effectively, considering the limitations of these devices. First, we present a comprehensive analysis on the development of mobile malware, specifically Android, over recent years, as well as the most useful and salient analysis and detection methods for Android malware. We also discuss a compilation of available tools for Android malware analysis. Secondly, we propose a number of new and distinctive Android malware analysis and detection methods. More specifically, we introduce AndroDialysis, which is a static analysis method. Recent research has focused on analysing Android Intent in the XML file. We propose a new method of analysing Android Intent in Java code, which includes implicit intent and explicit intent. We used a Drebin data sample, which is a collection of 5,560 applications, as well as clean data sample containing 1,846 applications. The results show a detection rate of 91% using Android Intent against 83% using Android permission. We also introduce a dynamic analysis method, AndroPsychology, in order to analyse the network communications of Android applications. We extracted 30 different features from network traffic. We then used feature selection algorithms and deep learning algorithms to build a detection model. The results show that network traffic is an appropriate candidate for Android malware detection. Finally, we assembled AndroDialysis and AndroPsychology in order to build a comprehensive analysis and detection system for Android, called DroidProtect. Unlike current systems that either perform analyses on the device or send the whole application to a server for analyses, our system has the distinction of extracting features on the device and analysing them on the Google App Engine servers using an offloading technique. Our extensive experiments show that the energy consumption of the proposed system is less than currently available systems.},
author = {Feizollah Ali},
}

@article{7b0fed6d2711c290e9c936634eecb5b6704d5e29,
title = {Design and implementation of an Android host-based intrusion prevention system},
year = {2014},
url = {https://semanticscholar.org/paper/7b0fed6d2711c290e9c936634eecb5b6704d5e29},
abstract = {Android has a dominating share in the mobile market and there is a significant rise of mobile malware targeting Android devices. Android malware accounted for 97% of all mobile threats in 2013 [26]. To protect smartphones and prevent privacy leakage, companies have implemented various host-based intrusion prevention systems (HIPS) on their Android devices. In this paper, we first analyze the implementations, strengths and weaknesses of three popular HIPS architectures. We demonstrate a severe loophole and weakness of an existing popular HIPS product in which hackers can readily exploit. Then we present a design and implementation of a secure and extensible HIPS platform---"Patronus." Patronus not only provides intrusion prevention without the need to modify the Android system, it can also dynamically detect existing malware based on runtime information. We propose a two-phase dynamic detection algorithm for detecting running malware. Our experiments show that Patronus can prevent the intrusive behaviors efficiently and detect malware accurately with a very low performance overhead and power consumption.},
author = {Mingshen Sun and Min Zheng and J. Lui and Xuxian Jiang},
journal = {Proceedings of the 30th Annual Computer Security Applications Conference},
volume = {},
pages = {},
doi = {10.1145/2664243.2664245},
}

@article{39861b52b52cc2a7f9e574560052f39197e51111,
title = {A Taxonomy and Qualitative Comparison of Program Analysis Techniques for Security Assessment of Android Apps},
year = {2016},
url = {https://semanticscholar.org/paper/39861b52b52cc2a7f9e574560052f39197e51111},
abstract = {In parallel with the meteoric rise of mobile software, we are witnessing an alarming escalation in the number and sophistication of the security threats targeted at mobile platforms, particularly Android, as the dominant platform. While existing research has made significant progress towards detection and mitigation of Android security, gaps and challenges remain. This paper contributes a comprehensive taxonomy to classify and characterize the state-of-the-art research in this area. We have carefully followed the systematic literature review process, and analyzed the results of more than 100 research papers, resulting in the most comprehensive and elaborate investigation of the literature in this area of research. The systematic analysis of the research literature has revealed patterns, trends, and gaps in the existing literature, and underlined key challenges and opportunities that will shape the focus of future research efforts.},
author = {Alireza Sadeghi and Hamid Bagheri and Joshua Garcia and S. Malek},
}

@article{8b89e3d7cf1e7b5c24d66b2af346a52d145cad11,
title = {Investigating Android permissions and intents for malware detection},
year = {2018},
url = {https://semanticscholar.org/paper/8b89e3d7cf1e7b5c24d66b2af346a52d145cad11},
abstract = {Todayâ€™s smart phones are used for wider range of activities. This extended range of functionalities has also seen the infiltration of new security threats. Android has been the favorite target of cyber criminals. The malicious parties are using highly stealthy techniques to perform the targeted operations, which are hard to detect by the conventional signature and behaviour based approaches. Additionally, the limited resources of mobile device are inadequate to perform the extensive malware detection tasks. Impulsively emerging Android malware merit a robust and effective malware detection solution. 
 
In this thesis, we present the PIndroid â€• a novel Permissions and Intents based framework for identifying Android malware apps. To the best of authorâ€™s knowledge, PIndroid is the first solution that uses a combination of permissions and intents supplemented with ensemble methods for malware detection. It overcomes the drawbacks of some of the existing malware detection methods. Our goal is to provide mobile users with an effective malware detection and prevention solution keeping in view the limited resources of mobile devices and versatility of malware behavior. Our detection engine classifies the apps against certain distinguishing combinations of permissions and intents. We conducted a comparative study of different machine learning algorithms against several performance measures to demonstrate their relative advantages. The proposed approach, when applied to 1,745 real world applications, provides more than 99% accuracy (which is best reported to date). Empirical results suggest that the proposed framework is effective in detection of malware apps including the obfuscated ones. 
 
In this thesis, we also present AndroPInâ€”an Android based malware detection algorithm using Permissions and Intents. It is designed with the methodology proposed in PInDroid. AndroPIn overcomes the limitation of stealthy techniques used by malware by exploiting the usage pattern of permissions and intents. These features, which play a major role in sharing user data and device resources cannot be obfuscated or altered. These vital features are well suited for resource constrained smartphones. Experimental evaluation on a corpus of real-world malware and benign apps demonstrate that the proposed algorithm can effectively detect malicious apps and is resilient to common obfuscations methods. 
 
Besides PInDroid and AndroPIn, this thesis consists of three additional studies, which supplement the proposed methodology. First study investigates if there is any correlation between permissions and intents which can be exploited to detect malware apps. For this, the statistical significance test is applied to investigate the correlation between permissions and intents. We found statistical evidence of a strong correlation between permissions and intents which could be exploited to detect malware applications. 
 
The second study is conducted to investigate if the performance of classifiers can further be improved with ensemble learning methods. We applied different ensemble methods such as bagging, boosting and stacking. The experiments with ensemble methods yielded much improved results. 
 
The third study is related to investigating if the permissions and intents based system can be used to detect the ever challenging colluding apps. Application collusion is an emerging threat to Android based devices. We discuss the current state of research on app collusion and open challenges to the detection of colluding apps. We compare existing approaches and present an integrated approach that can be used to detect the malicious app collusion.},
author = {F. I. Abro},
}

@article{2dd06097c9b30d70ace669ead8bd611aa32ec035,
title = {A security framework for mobile health applications on android platform / Muzammil Hussain},
year = {2017},
url = {https://semanticscholar.org/paper/2dd06097c9b30d70ace669ead8bd611aa32ec035},
abstract = {The advent of smartphones dramatically changed the way of communication, computation, and the model of many services, including healthcare delivery. The adoption of smartphones in the healthcare system is rapidly growing, and enormous number of apps are being developed to monitor patient health, access patient records, test results, prescribe medications, and for numerous related purposes under the collective term of mobile Health (mHealth). These apps are readily accessible to the average user of mobile devices, and despite the potential of mHealth apps to improve the availability, affordability and effectiveness of delivering healthcare services, they handle sensitive medical data, and as such, have also the potential to carry substantial risks to the security and privacy of their users. Developers of apps are usually unknown, and users are unaware of how their data are being managed and used. This is combined with the emergence of new threats due to the deficiency in mobile apps development or the design ambiguities of the current mobile operating systems. A number of mobile operating systems are available in the market, but the Android platform has gained the topmost popularity. However, Android security model is short of completely ensuring the privacy and security of usersâ€™ data, including the data of mHealth apps. Despite the security mechanisms provided by Android such as permissions and sandboxing, mHealth apps are still plagued by serious privacy and security issues. These security issues need to be addressed in order to improve the acceptance of mHealth apps among users and the efficacy of mHealth apps in the healthcare system. The focus of this research is on the security of mHealth apps, and the main objective is to propose a coherent, practical and efficient framework to improve the security of medical data associated with Android mHealth apps, as well as to protect the privacy of their users. The proposed framework provides its intended protection mainly through a set of security checks and policies that ensure protection against traditional as well as recently published threats to mHealth apps. The design of the framework comprises two layers: a Security Module Layer (SML) that implements the security-check modules, and a System Interface Layer (SIL) that interfaces SML to the Android OS. SML enforces security and privacy policies at different levels of Android platform through SIL. The proposed framework is validated via a prototypic implementation on actual Android devices to show its practicality and evaluate its performance. The framework is evaluated in terms of effectiveness and efficiency. Effectiveness is evaluated by demonstrating the performance of the framework against a selected set of attacks, while efficiency is evaluated by comparing the performance overhead in terms of energy consumption, memory and CPU utilization, with the performance of a mainline, stock version of Android. Results of the experimental evaluations showed that the proposed framework can successfully protect mHealth apps against a wide range of attacks with negligible overhead, so it is both effective and practical. Furthermore, this framework is available to other researchers for research purposes as well as for real-world deployments.},
author = {H. Muzammil},
}

@article{dc8262aa1c59e2a8b74579d3c890d427409c8bbf,
title = {Systematic discovery of Android customization hazards},
year = {2016},
url = {https://semanticscholar.org/paper/dc8262aa1c59e2a8b74579d3c890d427409c8bbf},
abstract = {The open nature of Android ecosystem has naturally laid the foundation for a highly fragmented operating system. In fact, the official AOSP versions have been aggressively customized into thousands of system images by everyone in the customization chain, such as device manufacturers, vendors, carriers, etc. If not well thought-out, the customization process could result in serious security problems. This dissertation performs a systematic investigation of Android customizationâ€™ inconsistencies with regards to security aspects at various Android layers. It brings to light new vulnerabilities, never investigated before, caused by the under-regulated and complex Android customization. It first describes a novel vulnerability Hare and proves that it is security critical and extensive affecting devices from major vendors. A new tool is proposed to detect the Hare problem and to protect affected devices. This dissertation further discovers security configuration changes through a systematic differential analysis among custom devices from different vendors and demonstrates that they could lead to severe vulnerabilities if introduced unintentionally. SYSTEMATIC DISCOVERY OF ANDROID CUSTOMIZATION HAZARDS by Yousra, Aafer M.S., Syracuse University, December 2011 Dissertation Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Electrical and Computer Engineering Syracuse University August 2016 Â© Copyright 2016 Yousra, Aafer All Rights Reserved},
author = {Yousra Aafer},
}

@article{45674ab89637524d50f4fd232c9c4983a91c9968,
title = {Toward Engineering a Secure Android Ecosystem},
year = {2016},
url = {https://semanticscholar.org/paper/45674ab89637524d50f4fd232c9c4983a91c9968},
abstract = {The openness and extensibility of Android have made it a popular platform for mobile devices and a strong candidate to drive the Internet-of-Things. Unfortunately, these properties also leave Android vulnerable, attracting attacks for profit or fun. To mitigate these threats, numerous issue-specific solutions have been proposed. With the increasing number and complexity of security problems and solutions, we believe this is the right moment to step back and systematically re-evaluate the Android security architecture and security practices in the ecosystem. We organize the most recent security research on the Android platform into two categories: the software stack and the ecosystem. For each category, we provide a comprehensive narrative of the problem space, highlight the limitations of the proposed solutions, and identify open problems for future research. Based on our collection of knowledge, we envision a blueprint for engineering a secure, next-generation Android ecosystem.},
author = {Meng Xu and Chengyu Song and Yang Ji and Ming-Wei Shih and K. Lu and Cong Zheng and Ruian Duan and Yeongjin Jang and Byoungyoung Lee and Chenxiong Qian and S. Lee and Taesoo Kim},
journal = {ACM Computing Surveys (CSUR)},
volume = {49},
pages = {1 - 47},
doi = {10.1145/2963145},
}

@article{9a4a5302499c7faf51c2888635336854c74ebe91,
title = {Empirical study of malware diversity in major Android markets},
year = {2018},
url = {https://semanticscholar.org/paper/9a4a5302499c7faf51c2888635336854c74ebe91},
abstract = {ABSTRACT The popularity of Android has motivated a significant increase in the amount of malware specially designed to target this operating system. During the last years, the threat has become more serious and every day cybercriminals create and share new specimens through almost all existing markets. This situation has promoted a notable research interest in the development of automated malware detection and classification systems. In this paper, we perform a large-scale empirical study to examine the diversity of Android malware in major markets. Through the analysis of more than 5 million of apps, we use the labels assigned by 57 different anti-malware vendors and diversity measures to get insights about the distribution and evolution of Android malware. Furthermore, we propose a dissimilarity measure for comparing these labels, which can be applied as part of an agglomerative hierarchical clustering algorithm. This clustering method groups the labels according to the scanning reports of different anti-malware vendors. The results obtained make evident an increase in the diversification of malware in both official and alternative markets. Moreover, we show how the criteria of various anti-malware, in conjunction with clustering techniques, is a suitable approach for grouping and analysing malware samples that perform a similar behaviour.},
author = {C. Soto-Valero and Mabel GonzÃ¡lez},
journal = {Journal of Cyber Security Technology},
volume = {2},
pages = {51 - 74},
doi = {10.1080/23742917.2018.1483876},
}
