@article{48322738d25efe1b1d8f8426320367f0c8ab3b2d,
title = {TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones},
year = {2010},
url = {https://semanticscholar.org/paper/48322738d25efe1b1d8f8426320367f0c8ab3b2d},
abstract = {Today’s smartphone operating systems frequently fail to provide users with visibility into how third-party applications collect and share their private data. We address these shortcomings with TaintDroid, an efficient, system-wide dynamic taint tracking and analysis system capable of simultaneously tracking multiple sources of sensitive data. TaintDroid enables realtime analysis by leveraging Android’s virtualized execution environment. TaintDroid incurs only 32p performance overhead on a CPU-bound microbenchmark and imposes negligible overhead on interactive third-party applications. Using TaintDroid to monitor the behavior of 30 popular third-party Android applications, in our 2010 study we found 20 applications potentially misused users’ private information; so did a similar fraction of the tested applications in our 2012 study. Monitoring the flow of privacy-sensitive data with TaintDroid provides valuable input for smartphone users and security service firms seeking to identify misbehaving applications.},
author = {William Enck and Peter Gilbert and Byung-Gon Chun and L. Cox and Jaeyeon Jung and P. Mcdaniel and Anmol Sheth},
journal = {ACM Trans. Comput. Syst.},
volume = {32},
pages = {5:1-5:29},
doi = {10.1145/2619091},
}

@article{a25cec5c05ffcbda885044d0c67bfdc698adcccd,
title = {A Study of Android Application Security},
year = {2011},
url = {https://semanticscholar.org/paper/a25cec5c05ffcbda885044d0c67bfdc698adcccd},
abstract = {The fluidity of application markets complicate smartphone security. Although recent efforts have shed light on particular security issues, there remains little insight into broader security characteristics of smartphone applications. This paper seeks to better understand smartphone application security by studying 1,100 popular free Android applications. We introduce the ded decompiler, which recovers Android application source code directly from its installation image. We design and execute a horizontal study of smartphone applications based on static analysis of 21 million lines of recovered code. Our analysis uncovered pervasive use/misuse of personal/ phone identifiers, and deep penetration of advertising and analytics networks. However, we did not find evidence of malware or exploitable vulnerabilities in the studied applications. We conclude by considering the implications of these preliminary findings and offer directions for future analysis.},
author = {William Enck and Damien Octeau and P. Mcdaniel and Swarat Chaudhuri},
}

@article{a7e8910b74715175cb20d9a08d34b3541060076b,
title = {On lightweight mobile phone application certification},
year = {2009},
url = {https://semanticscholar.org/paper/a7e8910b74715175cb20d9a08d34b3541060076b},
abstract = {Users have begun downloading an increasingly large number of mobile phone applications in response to advancements in handsets and wireless networks. The increased number of applications results in a greater chance of installing Trojans and similar malware. In this paper, we propose the Kirin security service for Android, which performs lightweight certification of applications to mitigate malware at install time. Kirin certification uses security rules, which are templates designed to conservatively match undesirable properties in security configuration bundled with applications. We use a variant of security requirements engineering techniques to perform an in-depth security analysis of Android to produce a set of rules that match malware characteristics. In a sample of 311 of the most popular applications downloaded from the official Android Market, Kirin and our rules found 5 applications that implement dangerous functionality and therefore should be installed with extreme caution. Upon close inspection, another five applications asserted dangerous rights, but were within the scope of reasonable functional needs. These results indicate that security configuration bundled with Android applications provides practical means of detecting malware.},
author = {William Enck and Machigar Ongtang and P. Mcdaniel},
doi = {10.1145/1653662.1653691},
}

@article{b8d88ea73e69f4a6dfb6df79e685165f09244fa6,
title = {These aren't the droids you're looking for: retrofitting android to protect data from imperious applications},
year = {2011},
url = {https://semanticscholar.org/paper/b8d88ea73e69f4a6dfb6df79e685165f09244fa6},
abstract = {We examine two privacy controls for Android smartphones that empower users to run permission-hungry applications while protecting private data from being exfiltrated: (1) covertly substituting shadow data in place of data that the user wants to keep private, and (2) blocking network transmissions that contain data the user made available to the application for on-device use only. We retrofit the Android operating system to implement these two controls for use with unmodified applications. A key challenge of imposing shadowing and exfiltration blocking on existing applications is that these controls could cause side effects that interfere with user-desired functionality. To measure the impact of side effects, we develop an automated testing methodology that records screenshots of application executions both with and without privacy controls, then automatically highlights the visual differences between the different executions. We evaluate our privacy controls on 50 applications from the Android Market, selected from those that were both popular and permission-hungry. We find that our privacy controls can successfully reduce the effective permissions of the application without causing side effects for 66% of the tested applications. The remaining 34% of applications implemented user-desired functionality that required violating the privacy requirements our controls were designed to enforce; there was an unavoidable choice between privacy and user-desired functionality.},
author = {Peter Hornyack and Seungyeop Han and Jaeyeon Jung and Stuart E. Schechter and D. Wetherall},
doi = {10.1145/2046707.2046780},
}

@article{12ef153d9c7ccc374d56acf34b59fb2eaec6f755,
title = {Dissecting Android Malware: Characterization and Evolution},
year = {2012},
url = {https://semanticscholar.org/paper/12ef153d9c7ccc374d56acf34b59fb2eaec6f755},
abstract = {The popularity and adoption of smart phones has greatly stimulated the spread of mobile malware, especially on the popular platforms such as Android. In light of their rapid growth, there is a pressing need to develop effective solutions. However, our defense capability is largely constrained by the limited understanding of these emerging mobile malware and the lack of timely access to related samples. In this paper, we focus on the Android platform and aim to systematize or characterize existing Android malware. Particularly, with more than one year effort, we have managed to collect more than 1,200 malware samples that cover the majority of existing Android malware families, ranging from their debut in August 2010 to recent ones in October 2011. In addition, we systematically characterize them from various aspects, including their installation methods, activation mechanisms as well as the nature of carried malicious payloads. The characterization and a subsequent evolution-based study of representative families reveal that they are evolving rapidly to circumvent the detection from existing mobile anti-virus software. Based on the evaluation with four representative mobile security software, our experiments show that the best case detects 79.6% of them while the worst case detects only 20.2% in our dataset. These results clearly call for the need to better develop next-generation anti-mobile-malware solutions.},
author = {Yajin Zhou and Xuxian Jiang},
journal = {2012 IEEE Symposium on Security and Privacy},
volume = {},
pages = {95-109},
doi = {10.1109/SP.2012.16},
}

@article{e4f7e5a5886c06f3f84e1256941ceb3d149471bf,
title = {Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets},
year = {2012},
url = {https://semanticscholar.org/paper/e4f7e5a5886c06f3f84e1256941ceb3d149471bf},
abstract = {In this paper, we present a systematic study for the detection of malicious applications (or apps) on popular Android Markets. To this end, we first propose a permissionbased behavioral footprinting scheme to detect new samples of known Android malware families. Then we apply a heuristics-based filtering scheme to identify certain inherent behaviors of unknown malicious families. We implemented both schemes in a system called DroidRanger. The experiments with 204, 040 apps collected from five different Android Markets in May-June 2011 reveal 211 malicious ones: 32 from the official Android Market (0.02% infection rate) and 179 from alternative marketplaces (infection rates ranging from 0.20% to 0.47%). Among those malicious apps, our system also uncovered two zero-day malware (in 40 apps): one from the official Android Market and the other from alternative marketplaces. The results show that current marketplaces are functional and relatively healthy. However, there is also a clear need for a rigorous policing process, especially for non-regulated alternative marketplaces.},
author = {Yajin Zhou and Zhi Wang and Wu Zhou and Xuxian Jiang},
}

@article{bd736ada1822b69e13d5a5aa68acc84cb9c5fb36,
title = {Android permissions demystified},
year = {2011},
url = {https://semanticscholar.org/paper/bd736ada1822b69e13d5a5aa68acc84cb9c5fb36},
abstract = {Android provides third-party applications with an extensive API that includes access to phone hardware, settings, and user data. Access to privacy- and security-relevant parts of the API is controlled with an install-time application permission system. We study Android applications to determine whether Android developers follow least privilege with their permission requests. We built Stowaway, a tool that detects overprivilege in compiled Android applications. Stowaway determines the set of API calls that an application uses and then maps those API calls to permissions. We used automated testing tools on the Android API in order to build the permission map that is necessary for detecting overprivilege. We apply Stowaway to a set of 940 applications and find that about one-third are overprivileged. We investigate the causes of overprivilege and find evidence that developers are trying to follow least privilege but sometimes fail due to insufficient API documentation.},
author = {A. Felt and Erika Chin and Steve Hanna and D. Song and David A. Wagner},
doi = {10.1145/2046707.2046779},
}

@article{4d5b0fe49e7fa08b252af70e890a58b49353fc17,
title = {Apex: extending Android permission model and enforcement with user-defined runtime constraints},
year = {2010},
url = {https://semanticscholar.org/paper/4d5b0fe49e7fa08b252af70e890a58b49353fc17},
abstract = {Android is the first mass-produced consumer-market open source mobile platform that allows developers to easily create applications and users to readily install them. However, giving users the ability to install third-party applications poses serious security concerns. While the existing security mechanism in Android allows a mobile phone user to see which resources an application requires, she has no choice but to allow access to all the requested permissions if she wishes to use the applications. There is no way of granting some permissions and denying others. Moreover, there is no way of restricting the usage of resources based on runtime constraints such as the location of the device or the number of times a resource has been previously used. In this paper, we present Apex -- a policy enforcement framework for Android that allows a user to selectively grant permissions to applications as well as impose constraints on the usage of resources. We also describe an extended package installer that allows the user to set these constraints through an easy-to-use interface. Our enforcement framework is implemented through a minimal change to the existing Android code base and is backward compatible with the current security mechanism.},
author = {M. Nauman and Sohail Khan and Xinwen Zhang},
doi = {10.1145/1755688.1755732},
}

@article{75d70671eee7ead26c5636fe5d1e00fef5d993b3,
title = {Taming Information-Stealing Smartphone Applications (on Android)},
year = {2011},
url = {https://semanticscholar.org/paper/75d70671eee7ead26c5636fe5d1e00fef5d993b3},
abstract = {Smartphones have been becoming ubiquitous and mobile users are increasingly relying on them to store and handle personal information. However, recent studies also reveal the disturbing fact that users' personal information is put at risk by (rogue) smartphone applications. Existing solutions exhibit limitations in their capabilities in taming these privacy-violating smartphone applications. In this paper, we argue for the need of a new privacy mode in smartphones. The privacy mode can empower users to flexibly control in a fine-grained manner what kinds of personal information will be accessible to an application. Also, the granted access can be dynamically adjusted at runtime in a fine-grained manner to better suit a user's needs in various scenarios (e.g., in a different time or location). We have developed a system called TISSA that implements such a privacy mode on Android. The evaluation with more than a dozen of information-leaking Android applications demonstrates its effectiveness and practicality. Furthermore, our evaluation shows that TISSA introduces negligible performance overhead.},
author = {Yajin Zhou and Xinwen Zhang and Xuxian Jiang and V. Freeh},
doi = {10.1007/978-3-642-21599-5_7},
}

@article{b444e56f31694b3ba4b14f91b4b3d1a8ebc19830,
title = {A survey of mobile malware in the wild},
year = {2011},
url = {https://semanticscholar.org/paper/b444e56f31694b3ba4b14f91b4b3d1a8ebc19830},
abstract = {Mobile malware is rapidly becoming a serious threat. In this paper, we survey the current state of mobile malware in the wild. We analyze the incentives behind 46 pieces of iOS, Android, and Symbian malware that spread in the wild from 2009 to 2011. We also use this data set to evaluate the effectiveness of techniques for preventing and identifying mobile malware. After observing that 4 pieces of malware use root exploits to mount sophisticated attacks on Android phones, we also examine the incentives that cause non-malicious smartphone tinkerers to publish root exploits and survey the availability of root exploits.},
author = {A. Felt and Matthew Finifter and Erika Chin and Steve Hanna and David A. Wagner},
doi = {10.1145/2046614.2046618},
}
