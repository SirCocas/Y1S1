@article{e0217797dcaf8f4c2548a2266324f0a3ac7342d6,
title = {Malware Dynamic Analysis Evasion Techniques},
year = {2020},
url = {https://semanticscholar.org/paper/e0217797dcaf8f4c2548a2266324f0a3ac7342d6},
abstract = {The cyber world is plagued with ever-evolving malware that readily infiltrate all defense mechanisms, operate viciously unbeknownst to the user, and surreptitiously exfiltrate sensitive data. Understanding the inner workings of such malware provides a leverage to effectively combat them. This understanding is pursued often through dynamic analysis which is conducted manually or automatically. Malware authors accordingly, have devised and advanced evasion techniques to thwart or evade these analyses. In this article, we present a comprehensive survey on malware dynamic analysis evasion techniques. In addition, we propose a detailed classification of these techniques and further demonstrate how their efficacy holds against different types of detection and analysis approaches. Our observations attest that evasive behavior is mostly concerned with detecting and evading sandboxes. The primary tactic of such malware we argue is fingerprinting followed by new trends for reverse Turing test tactic which aims at detecting human interaction. Furthermore, we will posit that the current defensive strategies, beginning with reactive methods to endeavors for more transparent analysis systems, are readily foiled by zero-day fingerprinting techniques or other evasion tactics such as stalling. Accordingly, we would recommend the pursuit of more generic defensive strategies with an emphasis on path exploration techniques that has the potential to thwart all the evasive tactics.},
author = {Amir  Afianian and Salman  Niksefat and Babak  Sadeghiyan and David  Baptiste},
journal = {ACM Computing Surveys (CSUR)},
volume = {52},
pages = {1 - 28},
doi = {10.1145/3365001},
}

@article{7f0c1afbd8dfc8e0036e23756485361b1e0e1716,
title = {MIMOSA: Reducing Malware Analysis Overhead with Coverings},
year = {2021},
url = {https://www.semanticscholar.org/paper/7f0c1afbd8dfc8e0036e23756485361b1e0e1716},
abstract = {There is a growing body of malware samples that evade automated analysis and detection tools. Malware may measure fingerprints (”artifacts”) of the underlying analysis tool or environment, and change their behavior when artifacts are detected. While analysis tools can mitigate artifacts to reduce exposure, such concealment is expensive. However, not every sample checks for every type of artifact—analysis efficiency can be improved by mitigating only those artifacts most likely to be used by a sample. Using that insight, we propose MIMOSA, a system which identifies a small set of ”covering” tool configurations that collectively defeat most malware samples with increased efficiency. MIMOSA identifies a set of tool configurations which maximize analysis throughput and detection accuracy while minimizing manual effort, enabling scalable automation for analyzing stealthy malware. We evaluate our approach against a benchmark of 1535 labeled stealthy malware samples. Our approach increases analysis throughput over the state of the art on over 95% of these samples. We also investigate cost-benefit tradeoffs between the fraction of successfully-analyzed samples and computing resources required. MIMOSA provides a practical, tunable method for efficiently deploying analysis resources.},
author = {Mohsen Ahmadi and Kevin Leach and Ryan E. Dougherty and S. Forrest and Westley Weimer},
journal = {ArXiv},
volume = {abs/2101.07328},
pages = {},
arxivid = {2101.07328},
}

@article{5db680f254053a515f0dd1eb811fd36746fc6fa9,
title = {A Survey On Automated Dynamic Malware Analysis Evasion and Counter-Evasion: PC, Mobile, and Web},
year = {2017},
url = {https://www.semanticscholar.org/paper/5db680f254053a515f0dd1eb811fd36746fc6fa9},
abstract = {Automated dynamic malware analysis systems are important in combating the proliferation of modern malware. Unfortunately, malware can often easily detect and evade these systems. Competition between malware authors and analysis system developers has pushed each to continually evolve their tactics for countering the other.
 In this paper we systematically review i) "fingerprint"-based evasion techniques against automated dynamic malware analysis systems for PC, mobile, and web, ii) evasion detection, iii) evasion mitigation, and iv) offensive and defensive evasion case studies. We also discuss difficulties in experimental evaluation, highlight future directions in offensive and defensive research, and briefly survey related topics in anti-analysis.},
author = {Alexei Bulazel and B. Yener},
doi = {10.1145/3150376.3150378},
}

@article{b87659748b6508bd120aec204cfdfce4d0574f56,
title = {On the Dissection of Evasive Malware},
year = {2020},
url = {https://www.semanticscholar.org/paper/b87659748b6508bd120aec204cfdfce4d0574f56},
abstract = {Complex malware samples feature measures to impede automatic and manual analyses, making their investigation cumbersome. While automatic characterization of malware benefits from recently proposed designs for passive monitoring, the subsequent dissection process still sees human analysts struggling with adversarial behaviors, many of which also closely resemble those studied for automatic systems. This gap affects the day-to-day analysis of complex samples and researchers have not yet attempted to bridge it. We make a first step down this road by proposing a design that can reconcile transparency requirements with manipulation capabilities required for dissection. Our open-source prototype BluePill (i) offers a customizable execution environment that remains stealthy when analysts intervene to alter instructions and data or run third-party tools, (ii) is extensible to counteract newly encountered anti-analysis measures using insights from the dissection, and (iii) can accommodate program analyses that aid analysts, as we explore for taint analysis. On a set of highly evasive samples BluePill resulted as stealthy as commercial sandboxes while offering new intervention and customization capabilities for dissection.},
author = {Daniele Cono D'Elia and Emilio Coppa and F. Palmaro and L. Cavallaro},
journal = {IEEE Transactions on Information Forensics and Security},
volume = {15},
pages = {2750-2765},
doi = {10.1109/TIFS.2020.2976559},
}

@article{345c97e357144264e93dacb9f2b80005b26cb750,
title = {Python and Malware: Developing Stealth and Evasive Malware Without Obfuscation},
year = {2021},
url = {https://www.semanticscholar.org/paper/345c97e357144264e93dacb9f2b80005b26cb750},
abstract = {With the continuous rise of malicious campaigns and the exploitation of new attack vectors, it is necessary to assess the efficacy of the defensive mechanisms used to detect them. To this end, the contribution of our work is twofold. First, it introduces a new method for obfuscating malicious code to bypass all static checks of multi-engine scanners, such as VirusTotal. Interestingly, our approach to generating the malicious executables is not based on introducing a new packer but on the augmentation of the capabilities of an existing and widely used tool for packaging Python, PyInstaller but can be used for all similar packaging tools. As we prove, the problem is deeper and inherent in almost all antivirus engines and not PyInstaller specific. Second, our work exposes significant issues of well-known sandboxes that allow malware to evade their checks. As a result, we show that stealth and evasive malware can be efficiently developed, bypassing with ease state of the art malware detection tools without raising any alert.},
author = {Vasilios Koutsokostas and C. Patsakis},
doi = {10.5220/0010541501250136},
arxivid = {2105.00565},
}

@article{c56a311efd9388a90975ed40f34f8fd092723113,
title = {Resurrecting Anti-virtualization and Anti-debugging:},
year = {2020},
url = {https://www.semanticscholar.org/paper/c56a311efd9388a90975ed40f34f8fd092723113},
abstract = {Dynamic malware analysis involves the debugging of the associated binary files and the monitoring of changes in sandboxed environments. This allows the investigator to manipulate the code execution path and environment to develop an understanding of the malware’s internal workings, aims and modus operandi. However, the latest state of the art malware may incorporate anti-virtual environment (VM) and anti-debugging countermeasures (i.e. to determine whether the malware is being executed in a VM or using a debugger prior to payload execution). We argue that for the malware to be effective, it will need to support an array of anti-detection and evasion mechanisms. In essence, from the malware’s perspective, it needs to adopt a “defence in depth” paradigm to achieve its underlying business logic functionality. Beyond the malicious uses, software vendors to preserve the intellectual property rights of their products often resort to similar methods to deter competitors from gaining intelligence from the binaries or prevent customers from using their products in unauthorised hardware. In this work, we illustrate how Windows architecture impedes the work of debuggers when they analyse with armoured binaries. The debugger and the malware have the same privileges, so the attacker may manipulate the Email addresses: organ6667@gmail.com (Theodoros Apostolopoulos), vkatos@bournemouth.ac.uk (Vasilios Katos), raymond.choo@fulbrightmail.org (Kim-Kwang Raymond Choo), kpatsak@unipi.gr (Constantinos Patsakis) Preprint submitted to Future Generation Computer Systems November 13, 2020 address space that the debugger operates and, e.g. bypass detection. We showcase this by presenting a new framework (ANTI), which automates the procedure of integrating anti-debugging and anti-VM in the binary. Specifically, ANTI introduces an anti-hooking method targeting Windows binaries, where hooks applied by state of the art debuggers are removed and injects its code in other processes. This significantly compounds the challenge of binary analysis. Our extensive evaluation also demonstrates that ANTI successfully circumvents detection from state-of-the-art detection methods. Therefore, ANTI illustrates that current tools for dynamic analysis have serious implementation gaps that allow for binaries to bypass them. More alarmingly, ANTI shows how one can use well-known methods to “resurrect” old attacks.},
author = {T. Apostolopoulos and V. Katos and K. Choo and C. Patsakis},
}

@article{c11a9dd4e732809515a544e8fe798c8af7619aff,
title = {PiDicators: An Efficient Artifact to Detect Various VMs},
year = {2020},
url = {https://www.semanticscholar.org/paper/c11a9dd4e732809515a544e8fe798c8af7619aff},
abstract = {},
author = {Q. Huang and Haiming Li and Yun He and Jianwei Tai and Xiaoqi Jia},
doi = {10.1007/978-3-030-61078-4_15},
}

@article{be8cb756a29fd7156815d860533cbb5c0cb93015,
title = {A Systematical and Longitudinal Study of Evasive Behaviors in Windows Malware},
year = {2021},
url = {https://www.semanticscholar.org/paper/be8cb756a29fd7156815d860533cbb5c0cb93015},
abstract = {},
author = {Nicola Galloro and Mario Polino and Michele Carminati and Andrea Continella and S. Zanero},
journal = {Computers & Security},
volume = {},
pages = {},
doi = {10.1016/j.cose.2021.102550},
}

@article{95fa7082d8f7cf51ac7fec1c787c6823bb730516,
title = {Techniques Implemented in Software Protectors: A Journey with DBI Through What Protectors Use to Detect Bad Guys},
year = {2020},
url = {https://www.semanticscholar.org/paper/95fa7082d8f7cf51ac7fec1c787c6823bb730516},
abstract = {},
author = {F. Palmaro and L. Franchina},
doi = {10.1007/978-3-030-63092-8_48},
}

@article{7b69bfbf3d48de11b2307a5f3281ae0016c58558,
title = {Evasive Windows Malware: Impact on Antiviruses and Possible Countermeasures},
year = {2020},
url = {https://www.semanticscholar.org/paper/7b69bfbf3d48de11b2307a5f3281ae0016c58558},
abstract = {The perpetual opposition between antiviruses and malware leads both parties to evolve continuously. On the one hand, antiviruses put in place solutions that are more and more sophisticated and propose more complex detection techniques in addition to the classic signature analysis. This sophistication leads antiviruses to leave more traces of their presence on the machine they protect. To remain undetected as long as possible, malware can avoid executing within such environments by hunting down the modifications left by the antiviruses. This paper aims at determining the possibilities for malware to detect the antiviruses and then evaluating the efficiency of these techniques on a panel of antiviruses that are the most used nowadays. We then collect samples showing this kind of behavior and propose to evaluate a countermeasure that creates false artifacts, thus forcing malware to evade.},
author = {Cédric Herzog and Valérie Viet Triem Tong and Pierre Wilke and Arnaud Van Straaten and Jean-Louis Lanet},
journal = {ArXiv},
volume = {abs/2009.12204},
pages = {},
doi = {10.5220/0009816703020309},
arxivid = {2009.12204},
}
