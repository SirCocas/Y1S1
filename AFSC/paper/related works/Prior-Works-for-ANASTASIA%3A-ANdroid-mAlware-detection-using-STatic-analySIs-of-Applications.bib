@article{12ef153d9c7ccc374d56acf34b59fb2eaec6f755,
title = {Dissecting Android Malware: Characterization and Evolution},
year = {2012},
url = {https://www.semanticscholar.org/paper/12ef153d9c7ccc374d56acf34b59fb2eaec6f755},
abstract = {The popularity and adoption of smart phones has greatly stimulated the spread of mobile malware, especially on the popular platforms such as Android. In light of their rapid growth, there is a pressing need to develop effective solutions. However, our defense capability is largely constrained by the limited understanding of these emerging mobile malware and the lack of timely access to related samples. In this paper, we focus on the Android platform and aim to systematize or characterize existing Android malware. Particularly, with more than one year effort, we have managed to collect more than 1,200 malware samples that cover the majority of existing Android malware families, ranging from their debut in August 2010 to recent ones in October 2011. In addition, we systematically characterize them from various aspects, including their installation methods, activation mechanisms as well as the nature of carried malicious payloads. The characterization and a subsequent evolution-based study of representative families reveal that they are evolving rapidly to circumvent the detection from existing mobile anti-virus software. Based on the evaluation with four representative mobile security software, our experiments show that the best case detects 79.6% of them while the worst case detects only 20.2% in our dataset. These results clearly call for the need to better develop next-generation anti-mobile-malware solutions.},
author = {Yajin Zhou and Xuxian Jiang},
journal = {2012 IEEE Symposium on Security and Privacy},
volume = {},
pages = {95-109},
doi = {10.1109/SP.2012.16},
}

@article{0b38a236d2377068408309f1d31e5c5fc5eedd0b,
title = {DREBIN: Effective and Explainable Detection of Android Malware in Your Pocket},
year = {2014},
url = {https://www.semanticscholar.org/paper/0b38a236d2377068408309f1d31e5c5fc5eedd0b},
abstract = {Malicious applications pose a threat to the security of the Android platform. The growing amount and diversity of these applications render conventional defenses largely ineffective and thus Android smartphones often remain unprotected from novel malware. In this paper, we propose DREBIN, a lightweight method for detection of Android malware that enables identifying malicious applications directly on the smartphone. As the limited resources impede monitoring applications at run-time, DREBIN performs a broad static analysis, gathering as many features of an application as possible. These features are embedded in a joint vector space, such that typical patterns indicative for malware can be automatically identified and used for explaining the decisions of our method. In an evaluation with 123,453 applications and 5,560 malware samples DREBIN outperforms several related approaches and detects 94% of the malware with few false alarms, where the explanations provided for each detection reveal relevant properties of the detected malware. On five popular smartphones, the method requires 10 seconds for an analysis on average, rendering it suitable for checking downloaded applications directly on the device.},
author = {Dan Arp and Michael Spreitzenbarth and M. Hubner and Hugo Gascon and K. Rieck},
doi = {10.14722/NDSS.2014.23247},
}

@article{7b1996d4446f7682fa0ae36527f3cbc5e46dad58,
title = {DroidMat: Android Malware Detection through Manifest and API Calls Tracing},
year = {2012},
url = {https://www.semanticscholar.org/paper/7b1996d4446f7682fa0ae36527f3cbc5e46dad58},
abstract = {Recently, the threat of Android malware is spreading rapidly, especially those repackaged Android malware. Although understanding Android malware using dynamic analysis can provide a comprehensive view, it is still subjected to high cost in environment deployment and manual efforts in investigation. In this study, we propose a static feature-based mechanism to provide a static analyst paradigm for detecting the Android malware. The mechanism considers the static information including permissions, deployment of components, Intent messages passing and API calls for characterizing the Android applications behavior. In order to recognize different intentions of Android malware, different kinds of clustering algorithms can be applied to enhance the malware modeling capability. Besides, we leverage the proposed mechanism and develop a system, called Droid Mat. First, the Droid Mat extracts the information (e.g., requested permissions, Intent messages passing, etc) from each application's manifest file, and regards components (Activity, Service, Receiver) as entry points drilling down for tracing API Calls related to permissions. Next, it applies K-means algorithm that enhances the malware modeling capability. The number of clusters are decided by Singular Value Decomposition (SVD) method on the low rank approximation. Finally, it uses kNN algorithm to classify the application as benign or malicious. The experiment result shows that the recall rate of our approach is better than one of well-known tool, Androguard, published in Black hat 2011, which focuses on Android malware analysis. In addition, Droid Mat is efficient since it takes only half of time than Androguard to predict 1738 apps as benign apps or Android malware.},
author = {Dong-Jie Wu and Ching-Hao Mao and Te-En Wei and Hahn-Ming Lee and Kuo-Ping Wu},
journal = {2012 Seventh Asia Joint Conference on Information Security},
volume = {},
pages = {62-69},
doi = {10.1109/AsiaJCIS.2012.18},
}

@article{2831d26ee3cdd40791c534af2647c588e659dff0,
title = {DroidAPIMiner: Mining API-Level Features for Robust Malware Detection in Android},
year = {2013},
url = {https://www.semanticscholar.org/paper/2831d26ee3cdd40791c534af2647c588e659dff0},
abstract = {The increasing popularity of Android apps makes them the target of malware authors. To defend against this severe increase of Android malwares and help users make a better evaluation of apps at install time, several approaches have been proposed. However, most of these solutions suffer from some shortcomings; computationally expensive, not general or not robust enough. In this paper, we aim to mitigate Android malware installation through providing robust and lightweight classifiers. We have conducted a thorough analysis to extract relevant features to malware behavior captured at API level, and evaluated different classifiers using the generated feature set. Our results show that we are able to achieve an accuracy as high as 99% and a false positive rate as low as 2.2% using KNN classifier.},
author = {Yousra Aafer and Wenliang Du and Heng Yin},
doi = {10.1007/978-3-319-04283-1_6},
}

@article{76f96ffa541f52f67469ac8fbd34b9dee9bf8ee8,
title = {RiskRanker: scalable and accurate zero-day android malware detection},
year = {2012},
url = {https://www.semanticscholar.org/paper/76f96ffa541f52f67469ac8fbd34b9dee9bf8ee8},
abstract = {Smartphone sales have recently experienced explosive growth. Their popularity also encourages malware authors to penetrate various mobile marketplaces with malicious applications (or apps). These malicious apps hide in the sheer number of other normal apps, which makes their detection challenging. Existing mobile anti-virus software are inadequate in their reactive nature by relying on known malware samples for signature extraction. In this paper, we propose a proactive scheme to spot zero-day Android malware. Without relying on malware samples and their signatures, our scheme is motivated to assess potential security risks posed by these untrusted apps. Specifically, we have developed an automated system called RiskRanker to scalably analyze whether a particular app exhibits dangerous behavior (e.g., launching a root exploit or sending background SMS messages). The output is then used to produce a prioritized list of reduced apps that merit further investigation. When applied to examine 118,318 total apps collected from various Android markets over September and October 2011, our system takes less than four days to process all of them and effectively reports 3281 risky apps. Among these reported apps, we successfully uncovered 718 malware samples (in 29 families) and 322 of them are zero-day (in 11 families). These results demonstrate the efficacy and scalability of RiskRanker to police Android markets of all stripes.},
author = {Michael C. Grace and Yajin Zhou and Qiang Zhang and S. Zou and Xuxian Jiang},
doi = {10.1145/2307636.2307663},
}

@article{d13dcf524d7a96255b8c89db9db77c408190f079,
title = {Crowdroid: behavior-based malware detection system for Android},
year = {2011},
url = {https://www.semanticscholar.org/paper/d13dcf524d7a96255b8c89db9db77c408190f079},
abstract = {The sharp increase in the number of smartphones on the market, with the Android platform posed to becoming a market leader makes the need for malware analysis on this platform an urgent issue.
 In this paper we capitalize on earlier approaches for dynamic analysis of application behavior as a means for detecting malware in the Android platform. The detector is embedded in a overall framework for collection of traces from an unlimited number of real users based on crowdsourcing. Our framework has been demonstrated by analyzing the data collected in the central server using two types of data sets: those from artificial malware created for test purposes, and those from real malware found in the wild. The method is shown to be an effective means of isolating the malware and alerting the users of a downloaded malware. This shows the potential for avoiding the spreading of a detected malware to a larger community.},
author = {Iker Burguera and Urko Zurutuza and S. Nadjm-Tehrani},
doi = {10.1145/2046614.2046619},
}

@article{0328bcad22ec72c3d69c1c4eca1b65903276593e,
title = {Droid Analytics: A Signature Based Analytic System to Collect, Extract, Analyze and Associate Android Malware},
year = {2013},
url = {https://www.semanticscholar.org/paper/0328bcad22ec72c3d69c1c4eca1b65903276593e},
abstract = {Smartphones and mobile devices are rapidly becoming indispensable devices for many users. Unfortunately, they also become fertile grounds for hackers to deploy malware. There is an urgent need to have a "security analytic & forensic system" which can facilitate analysts to examine, dissect, associate and correlate large number of mobile applications. An effective analytic system needs to address the following questions: How to automatically collect and manage a high volume of mobile malware? How to analyze a zero-day suspicious application, and compare or associate it with existing malware families in the database? How to reveal similar malicious logic in various malware, and to quickly identify the new malicious code segment? In this paper, we present the design and implementation of DroidAnalytics, a signature based analytic system to automatically collect, manage, analyze and extract android malware. The system facilitates analysts to retrieve, associate and reveal malicious logics at the "opcode level". We demonstrate the efficacy of DroidAnalytics using 150, 368 Android applications, and successfully determine 2, 475 Android malware from 102 different families, with 327 of them being zero-day malware samples from six different families. To the best of our knowledge, this is the first reported case in showing such a large Android malware analysis/detection. The evaluation shows the DroidAnalytics is a valuable tool and is effective in analyzing malware repackaging and mutations.},
author = {Min Zheng and Mingshen Sun and John C.S. Lui},
journal = {2013 12th IEEE International Conference on Trust, Security and Privacy in Computing and Communications},
volume = {},
pages = {163-171},
doi = {10.1109/TrustCom.2013.25},
arxivid = {1302.7212},
}

@article{48322738d25efe1b1d8f8426320367f0c8ab3b2d,
title = {TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones},
year = {2010},
url = {https://www.semanticscholar.org/paper/48322738d25efe1b1d8f8426320367f0c8ab3b2d},
abstract = {Today’s smartphone operating systems frequently fail to provide users with visibility into how third-party applications collect and share their private data. We address these shortcomings with TaintDroid, an efficient, system-wide dynamic taint tracking and analysis system capable of simultaneously tracking multiple sources of sensitive data. TaintDroid enables realtime analysis by leveraging Android’s virtualized execution environment. TaintDroid incurs only 32p performance overhead on a CPU-bound microbenchmark and imposes negligible overhead on interactive third-party applications. Using TaintDroid to monitor the behavior of 30 popular third-party Android applications, in our 2010 study we found 20 applications potentially misused users’ private information; so did a similar fraction of the tested applications in our 2012 study. Monitoring the flow of privacy-sensitive data with TaintDroid provides valuable input for smartphone users and security service firms seeking to identify misbehaving applications.},
author = {William Enck and Peter Gilbert and Byung-Gon Chun and Landon P. Cox and Jaeyeon Jung and P. Mcdaniel and Anmol Sheth},
journal = {ACM Trans. Comput. Syst.},
volume = {32},
pages = {5:1-5:29},
doi = {10.1145/2619091},
}

@article{e4f7e5a5886c06f3f84e1256941ceb3d149471bf,
title = {Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets},
year = {2012},
url = {https://www.semanticscholar.org/paper/e4f7e5a5886c06f3f84e1256941ceb3d149471bf},
abstract = {In this paper, we present a systematic study for the detection of malicious applications (or apps) on popular Android Markets. To this end, we first propose a permissionbased behavioral footprinting scheme to detect new samples of known Android malware families. Then we apply a heuristics-based filtering scheme to identify certain inherent behaviors of unknown malicious families. We implemented both schemes in a system called DroidRanger. The experiments with 204, 040 apps collected from five different Android Markets in May-June 2011 reveal 211 malicious ones: 32 from the official Android Market (0.02% infection rate) and 179 from alternative marketplaces (infection rates ranging from 0.20% to 0.47%). Among those malicious apps, our system also uncovered two zero-day malware (in 40 apps): one from the official Android Market and the other from alternative marketplaces. The results show that current marketplaces are functional and relatively healthy. However, there is also a clear need for a rigorous policing process, especially for non-regulated alternative marketplaces.},
author = {Yajin Zhou and Zhi Wang and Wu Zhou and Xuxian Jiang},
}

@article{a262f73c89d5fb429d60e3a2ed1b4d0168ee5cbd,
title = {PUMA: Permission Usage to Detect Malware in Android},
year = {2012},
url = {https://www.semanticscholar.org/paper/a262f73c89d5fb429d60e3a2ed1b4d0168ee5cbd},
abstract = {The presence of mobile devices has increased in our lives offering almost the same functionality as a personal computer. Android devices have appeared lately and, since then, the number of applications available for this operating system has increased exponentially. Google already has its Android Market where applications are offered and, as happens with every popular media, is prone to misuse. In fact, malware writers insert malicious applications into this market, but also among other alternative markets. Therefore, in this paper, we present PUMA, a new method for detecting malicious Android applications through machine-learning techniques by analysing the extracted permissions from the application itself.},
author = {Borja Sanz and I. Santos and Carlos Laorden and Xabier Ugarte-Pedrero and P. G. Bringas and Gonzalo Álvarez},
doi = {10.1007/978-3-642-33018-6_30},
}
