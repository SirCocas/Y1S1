@article{8915fedabe2b81777172f3c4ac22230eb877912c,
title = {Mitigating Remote Code Execution Vulnerabilities: A Study on Tomcat and Android Security Updates},
year = {2021},
url = {https://www.semanticscholar.org/paper/8915fedabe2b81777172f3c4ac22230eb877912c},
abstract = {The security of web-applications has become increasingly important in recent years as their popularity has grown exponentially. More and more web-based enterprise applications deal with sensitive personal and private information, which, if compromised, can not only lead to system downtime, but can also cause mean millions of dollars in damages to the organization. It is critical to protect web-applications from the constant onslaught of hacker attacks. Remote Code Execution (RCE) attacks are one of the most prominent security threats for software systems, especially Java-based systems. In the current study, we have studied the security update reports for RCE vulnerabilities published by two Java-based projects: Apache Tomcat and Android. We analyzed and categorized the code-fixes (i.e., patches/updates) that were applied to mitigate/fix fifty-one (51) RCE vulnerabilities in the two above-mentioned Java projects. Our analysis showed that a significant majority of the RCE vulnerabilities found in Java projects can be mitigated with just five (5) types/categories of code-fixes. Overall, our goal was to study RCE vulnerabilities in an effort to provide programmers with a handy list of code-fixes, thus making it easier for them to effectively mitigate known RCE vulnerabilities in their own Java-based applications.},
author = {Stephen Bier and Brian Fajardo and Obinna Ezeadum and German Guzman and Kazi Zakia Sultana and Vaibhav Anu},
journal = {2021 IEEE International IOT, Electronics and Mechatronics Conference (IEMTRONICS)},
volume = {},
pages = {1-6},
doi = {10.1109/IEMTRONICS52119.2021.9422666},
}

@article{88ce3af80d3e03a4477a32ad9e865b985dd6fdfd,
title = {Information Technology for Modeling Human-machine Control Systems and Approach to Integration of Mathematical Models for Its Improvement},
year = {2020},
url = {https://www.semanticscholar.org/paper/88ce3af80d3e03a4477a32ad9e865b985dd6fdfd},
abstract = {Ergonomic issues of automation of complex production facilities are considered. It is proposed to use ergonomic functional approach and network modeling of control processes as a basis for solving problems of adaptation of technical component to human-operator. Based on a set of proposed mathematical models, a computer system for solving ergonomic problems of increasing the efficiency of automated systems has been developed. The need to develop the existing set of models the directions of fuzzy expert assessment and simulation of human-machine interaction processes is justified.},
author = {E. Lavrov and P. Paderno and E. Burkov and O. Siryk and N. Pasko},
journal = {2020 XXIII International Conference on Soft Computing and Measurements (SCM)},
volume = {},
pages = {117-120},
doi = {10.1109/SCM50615.2020.9198791},
}

@article{959c8246bfb62b372f8cb5cc0ed52efada1b050b,
title = {Graph Based CIA in Requirements Engineering},
year = {2020},
url = {https://www.semanticscholar.org/paper/959c8246bfb62b372f8cb5cc0ed52efada1b050b},
abstract = {We developed a novel Vertical Breadth-First Search All-path graph algorithm that utilizes vertical data structures to find all-length paths (including shortest paths) for all pairs of vertices in a graph. In the current research we propose an approach to apply our All-path algorithm to perform Change Impact Analysis during Requirements Engineering. This article presents a roadmap of our future research plan to apply our All-path algorithm for software quality improvement.},
author = {Maninder Singh and Vaibhav Anu},
journal = {2020 IEEE International Conference on Big Data (Big Data)},
volume = {},
pages = {5828-5830},
doi = {10.1109/BigData50022.2020.9377995},
}

@article{321a501af2ade9d83c943fd12b517b3b86341519,
title = {Using Human Error Models to Improve the Quality of Software Requirements},
year = {2018},
url = {https://www.semanticscholar.org/paper/321a501af2ade9d83c943fd12b517b3b86341519},
abstract = {Errors From faults},
author = {Vaibhav Anu},
}

@article{74239ba066a7ceaf5fc499e4cce848f47c3d3373,
title = {Understanding Human Errors to Improve Requirements Quality},
year = {2018},
url = {https://www.semanticscholar.org/paper/74239ba066a7ceaf5fc499e4cce848f47c3d3373},
abstract = {},
author = {K. Manjunath},
}

@article{cfc93940c8afcd093d3a3745e0e58ef4bbd0fd27,
title = {How Software Developers Mitigate their Errors when Developing Code},
year = {2020},
url = {https://www.semanticscholar.org/paper/cfc93940c8afcd093d3a3745e0e58ef4bbd0fd27},
abstract = {Code remains largely hand-made by humans and, as such, writing code is prone to error. Many previous studies have focused on the technical reasons for these errors and provided developers with increasingly sophisticated tools. Few studies have looked in detail at why code errors have been made from a human perspective. We use Human Error Theory to frame our exploratory study and use semi-structured interviews to uncover a preliminary understanding of the errors developers make while coding. We look particularly at the skill-based errors reported by 27 professional software developers. We found that the complexity of the development environment is one of the most frequently reported reasons for errors. Maintaining concentration and focus on a particular task also underpins many developer errors. We found that developers struggle with effective mitigation strategies for their errors, reporting strategies largely based on improving their own willpower to concentrate better on coding tasks. We discuss how using Reason's Swiss Cheese model may help reduce errors during software development. This model ensures that layers of tool, process and management mitigation are in place to prevent developer errors from causing system failures.},
author = {Bhaveet Nagaria and T. Hall},
journal = {IEEE Transactions on Software Engineering},
volume = {},
pages = {1-1},
doi = {10.1109/tse.2020.3040554},
}

@article{4937c99de23f8b70eb28795d1710c4e9dfc06684,
title = {Issues and Opportunities for Human Error-Based Requirements Inspections: An Exploratory Study},
year = {2017},
url = {https://www.semanticscholar.org/paper/4937c99de23f8b70eb28795d1710c4e9dfc06684},
abstract = {[Background] Software inspections are extensively used for requirements verification. Our research uses the perspective of human cognitive failures (i.e., human errors) to improve the fault detection effectiveness of traditional fault-checklist based inspections. Our previous evaluations of a formal human error based inspection technique called Error Abstraction and Inspection (EAI) have shown encouraging results, but have also highlighted a real need for improvement. [Aims and Method] The goal of conducting the controlled study presented in this paper was to identify the specific tasks of EAI that inspectors find most difficult to perform and the strategies that successful inspectors use when performing the tasks. [Results] The results highlighted specific pain points of EAI that can be addressed by improving the training and instrumentation.},
author = {Vaibhav Anu and G. Walia and Wenhua Hu and Jeffrey C. Carver and Gary L. Bradshaw},
journal = {2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
volume = {},
pages = {460-465},
doi = {10.1109/ESEM.2017.62},
}

@article{c539d12b3cf6c3705a7836961a8c75f3b27700e8,
title = {Development of a human error taxonomy for software requirements: A systematic literature review},
year = {2018},
url = {https://www.semanticscholar.org/paper/c539d12b3cf6c3705a7836961a8c75f3b27700e8},
abstract = {Abstract Background Human-centric software engineering activities, such as requirements engineering, are prone to error. These human errors manifest as faults. To improve software quality, developers need methods to prevent and detect faults and their sources. Aims Human error research from the field of cognitive psychology focuses on understanding and categorizing the fallibilities of human cognition. In this paper, we applied concepts from human error research to the problem of software quality. Method We performed a systematic literature review of the software engineering and psychology literature to identify and classify human errors that occur during requirements engineering. Results We developed the Human Error Taxonomy (HET) by adding detailed error classes to Reason's well-known human error taxonomy of Slips, Lapses, and Mistakes. Conclusion The process of identifying and classifying human error identification provides a structured way to understand and prevent the human errors (and resulting faults) that occur during human-centric software engineering activities like requirements engineering. Software engineering can benefit from closer collaboration with cognitive psychology researchers.},
author = {Vaibhav Anu and Wenhua Hu and Jeffrey C. Carver and G. Walia and Gary L. Bradshaw},
journal = {Inf. Softw. Technol.},
volume = {103},
pages = {112-124},
doi = {10.1016/j.infsof.2018.06.011},
}

@article{8feb156bd9476c1622c01314fb03bd49cdc63fe8,
title = {Towards a Deep Learning Model for Vulnerability Detection on Web Application Variants},
year = {2020},
url = {https://www.semanticscholar.org/paper/8feb156bd9476c1622c01314fb03bd49cdc63fe8},
abstract = {Reported vulnerabilities have grown significantly over the recent years, with SQL injection (SQLi) being one of the most prominent, especially in web applications. For these, such increase can be explained by the integration of multiple software parts (e.g., various plugins and modules), often developed by different organizations, composing thus web application variants. Machine Learning has the potential to be a great ally on finding vulnerabilities, aiding experts by reducing the search space or even by classifying programs on their own. However, previous work usually does not consider SQLi or utilizes techniques hard to scale. Moreover, there is a clear gap in vulnerability detection with machine learning for PHP, the most popular server-side language for web applications. This paper presents a Deep Learning model able to classify PHP slices as vulnerable (or not) to SQLi. As slices can belong to any variant, we propose the use of an intermediate language to represent the slices and interpret them as text, resorting to well-studied Natural Language Processing (NLP) techniques. Preliminary results of the use of the model show that it can discover SQLi, helping programmers and precluding attacks that would eventually cost a lot to repair.},
author = {Ana Fidalgo and Ibéria Medeiros and Paulo Antunes and N. Neves},
journal = {2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)},
volume = {},
pages = {465-476},
doi = {10.1109/icstw50294.2020.00083},
}

@article{6ccae79a331ac124a2333bedb5e330a534a53d77,
title = {A Human Error Based Approach to Understanding Programmer-Induced Software Vulnerabilities},
year = {2020},
url = {https://www.semanticscholar.org/paper/6ccae79a331ac124a2333bedb5e330a534a53d77},
abstract = {Many security incidents can be traced back to software vulnerabilities, which can be described as security-related defects/bugs in the code that can potentially be exploited by the attackers to perform unauthorized actions. An analysis of vulnerability data disseminated by organizations such as NIST’ s National Vulnerability (NVD) and SANS Institute shows that a majority of vulnerabilities can be traced back to a relatively small set of root causes mostly related to the repeated mistakes by the programmers. That is, programmers exhibit a pattern of erroneous coding practices or behavior which lead to vulnerable code. Cognitive Psychologists have long been studying these erroneous behavior patterns and have termed them as human cognition failures or simply, human errors. The primary goal of this paper is to propose a classification for the most frequently observed human errors committed by the programmers (the commitment of a human error can lead to injection of one or more security defects/bugs). Such a classification can be useful for software development organizations as they can train developers on the human errors so that developers can avoid committing the human errors themselves, thereby reducing the chances of vulnerability injection in their code.},
author = {Vaibhav Anu and Kazi Zakia Sultana and Bharath K. Samanthula},
doi = {10.1109/ISSREW51248.2020.00036},
}
