@article{1cf930518d7a778f13b18bf1c65f993a7490b9b2,
title = {A Forensic Analysis of Android Malware -- How is Malware Written and How it Could Be Detected?},
year = {2014},
url = {https://www.semanticscholar.org/paper/1cf930518d7a778f13b18bf1c65f993a7490b9b2},
abstract = {We consider in this paper the analysis of a large set of malware and benign applications from the Android ecosystem. Although a large body of research work has dealt with Android malware over the last years, none has addressed it from a forensic point of view. After collecting over 500,000 applications from user markets and research repositories, we perform an analysis that yields precious insights on the writing process of Android malware. This study also explores some strange artifacts in the datasets, and the divergent capabilities of state-of-the-art antivirus to recognize/define malware. We further highlight some major weak usage and misunderstanding of Android security by the criminal community and show some patterns in their operational flow. Finally, using insights from this analysis, we build a naive malware detection scheme that could complement existing anti virus software.},
author = {Kevin Allix and Quentin Jérôme and Tegawendé F. Bissyandé and Jacques Klein and R. State and Y. L. Traon},
journal = {2014 IEEE 38th Annual Computer Software and Applications Conference},
volume = {},
pages = {384-393},
doi = {10.1109/COMPSAC.2014.61},
}

@article{a4e956265abb25f9db47daaab079380fa69c00f1,
title = {Systematic Detection of Capability Leaks in Stock Android Smartphones},
year = {2012},
url = {https://www.semanticscholar.org/paper/a4e956265abb25f9db47daaab079380fa69c00f1},
abstract = {Recent years have witnessed a meteoric increase in the adoption of smartphones. To manage information and features on such phones, Android provides a permission-based security model that requires each application to explicitly request permissions before it can be installed to run. In this paper, we analyze eight popular Android smartphones and discover that the stock phone images do not properly enforce the permission model. Several privileged permissions are unsafely exposed to other applications which do not need to request them for the actual use. To identify these leaked permissions or capabilities, we have developed a tool called Woodpecker. Our results with eight phone images show that among 13 privileged permissions examined so far, 11 were leaked, with individual phones leaking up to eight permissions. By exploiting them, an untrusted application can manage to wipe out the user data, send out SMS messages, or record user conversation on the affected phones – all without asking for any permission.},
author = {Michael C. Grace and Yajin Zhou and Zhi Wang and Xuxian Jiang},
}

@article{644782a05ba2f3218e84c6e07d74e9bfee588d1d,
title = {YAASE: Yet Another Android Security Extension},
year = {2011},
url = {https://www.semanticscholar.org/paper/644782a05ba2f3218e84c6e07d74e9bfee588d1d},
abstract = {Three hundred and fifty thousand Android phones are activated each day. The open philosophy adopted by Google makes it easy for third-parties to develop and distribute applications. Unfortunately, the same applies to malicious applications that pose a real threat to users' privacy. The limited security model implemented on the Android Platform has failed in thwarting these attacks. In this paper, we present Yet Another Android Security Extension (YAASE) that provides a fine-grained security mechanism while protecting the user from malicious applications that attempt to leak sensitive information via network access or by privilege spreading through collusion. We have implemented YAASE and evaluated its performance overhead. Preliminary results show the approach is indeed feasible.},
author = {G. Russello and B. Crispo and Earlence Fernandes and Yury Zhauniarovich},
journal = {2011 IEEE Third Int'l Conference on Privacy, Security, Risk and Trust and 2011 IEEE Third Int'l Conference on Social Computing},
volume = {},
pages = {1033-1040},
doi = {10.1109/PASSAT/SocialCom.2011.151},
}

@article{40a725601cae3e6fd82084d32991274a50337510,
title = {Challenges and Outlook in Machine Learning-based Malware Detection for Android},
year = {2015},
url = {https://www.semanticscholar.org/paper/40a725601cae3e6fd82084d32991274a50337510},
abstract = {Just like in traditional desktop computing, one of the major security issues in mobile computing lies in malicious software. Several recent studies have shown that Android, as today’s most widespread Operating System, is the target of most of the new families of malware. Manually analysing an Android application to determine whether it is malicious or not is a timeconsuming process. Furthermore, because of the complexity of analysing an application, this task can only be conducted by highly-skilled—hence hard to come by—professionals. Researchers naturally sought to transfer this process from humans to computers to lower the cost of detecting malware. Machine-Learning techniques, looking at patterns amongst known malware and inferring models of what discriminates malware from goodware, have long been summoned to build malware detectors. The vast quantity of data involved in malware detection, added to the fact that we do not know a priori how to express in technical terms the difference between malware and goodware, indeed makes the malware detection question a seemingly textbook example of a possible MachineLearning application. Despite the vast amount of literature published on the topic of detecting malware with machinelearning, malware detection is not a solved problem. In this Thesis, we investigate issues that affect performance evaluation and that thus may render current machine learning-based malware detectors for Android hardly usable in practical settings, and we propose an approach to overcome those issues. While the experiments presented in this thesis all rely on feature-sets obtained through lightweight static analysis, several of our findings could apply equally to all Machine Learning-based malware detection approaches. In the first part of this thesis, background information on machine-learning and on malware detection is provided, and the related work is described. A snapshot of the malware landscape in Android application markets is then presented. The second part discusses three pitfalls hindering the evaluation of malware detectors. We show with extensive experiments how validation methodology, History-unaware dataset construction and the choice of a ground truth can heavily interfere with the performance results of malware detectors. In a third part, we present an practical approach to detect Android Malware in real-world settings. We then propose several research paths to get closer to our long term goal of building practical, dependable and predictable Android Malware detectors.},
author = {Kevin Allix},
}

@article{ed4c571d3ce696bcca4f5137aca68f8943eefda8,
title = {Sweetening android lemon markets: measuring and combating malware in application marketplaces},
year = {2013},
url = {https://www.semanticscholar.org/paper/ed4c571d3ce696bcca4f5137aca68f8943eefda8},
abstract = {Application marketplaces are the main software distribution mechanism for modern mobile devices but are also emerging as a viable alternative to brick-and-mortar stores for personal computers. While most application marketplaces require applications to be cryptographically signed by their developers, in Android marketplaces, self-signed certificates are common, thereby offering very limited authentication properties. As a result, there have been reports of malware being distributed through application "repackaging". We provide a quantitative assessment of this phenomenon by collecting 41,057 applications from 194 alternative Android application markets in October 2011, in addition to a sample of 35,423 applications from the official Android market, Google Play. We observe that certain alternative markets almost exclusively distribute repackaged applications containing malware. To remedy this situation we propose a simple verification protocol, and discuss a proof-of-concept implementation, AppIntegrity. AppIntegrity strengthens the authentication properties offered in application marketplaces, thereby making it more difficult for miscreants to repackage apps, while presenting very little computational or communication overhead, and being deployable without requiring significant changes to the Android platform.},
author = {Timothy M. Vidas and Nicolas Christin},
doi = {10.1145/2435349.2435378},
}

@article{99acfcad7ef9e6a8d67d418cc6ed91ffa1f45992,
title = {Detecting Passive Content Leaks and Pollution in Android Applications},
year = {2013},
url = {https://www.semanticscholar.org/paper/99acfcad7ef9e6a8d67d418cc6ed91ffa1f45992},
abstract = {In this paper, we systematically study two vulnerabilities and their presence in existing Android applications (or “apps”). These two vulnerabilities are rooted in an unprotected Android component, i.e., content provider, inside vulnerable apps. Because of the lack of necessary access control enforcement, affected apps can be exploited to either passively disclose various types of private in-app data or inadvertently manipulate certain security-sensitive in-app settings or configurations that may subsequently cause serious system-wide side effects (e.g., blocking all incoming phone calls or SMS messages). To assess the prevalence of these two vulnerabilities, we analyze 62, 519 apps collected in February 2012 from various Android markets. Our results show that among these apps, 1, 279 (2.0%) and 871 (1.4%) of them are susceptible to these two vulnerabilities, respectively. In addition, we find that 435 (0.7%) and 398 (0.6%) of them are accessible from official Google Play and some of them are extremely popular with more than 10, 000, 000 installs. The presence of a large number of vulnerable apps in popular Android markets as well as the variety of private data for leaks and manipulation reflect the severity of these two vulnerabilities. To address them, we also explore and examine possible mitigation solutions.},
author = {Yajin Zhou and Xuxian Jiang},
}

@article{c90c2936a5c23c786abddaa0a7f776524e74b402,
title = {Detecting mobile malware threats to homeland security through static analysis},
year = {2014},
url = {https://www.semanticscholar.org/paper/c90c2936a5c23c786abddaa0a7f776524e74b402},
abstract = {Recent years have seen the significant increase in the popularity of smartphones. This popularity has been accompanied with an equally alarming rise in mobile malware. Recently released mobile malware targeting Android devices have been found to specifically focus on root exploits to obtain root-level access and execute instructions from a remote server. Thus, this kind of mobile malware presents a significant threat to Homeland Security. This is possible because smartphones can serve as zombie devices which are then controlled by hackers' via a C&C server. In this paper, we discuss the defining characteristics inherent in mobile malware and show mobile attack scenarios which are feasible against Homeland Security. We also propose a static analysis tool, DroidAnalyzer, which identifies potential vulnerabilities of Android apps and the presence of root exploits. Then, we analyze various mobile malware samples and targeting apps such as banking, flight tracking and booking, home&office monitoring apps to examine potential vulnerabilities by applying DroidAnalyzer.},
author = {Seung-Hyun Seo and Aditi Gupta and A. Sallam and E. Bertino and Kangbin Yim},
journal = {J. Netw. Comput. Appl.},
volume = {38},
pages = {43-53},
doi = {10.1016/j.jnca.2013.05.008},
}

@article{d2b5d5e0d5d8264025283909c9e55e8bdaa91081,
title = {Android Permission System Violation: Case Study and Refinement},
year = {2013},
url = {https://www.semanticscholar.org/paper/d2b5d5e0d5d8264025283909c9e55e8bdaa91081},
abstract = {Android uses permissions for application security management. Android also allows inter-application communication (IAC), which enables cooperation between different applications to perform complex tasks by using some components and Intents. In other words, Android provides more flexibility and places less restriction on application development. This is a major feature that differentiates Android from its competitors. However, IAC also facilitates malicious applications that can collude in attacks of privilege escalation. In this paper, the authors demonstrate with case studies that all IAC channels can potentially be utilized for privilege escalation attacks, and the authors propose a refinement to solve this problem by enforcing IAC permissions and exposing IAC to users. Android Permission System Violation: Case Study and Refinement},
author = {Kyoung-Soo Han and Y. Lee and Biao Jiang and E. Im},
journal = {Int. J. E Entrepreneurship Innov.},
volume = {4},
pages = {16-27},
doi = {10.4018/jeei.2013010102},
}

@article{0c1030df5f5a5724f52f447c67a8522d489f28b1,
title = {Study of an effective way of detecting unexpected permission authorization to mobile apps},
year = {2017},
url = {https://www.semanticscholar.org/paper/0c1030df5f5a5724f52f447c67a8522d489f28b1},
abstract = {The recent boom in Android mobile device usage has caused a shift in the information technology and has affected the way how information and data are stored, shared among the mobile users. The advent of social networking applications also demands the availability of resources that can be shared among the authentic users. This paper reviews and compares the available techniques and solutions for detecting Unexpected Permission Authorization to Mobile Apps. It is observed that malware for the android system is also growing significantly, current solutions for detecting malware on smartphones are still ineffective.},
author = {Manisha M. Patil and Dhanya Pramod},
journal = {2017 International Conference on Intelligent Computing and Control Systems (ICICCS)},
volume = {},
pages = {127-131},
doi = {10.1109/ICCONS.2017.8250682},
}

@article{b8363c1981f71db206806bf5462842818830699d,
title = {Information flows as a permission mechanism},
year = {2014},
url = {https://www.semanticscholar.org/paper/b8363c1981f71db206806bf5462842818830699d},
abstract = {This paper proposes Flow Permissions, an extension to the Android permission mechanism. Unlike the existing permission mechanism, our permission mechanism contains semantic information based on information flows. Flow Permissions allow users to examine and grant per-app information flows within an application e.g., a permission for reading the phone number and sending it over the network) as well as cross-app information flows across multiple applications e.g., a permission for reading the phone number and sending it to another application already installed on the user's phone). Our goal with Flow Permissions is to provide visibility into the holistic behavior of the applications installed on a user's phone. In order to support Flow Permissions on Android, we have developed a static analysis engine that detects flows within an Android application. We have also modified Android's existing permission mechanism and installation procedure to support Flow Permissions. We evaluate our prototype with 2,992 popular applications and 1,047 malicious applications and show that our design is practical and effective in deriving Flow Permissions. We validate our cross-app flow generation and installation procedure on a Galaxy Nexus smartphone.},
author = {Feng Shen and Namita Vishnubhotla and Chirag Todarka and Mohit Arora and Babu Dhandapani and E. Lehner and Steven Y. Ko and Lukasz Ziarek},
journal = {Proceedings of the 29th ACM/IEEE international conference on Automated software engineering},
volume = {},
pages = {},
doi = {10.1145/2642937.2643018},
}

@article{3acc1c13d2565eac2f1fcb2bf96243b586c05e75,
title = {Examining Application Components to Reveal Android Malware},
year = {2013},
url = {https://www.semanticscholar.org/paper/3acc1c13d2565eac2f1fcb2bf96243b586c05e75},
abstract = {Abstract : Smartphones are becoming ubiquitous in everyday life and malware is exploiting these devices. Therefore, a means to identify the threats of malicious applications is necessary. This paper presents a method to classify and analyze Android malware through application component analysis. The experiment parses select portions from Android packages to collect features using byte sequences and permissions of the application. Multiple machine learning algorithms classify the samples of malware based on these features. The experiment utilizes instance based learner, naive Bayes, decision trees, sequential minimal optimization, boosted naive Bayes, and boosted decision trees to identify the best components that reveal malware characteristics. The best case classifies malicious applications with an accuracy of 99.24% and an area under curve of 0.9890 utilizing boosted decision trees. This method does not require scanning the entire application and provides high true positive rates. This thesis investigates the components to provide malware classification.},
author = {John B Guptill},
}

@article{e320655a33bdf559a05c69379ef71c899e2062b7,
title = {Real-time detection and prevention of android SMS permission abuses},
year = {2013},
url = {https://www.semanticscholar.org/paper/e320655a33bdf559a05c69379ef71c899e2062b7},
abstract = {The Android permission system informs users about the privileges demanded by applications (apps), and in principle allows users to assess potential risks of apps. Unfortunately, recent studies showed that the installation-time permission verification procedure is often ignored, due to users' lack of attention or insufficient understanding of the privileges or the Android permission system. As a consequence, malicious apps are likely granted with security- and privacy-critical permissions, and launch various kinds of attacks without being noticed by the users. In this paper, we present the design, analysis, and implementation of DroidPAD, a novel solution that aims to leverage system-wide state information to detect and block in real-time possible abuses of Android permissions. Especially, with a focus on SMS-related permissions, we have implemented a proof-of-concept prototype. Our evaluation based on 48 representative benign and malicious apps shows that DroidPAD successfully detected SMS permissions-abusing activities with low false-positive rates, and zero false-negative rates.},
author = {Weiliang Luo and Shouhuai Xu and Xuxian Jiang},
doi = {10.1145/2484417.2484422},
}

@article{a02c300de6fbb5ebc942af62ec2c6528ab6ee643,
title = {MeadDroid: Detecting Monetary Theft Attacks in Android by DVM Monitoring},
year = {2012},
url = {https://www.semanticscholar.org/paper/a02c300de6fbb5ebc942af62ec2c6528ab6ee643},
abstract = {Monetary theft attacks are one of the most popular attack forms towards Android system in recent years. In this paper, we present MeadDroid, a lightweight real-time detection system atop Android, to hold back this type of attacks. An FSM of monetary theft attacks is constructed, based on the analysis of real-world attacks. Employing an FSM-based detection approach, with the information obtained from dynamically monitoring the API calls and tracking the processing flow of UI (User Interface) inputs, MeadDroid can detect monetary theft attacks effectively and incurs only a small performance overhead. In addition, realized as an extension of Dalvik VM, MeadDroid is transparent to the user, and thus can provide a good user experience. Based on a prototype system, experiments are conducted with 195 popular Android applications. 11 applications with monetary theft attacks are found and the detection accuracy is almost 100% through comparing the results with the charge bill of the phone number used in the experiments. The performance overhead on a CPU-bound micro-benchmark is 8.97%. Experimental results demonstrate that MeadDroid has good performance in terms of effectiveness and efficiency.},
author = {Lingguang Lei and Yuewu Wang and Jiwu Jing and Zhongwen Zhang and Xingjie Yu},
doi = {10.1007/978-3-642-37682-5_7},
}

@article{e4f7e5a5886c06f3f84e1256941ceb3d149471bf,
title = {Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets},
year = {2012},
url = {https://www.semanticscholar.org/paper/e4f7e5a5886c06f3f84e1256941ceb3d149471bf},
abstract = {In this paper, we present a systematic study for the detection of malicious applications (or apps) on popular Android Markets. To this end, we first propose a permissionbased behavioral footprinting scheme to detect new samples of known Android malware families. Then we apply a heuristics-based filtering scheme to identify certain inherent behaviors of unknown malicious families. We implemented both schemes in a system called DroidRanger. The experiments with 204, 040 apps collected from five different Android Markets in May-June 2011 reveal 211 malicious ones: 32 from the official Android Market (0.02% infection rate) and 179 from alternative marketplaces (infection rates ranging from 0.20% to 0.47%). Among those malicious apps, our system also uncovered two zero-day malware (in 40 apps): one from the official Android Market and the other from alternative marketplaces. The results show that current marketplaces are functional and relatively healthy. However, there is also a clear need for a rigorous policing process, especially for non-regulated alternative marketplaces.},
author = {Yajin Zhou and Zhi Wang and Wu Zhou and Xuxian Jiang},
}

@article{7216ec1cbc1d9241489c27d9b0001cdaef676480,
title = {CHEX: statically vetting Android apps for component hijacking vulnerabilities},
year = {2012},
url = {https://www.semanticscholar.org/paper/7216ec1cbc1d9241489c27d9b0001cdaef676480},
abstract = {An enormous number of apps have been developed for Android in recent years, making it one of the most popular mobile operating systems. However, the quality of the booming apps can be a concern [4]. Poorly engineered apps may contain security vulnerabilities that can severally undermine users' security and privacy. In this paper, we study a general category of vulnerabilities found in Android apps, namely the component hijacking vulnerabilities. Several types of previously reported app vulnerabilities, such as permission leakage, unauthorized data access, intent spoofing, and etc., belong to this category. We propose CHEX, a static analysis method to automatically vet Android apps for component hijacking vulnerabilities. Modeling these vulnerabilities from a data-flow analysis perspective, CHEX analyzes Android apps and detects possible hijack-enabling flows by conducting low-overhead reachability tests on customized system dependence graphs. To tackle analysis challenges imposed by Android's special programming paradigm, we employ a novel technique to discover component entry points in their completeness and introduce app splitting to model the asynchronous executions of multiple entry points in an app. We prototyped CHEX based on Dalysis, a generic static analysis framework that we built to support many types of analysis on Android app bytecode. We evaluated CHEX with 5,486 real Android apps and found 254 potential component hijacking vulnerabilities. The median execution time of CHEX on an app is 37.02 seconds, which is fast enough to be used in very high volume app vetting and testing scenarios.},
author = {Long Lu and Zhichun Li and Z. Wu and Wenke Lee and G. Jiang},
journal = {Proceedings of the 2012 ACM conference on Computer and communications security},
volume = {},
pages = {},
doi = {10.1145/2382196.2382223},
}

@article{12ef153d9c7ccc374d56acf34b59fb2eaec6f755,
title = {Dissecting Android Malware: Characterization and Evolution},
year = {2012},
url = {https://www.semanticscholar.org/paper/12ef153d9c7ccc374d56acf34b59fb2eaec6f755},
abstract = {The popularity and adoption of smart phones has greatly stimulated the spread of mobile malware, especially on the popular platforms such as Android. In light of their rapid growth, there is a pressing need to develop effective solutions. However, our defense capability is largely constrained by the limited understanding of these emerging mobile malware and the lack of timely access to related samples. In this paper, we focus on the Android platform and aim to systematize or characterize existing Android malware. Particularly, with more than one year effort, we have managed to collect more than 1,200 malware samples that cover the majority of existing Android malware families, ranging from their debut in August 2010 to recent ones in October 2011. In addition, we systematically characterize them from various aspects, including their installation methods, activation mechanisms as well as the nature of carried malicious payloads. The characterization and a subsequent evolution-based study of representative families reveal that they are evolving rapidly to circumvent the detection from existing mobile anti-virus software. Based on the evaluation with four representative mobile security software, our experiments show that the best case detects 79.6% of them while the worst case detects only 20.2% in our dataset. These results clearly call for the need to better develop next-generation anti-mobile-malware solutions.},
author = {Yajin Zhou and Xuxian Jiang},
journal = {2012 IEEE Symposium on Security and Privacy},
volume = {},
pages = {95-109},
doi = {10.1109/SP.2012.16},
}

@article{411313db5f7c56a302d3d50769a374ae06268a2b,
title = {ASCAA: API-level security certification of android applications},
year = {2017},
url = {https://www.semanticscholar.org/paper/411313db5f7c56a302d3d50769a374ae06268a2b},
abstract = {Android provides a permission declaration and a certification mechanism to detect and report potential security threats of applications. Normally, an application is certified based on its declared permissions, but declared permissions are often coarse-grained or inconsistent with those actually used in the program code. The authors propose application programming interface (API)-level security certification of android applications (ASCAA), a cloud-based framework, which employs a systematic method to identify and analyse security threats at API level. To certify an application, ASCAA examines all permission labels in its manifest and API invocations extracted from its decompiled code based on a set of requirement-dependent security rules. In addition, the authors provide ASCAA Security Language to formalise security rules and the certification process, which makes ASCAA general and scalable. Since it is a cloud-based framework, any potential user could easily make ASCAA work for them, and ASCAA has also been proved to gain high performance. Hitherto, they have analysed over 200 applications with an automated tool based on ASCAA, and discovered that about one-eighth failed to pass part of our sample rules. We find evidence that ASCAA can identify risk factors in a fine-grained way, for example, applications’ being over privileged or the use of some dangerous APIs require no permission declaration.},
author = {Wengang Pei and Jingtao Li and Hengyu Li and Han Gao and Peizan Wang},
journal = {IET Softw.},
volume = {11},
pages = {55-63},
doi = {10.1049/iet-sen.2015.0040},
}

@article{6c8a502b343d408052e0c45e1019399df0a2836a,
title = {DroidScreening: a practical framework for real-world Android malware analysis},
year = {2016},
url = {https://www.semanticscholar.org/paper/6c8a502b343d408052e0c45e1019399df0a2836a},
abstract = {Analyzing Android malware sample is a time-consuming and error-prone work. Automatic techniques to perform suspicious apps screening and threat level evaluation is highly desired by the antivirus industry. In this paper, we proposed a novel automated framework called DroidScreening to speed up the Android malware analysis process and to assist antivirus analyst in generating the heuristics pattern for scanner. DroidScreening employs lazy associative classification (LAC) algorithms to produce classification model by learning from malicious evidence features extracted by using static analysis on Android application package files. Moreover, we proposed a novel high-interaction execution environment that can interact with malicious Android code, so that the analysis samples are induced to start executing their true malicious behavior. Experimentation on malware datasets and using LAC with traditional learning approaches show that the LAC algorithms outperformed other classification algorithms. Finally, we analyzed the performance of DroidScreening and compare it with other similar research work. Copyright © 2016 John Wiley & Sons, Ltd.},
author = {Junfeng Yu and Qingfeng Huang and C. H. Yian},
journal = {Secur. Commun. Networks},
volume = {9},
pages = {1435-1449},
doi = {10.1002/sec.1430},
}

@article{bb2c82adbe6efeaa0264f9cf806464de3245cca3,
title = {DroidLogger: Reveal suspicious behavior of Android applications via instrumentation},
year = {2012},
url = {https://www.semanticscholar.org/paper/bb2c82adbe6efeaa0264f9cf806464de3245cca3},
abstract = {As the mobile devices increased rapidly in recent years, mobile malware is becoming a severe threat to users. Traditional malware detection uses signature-based methods, but these methods can be evaded by obfuscation or polymorphism. So the behavior-based detection techniques were proposed recently. To capture the apps' behavior, previous works either use OS level tool such as strace to capture system call, or intercept high level API by modifying the virtual machine. However, the information retrieved from the former method is too difficult to understand the program's behavior, and the technique used in latter method requires to modify the emulator, which it is not compatible when the Android version upgrade. In this paper, we proposed a new light-weight method to understand the applications' behavior by logging program's API and corresponding arguments. We build the logging system DroidLogger, which instruments the logging code into the application binary, and prints out the API usage information at run time. We analyzed several malware and show DroidLogger can reveal the malicious behavior effectively.},
author = {Shuaifu Dai and Tao Wei and Wei Zou},
journal = {2012 7th International Conference on Computing and Convergence Technology (ICCCT)},
volume = {},
pages = {550-555},
}

@article{0062526e2c87d1fd47388c13050cbc2871f766db,
title = {FireDroid: hardening security in almost-stock Android},
year = {2013},
url = {https://www.semanticscholar.org/paper/0062526e2c87d1fd47388c13050cbc2871f766db},
abstract = {Malware poses a serious threat to Android smartphones. Current security mechanisms offer poor protection and are often too inflexible to quickly mitigate new exploits. In this paper we present FireDroid, a policy-based framework for enforcing security policies by interleaving process system calls. The main advantage of FireDroid is that it is completely transparent to the applications as well as to the Android OS. FireDroid enforces security policies without modifying either the Android OS or its applications. FireDroid is able to perform security checks on third-party and pre-installed applications, as well as malicious native code. We have implemented a novel mechanism that is able to attach, identify, monitor and enforce polices for any process spawned by the Android's mother process Zygote. We have tested the effectiveness of FireDroid against real malware. Moreover, we show how FireDroid can be used as a swift solution for blocking OS and application vulnerabilities before patches are available. Finally, we provide an experimental evaluation of our approach showing that it has only a limited overhead. Given these facts, FireDroid represents a practical solution for strengthening security on Android smartphones.},
author = {G. Russello and Arturo Blas Jimenez and H. Naderi and W. V. D. Mark},
journal = {Proceedings of the 29th Annual Computer Security Applications Conference},
volume = {},
pages = {},
doi = {10.1145/2523649.2523678},
}

@article{d78411dd0113c6a3023815353ef58442abf1fd78,
title = {IccTA: Detecting Inter-Component Privacy Leaks in Android Apps},
year = {2015},
url = {https://www.semanticscholar.org/paper/d78411dd0113c6a3023815353ef58442abf1fd78},
abstract = {Shake Them All is a popular "Wallpaper" application exceeding millions of downloads on Google Play. At installation, this application is given permission to (1) access the Internet (for updating wallpapers) and (2) use the device microphone (to change background following noise changes). With these permissions, the application could silently record user conversations and upload them remotely. To give more confidence about how Shake Them All actually processes what it records, it is necessary to build a precise analysis tool that tracks the flow of any sensitive data from its source point to any sink, especially if those are in different components. Since Android applications may leak private data carelessly or maliciously, we propose IccTA, a static taint analyzer to detect privacy leaks among components in Android applications. IccTA goes beyond state-of-the-art approaches by supporting inter- component detection. By propagating context information among components, IccTA improves the precision of the analysis. IccTA outperforms existing tools on two benchmarks for ICC-leak detectors: DroidBench and ICC-Bench. Moreover, our approach detects 534 ICC leaks in 108 apps from MalGenome and 2,395 ICC leaks in 337 apps in a set of 15,000 Google Play apps.},
author = {L. Li and Alexandre Bartel and Tegawendé F. Bissyandé and Jacques Klein and Y. L. Traon and Steven Arzt and Siegfried Rasthofer and E. Bodden and Damien Octeau and P. Mcdaniel},
journal = {2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
volume = {1},
pages = {280-291},
doi = {10.1109/ICSE.2015.48},
}

@article{b7efb37e88e48deb2da9bdae3f0b226c745e42cd,
title = {Efficient and Context-Aware Privacy Leakage Confinement},
year = {2016},
url = {https://www.semanticscholar.org/paper/b7efb37e88e48deb2da9bdae3f0b226c745e42cd},
abstract = {As Android has become the most prevalent operating system in mobile devices, privacy concerns in the Android platform are increasing. A mechanism for efficient runtime enforcement of information-flow security policies in Android apps is desirable to confine privacy leakage. The prior works towards this problem require firmware modification (i.e., modding) and incur considerable runtime overhead. Besides, no effective mechanism is in place to distinguish malicious privacy leakage from those of legitimate uses. In this paper, we take a bytecode rewriting approach. Given an unknown Android app, we selectively insert instrumentation code into the app to keep track of private information and detect leakage at runtime. To distinguish legitimate and malicious leaks, we model the user’s decisions with a context-aware policy enforcement mechanism. We have implemented a prototype called Capper and evaluated its efficacy on confining privacy-breaching apps. Our evaluation on 4723 real-world Android applications demonstrates that Capper can effectively track and mitigate privacy leaks. Moreover, after going through a series of optimizations, the instrumentation code only represents a small portion (4.48 % on average) of the entire program. The runtime overhead introduced by Capper is also minimal, merely 1.5 % for intensive data propagation.},
author = {Mu Zhang and Heng Yin},
doi = {10.1007/978-3-319-47812-8_5},
}

@article{6122af79c03a4396312be915982e50f7725767ca,
title = {Deliverable D7.2: Intermediate Report on Cyberattacks on Ultra-portable Devices},
year = {2013},
url = {https://www.semanticscholar.org/paper/6122af79c03a4396312be915982e50f7725767ca},
abstract = {This deliverable reports our preliminary research results in the area of cyberattack detection/mitigation on ultra-portable devices. We first present a review of the State-of-the-Art in attacks and defenses in smart de- vices and continue with reporting on the research we have been conducting.},
author = {Trustworthy Ict},
}

@article{1f7ea0ae781e2aa6b0e241e08c1ac31ee0c2ca42,
title = {Efficient, context-aware privacy leakage confinement for android applications without firmware modding},
year = {2014},
url = {https://www.semanticscholar.org/paper/1f7ea0ae781e2aa6b0e241e08c1ac31ee0c2ca42},
abstract = {As Android has become the most prevalent operating system in mobile devices, privacy concerns in the Android platform are increasing. A mechanism for efficient runtime enforcement of information-flow security policies in Android apps is desirable to confine privacy leakage. The prior works towards this problem require firmware modification (i.e., modding) and incur considerable runtime overhead. Besides, no effective mechanism is in place to distinguish malicious privacy leakage from those of legitimate uses. In this paper, we take a bytecode rewriting approach. Given an unknown Android app, we selectively insert instrumentation code into the app to keep track of private information and detect leakage at runtime. To distinguish legitimate and malicious leaks, we model the user's decisions with a context-aware policy enforcement mechanism. We have implemented a prototype called Capper and evaluated its efficacy on confining privacy-breaching apps. Our evaluation on 4723 real-world Android applications demonstrates that Capper can effectively track and mitigate privacy leaks. Moreover, after going through a series of optimizations, the instrumentation code only represents a small portion (4.48% on average) of the entire program. The runtime overhead introduced by Capper is also minimal, merely 1.5% for intensive data propagation.},
author = {Mu Zhang and Heng Yin},
journal = {Proceedings of the 9th ACM symposium on Information, computer and communications security},
volume = {},
pages = {},
doi = {10.1145/2590296.2590312},
}

@article{3dc02df0d8bb6a02777bf8b2e6c1ed3f17ddef09,
title = {Dynamic Analysis of Android Malware},
year = {2013},
url = {https://www.semanticscholar.org/paper/3dc02df0d8bb6a02777bf8b2e6c1ed3f17ddef09},
abstract = {Expecting a shipment of 1 billion Android devices in 2017, cyber criminals have naturally extended their vicious activities towards Google’s mobile operating system: threat researchers are reporting an alarming increase of detected Android malware from 2012 to 2013. In order to have some control over the estimated 700 new Android applications that are being released every day, there is need for a form of automated analysis to quickly detect and isolate new malware instances. We present the TraceDroid Analysis Platform, a scalable, automated framework for dynamic analysis of Android applications to detect suspicious, possibly malicious apps using a comprehensive method tracing scheme dubbed TraceDroid. We provide means to aid further post-analysis on suspects to allow malware researchers to fully understand their behavior and ultimately label them as malicious or benign. Our framework can therefore aid and direct scarce analysis resources towards applications that have the greatest potential of being malicious. We show that TraceDroid is almost 50% faster than Android’s original profiler implementation while revealing much more detail about the app’s execution. This makes it a perfect tool not only for malware analysts, but also for app developers and reverse engineers. For a random set of 35 both benign and malicious samples, the stimulation engine of our TraceDroid Analysis Platform achieves an average code coverage of 33.6% which is even more than when they are stimulated manually (32.9%).},
author = {V. V. D. Veen and H. Bos and C. Rossow},
}

@article{7ef85692a07bb1b9a659dc7ebabf2d52e51136ad,
title = {Detection of Android Malicious Apps Based on the Sensitive Behaviors},
year = {2014},
url = {https://www.semanticscholar.org/paper/7ef85692a07bb1b9a659dc7ebabf2d52e51136ad},
abstract = {The number of malicious applications (apps) targeting the Android system has exploded in recent years. The evolution of malware makes it difficult to detect for static analysis tools. Various behavior-based malware detection techniques to mitigate this problem have been proposed. The drawbacks of the existing approaches are: the behavior features extracted from a single source lead to the low detection accuracy and the detection process is too complex. Especially it is unsuitable for smart phones with limited computing power. In this paper, we extract sensitive behavior features from three sources: API calls, native code dynamic execution, and system calls. We propose a sensitive behavior feature vector for representation multi-source behavior features uniformly. Our sensitive behavior representation is able to automatically describe the low-level OS-specific behaviors and high-level application-specific behaviors of an Android malware. Based on the unified behavior feature representation, w e provide a light weight decision function to differentiate a given application benign or malicious. We tested the effectiveness of our approach against real malware and the results of our experiments show that its detection accuracy up to 96% with acceptable performance overhead. For a given threshold t (t=9), we can detect the advanced malware family effectively.},
author = {Daiyong Quan and Lidong Zhai and Fan Yang and P. Wang},
journal = {2014 IEEE 13th International Conference on Trust, Security and Privacy in Computing and Communications},
volume = {},
pages = {877-883},
doi = {10.1109/TrustCom.2014.115},
}

@article{ad0b891162d47f9bc4538c48d9153d42078c3d70,
title = {Empirical assessment of machine learning-based malware detectors for Android},
year = {2014},
url = {https://www.semanticscholar.org/paper/ad0b891162d47f9bc4538c48d9153d42078c3d70},
abstract = {To address the issue of malware detection through large sets of applications, researchers have recently started to investigate the capabilities of machine-learning techniques for proposing effective approaches. So far, several promising results were recorded in the literature, many approaches being assessed with what we call in the lab validation scenarios. This paper revisits the purpose of malware detection to discuss whether such in the lab validation scenarios provide reliable indications on the performance of malware detectors in real-world settings, aka in the wild. To this end, we have devised several Machine Learning classifiers that rely on a set of features built from applications’ CFGs. We use a sizeable dataset of over 50 000 Android applications collected from sources where state-of-the art approaches have selected their data. We show that, in the lab, our approach outperforms existing machine learning-based approaches. However, this high performance does not translate in high performance in the wild. The performance gap we observed—F-measures dropping from over 0.9 in the lab to below 0.1 in the wild—raises one important question: How do state-of-the-art approaches perform in the wild?},
author = {Kevin Allix and Tegawendé F. Bissyandé and Quentin Jérôme and Jacques Klein and R. State and Y. L. Traon},
journal = {Empirical Software Engineering},
volume = {21},
pages = {183-211},
doi = {10.1007/s10664-014-9352-6},
}

@article{bd0a1acb9d90432d4cbb4a70a94326906d9595ca,
title = {Detecting repackaged smartphone applications in third-party android marketplaces},
year = {2012},
url = {https://www.semanticscholar.org/paper/bd0a1acb9d90432d4cbb4a70a94326906d9595ca},
abstract = {Recent years have witnessed incredible popularity and adoption of smartphones and mobile devices, which is accompanied by large amount and wide variety of feature-rich smartphone applications. These smartphone applications (or apps), typically organized in different application marketplaces, can be conveniently browsed by mobile users and then simply clicked to install on a variety of mobile devices. In practice, besides the official marketplaces from platform vendors (e.g., Google and Apple), a number of third-party alternative marketplaces have also been created to host thousands of apps (e.g., to meet regional or localization needs). To maintain and foster a hygienic smartphone app ecosystem, there is a need for each third-party marketplace to offer quality apps to mobile users.
 In this paper, we perform a systematic study on six popular Android-based third-party marketplaces. Among them, we find a common "in-the-wild" practice of repackaging legitimate apps (from the official Android Market) and distributing repackaged ones via third-party marketplaces. To better understand the extent of such practice, we implement an app similarity measurement system called DroidMOSS that applies a fuzzy hashing technique to effectively localize and detect the changes from app-repackaging behavior. The experiments with DroidMOSS show a worrisome fact that 5% to 13% of apps hosted on these studied marketplaces are repackaged. Further manual investigation indicates that these repackaged apps are mainly used to replace existing in-app advertisements or embed new ones to "steal" or re-route ad revenues. We also identify a few cases with planted backdoors or malicious payloads among repackaged apps. The results call for the need of a rigorous vetting process for better regulation of third-party smartphone application marketplaces.},
author = {Wu Zhou and Yajin Zhou and Xuxian Jiang and P. Ning},
doi = {10.1145/2133601.2133640},
}

@article{cf4eacb4fc84922937aa79ceb926eeff9cc7f5a6,
title = {AFrame: isolating advertisements from mobile applications in Android},
year = {2013},
url = {https://www.semanticscholar.org/paper/cf4eacb4fc84922937aa79ceb926eeff9cc7f5a6},
abstract = {Android uses a permission-based security model to restrict applications from accessing private data and privileged resources. However, the permissions are assigned at the application level, so even untrusted third-party libraries, such as advertisement, once incorporated, can share the same privileges as the entire application, leading to over-privileged problems. We present AFrame, a developer friendly method to isolate untrusted third-party code from the host applications. The isolation achieved by AFrame covers not only the process/permission isolation, but also the display and input isolation. Our AFrame framework is implemented through a minimal change to the existing Android code base; our evaluation results demonstrate that it is effective in isolating the privileges of untrusted third-party code from applications with reasonable performance overhead.},
author = {Xiao Zhang and A. Ahlawat and Wenliang Du},
journal = {Proceedings of the 29th Annual Computer Security Applications Conference},
volume = {},
pages = {},
doi = {10.1145/2523649.2523652},
}

@article{76c3428a29a00391bf9ba53e1454f557a4c30f9b,
title = {Are Your Training Datasets Yet Relevant? - An Investigation into the Importance of Timeline in Machine Learning-Based Malware Detection},
year = {2015},
url = {https://www.semanticscholar.org/paper/76c3428a29a00391bf9ba53e1454f557a4c30f9b},
abstract = {In this paper, we consider the relevance of timeline in the construction of datasets, to highlight its impact on the performance of a machine learning-based malware detection scheme. Typically, we show that simply picking a random set of known malware to train a malware detector, as it is done in many assessment scenarios from the literature, yields significantly biased results. In the process of assessing the extent of this impact through various experiments, we were also able to confirm a number of intuitive assumptions about Android malware. For instance, we discuss the existence of Android malware lineages and how they could impact the performance of malware detection in the wild.},
author = {Kevin Allix and Tegawendé F. Bissyandé and Jacques Klein and Y. L. Traon},
doi = {10.1007/978-3-319-15618-7_5},
}

@article{34fce3b85f830879ecf6dd9e4acacaebed52fc9d,
title = {Duet: library integrity verification for android applications},
year = {2014},
url = {https://www.semanticscholar.org/paper/34fce3b85f830879ecf6dd9e4acacaebed52fc9d},
abstract = {In recent years, the Android operating system has had an explosive growth in the number of applications containing third-party libraries for different purposes. In this paper, we identify three library-centric threats in the real-world Android application markets: (i) the library modification threat, (ii) the masquerading threat and (iii) the aggressive library threat. These three threats cannot effectively be fully addressed by existing defense mechanisms such as software analysis, anti-virus software and anti-repackaging techniques. To mitigate these threats, we propose Duet, a library integrity verification tool for Android applications at application stores. This is non-trivial because the Android application build process merges library code and application-specific logic into a single binary file. Our approach uses reverse-engineering to achieve integrity verification. We implemented a full working prototype of Duet. In a dataset with 100,000 Android applications downloaded from Google Play between February 2012 and September 2013, we verify integrity of 15 libraries. On average, 80.50% of libraries can pass the integrity verification. In-depth analysis indicates that code insertion, obfuscation, and optimization on libraries by application developers are the primary reasons for not passing integrity verification. The evaluation results not only indicate that Duet is an effective tool to mitigate library-centric attacks, but also provide empirical insight into the library integrity situation in the wild.},
author = {Wenhui Hu and Damien Octeau and P. Mcdaniel and Peng Liu},
doi = {10.1145/2627393.2627404},
}

@article{1a553fb7573fadf70b60f0afd2b7165154f1729e,
title = {Breaking and fixing the Android Launching Flow},
year = {2013},
url = {https://www.semanticscholar.org/paper/1a553fb7573fadf70b60f0afd2b7165154f1729e},
abstract = {The security model of the Android OS is based on the effective combination of a number of well-known security mechanisms (e.g. statically defined permissions for applications, the isolation offered by the Dalvik Virtual Machine, and the well-known Linux discretionary access control model). Although each security mechanism has been extensively tested and proved to be effective in isolation, their combination may suffer from unexpected security flaws. We show that this is actually the case by presenting a severe vulnerability in Android related to the application launching flow. This vulnerability is based on a security flaw affecting a kernel-level socket (namely, the Zygote socket). We also present an exploit of the vulnerability that allows a malicious application to mount a severe Denial-of-Service attack that makes the Android devices become totally unresponsive. Besides explaining the vulnerability (which affects all versions of Android up to version 4.0.3) we propose two fixes. One of the two fixes has been adopted in the official release of Android, starting with version 4.1. We empirically assess the impact of the vulnerability as well as the efficacy of the countermeasures on the end user. We conclude by extending our security analysis to the whole set of sockets, showing that other sockets do not suffer from the same vulnerability as the Zygote one.},
author = {A. Armando and A. Merlo and M. Migliardi and Luca Verderame},
journal = {Comput. Secur.},
volume = {39},
pages = {104-115},
doi = {10.1016/j.cose.2013.03.009},
}

@article{f82b83b4d24faba76d068f9f4c8c9e75cd8125c5,
title = {I know what leaked in your pocket: uncovering privacy leaks on Android Apps with Static Taint Analysis},
year = {2014},
url = {https://www.semanticscholar.org/paper/f82b83b4d24faba76d068f9f4c8c9e75cd8125c5},
abstract = {Android applications may leak privacy data carelessly or maliciously. In this work we perform inter-component data-flow analysis to detect privacy leaks between components of Android applications. Unlike all current approaches, our tool, called IccTA, propagates the context between the components, which improves the precision of the analysis. IccTA outperforms all other available tools by reaching a precision of 95.0% and a recall of 82.6% on DroidBench. Our approach detects 147 inter-component based privacy leaks in 14 applications in a set of 3000 real-world applications with a precision of 88.4%. With the help of ApkCombiner, our approach is able to detect inter-app based privacy leaks.},
author = {L. Li and Alexandre Bartel and Jacques Klein and Y. L. Traon and Steven Arzt and Siegfried Rasthofer and E. Bodden and Damien Octeau and P. Mcdaniel},
journal = {ArXiv},
volume = {abs/1404.7431},
pages = {},
arxivid = {1404.7431},
}

@article{5a4c939edb0dc975b3d4a84c16e5a2c98914cfa3,
title = {A Static Assurance Analysis of Android Applications},
year = {2013},
url = {https://www.semanticscholar.org/paper/5a4c939edb0dc975b3d4a84c16e5a2c98914cfa3},
abstract = {We describe an efficient approach to identify malicious Android applications through specialized static program analysis. Our solution – referred to as userintention program dependence analysis – performs offline analysis to find the dependence relations between user triggers and entry points to methods providing critical system functions. Analyzing these types of dependences in programs can identify the privileged operations (e.g., file, network operations and sensitive data access) that are not intended by users. We apply our technique on 708 free popular apps and 482 malware apps for Android OS, and the experimental results show that our technique can differentiate between legitimate and malware applications with high accuracy. We also explain the limitations of the user-intention-based approach and point out the need for practitioners to adopt multiple analysis tools for evaluating the assurance of Android applications.},
author = {Karim O. Elish and D. Yao and B. Ryder and Xuxian Jiang},
}

@article{c72e3b163e4f12844eb52bf2451fc0ba101e82fb,
title = {Techniques and Tools for Analyzing and Understanding Android Applications},
year = {2013},
url = {https://www.semanticscholar.org/paper/c72e3b163e4f12844eb52bf2451fc0ba101e82fb},
abstract = {With the rise of mobile technologies in recent years, smart mobile devices, such as smartphones and tablet computers, have become an integral part of people’s daily lives. Like traditional cell phones, smartphones can be used for phone calls and text messaging. Driven by recent innovations, current smartphones have also become media players, GPS systems, digital cameras, portable gaming consoles, and Web browsers. The capabilities and functionalities of smart mobile devices have been significantly expanded by the large number of third-party applications. As we witness a phenomenal growth in the number and variety of mobile applications, their usage has become increasingly prevalent, yet we lack a systematic understanding of this emerging, important software ecosystem. This dissertation presents novel, general techniques and tools for analyzing and understanding mobile applications. It focuses on analyzing applications on the Android operating system, which is currently the most popular mobile platform. This dissertation presents the first large-scale, systematic study of third-party Android applications. By investigating unique characteristics of Android applications, it uncovers and provides insights into common errors and pitfalls during application development and provides actionable recommendations where applicable. This dissertation also presents Heimdall, a static analysis framework that automatically tracks the flow of sensitive information in Android applications. Heimdall has been used to uncover potentially unsafe flows of sensitive information on a large scale, providing a comprehensive understanding of privacy-sensitive information usage in Android applications. The findings presented in this dissertation benefit the whole Android community, from platform and tool developers to application developers and end-users.},
author = {Liang Xu},
}

@article{b963cefbbdf88ce22612b6bf16267b74f33b2214,
title = {Machine Learning-Based Malware Detection for Android Applications: History Matters!},
year = {2014},
url = {https://www.semanticscholar.org/paper/b963cefbbdf88ce22612b6bf16267b74f33b2214},
abstract = {Machine Learning-based malware detection is a promising scalable method for identifying suspicious applications. In particular, in today’s mobile computing realm where thousands of applications are daily poured into markets, such a technique could be valuable to guarantee a strong filtering of malicious apps. The success of machine-learning approaches however is highly dependent on (1) the quality of the datasets that are used for training and of (2) the appropriateness of the tested datasets with regards to the built classifiers. Unfortunately, there is scarce mention of these aspects in the evaluation of existing state-of-the-art approaches in the literature. In this paper, we consider the relevance of history in the construction of datasets, to highlight its impact on the performance of the malware detection scheme. Typically, we show that simply picking a random set of known malware to train a malware detector, as it is done in most assessment scenarios from the literature, yields significantly biased results. In the process of assessing the extent of this impact through various experiments, we were also able to confirm a number of intuitive assumptions about Android malware. For instance, we discuss the existence of Android malware lineages and how they could impact the performance of malware detection in the wild.},
author = {Kevin Allix and Tegawendé F. Bissyandé and Jacques Klein and Y. L. Traon},
}

@article{0d204bf0c280f8b6ef6612e7e05be555561b3c07,
title = {Permission-combination-based scheme for Android mobile malware detection},
year = {2014},
url = {https://www.semanticscholar.org/paper/0d204bf0c280f8b6ef6612e7e05be555561b3c07},
abstract = {With the increase use of Android mobile phones, more Android malwares are being developed. Android malware detection becomes a crucial task. In this paper, we present a permission-combination-based scheme for Android malware detection. The Android malware detection scheme is based on permission combinations declared in the application manifest file. We obtain the permission combinations that are requested frequently by malwares but rarely by benign applications. We generate rule sets based on the permission combinations. Our experimental results show that the malware detection rate is up to 96%, and the benign application recognition rate is up to 88%. Our experimental results with real malwares show that the Android malware detection scheme is very efficient and effective.},
author = {Shuang Liang and Xiaojiang Du},
journal = {2014 IEEE International Conference on Communications (ICC)},
volume = {},
pages = {2301-2306},
doi = {10.1109/ICC.2014.6883666},
}

@article{fef5c676b2238304334b41b30d974d52338c236d,
title = {MAST: triage for market-scale mobile malware analysis},
year = {2013},
url = {https://www.semanticscholar.org/paper/fef5c676b2238304334b41b30d974d52338c236d},
abstract = {Malware is a pressing concern for mobile application market operators. While current mitigation techniques are keeping pace with the relatively infrequent presence of malicious code, the rapidly increasing rate of application development makes manual and resource-intensive automated analysis costly at market-scale. To address this resource imbalance, we present the Mobile Application Security Triage (MAST) architecture, a tool that helps to direct scarce malware analysis resources towards the applications with the greatest potential to exhibit malicious behavior. MAST analyzes attributes extracted from just the application package using Multiple Correspondence Analysis (MCA), a statistical method that measures the correlation between multiple categorical (i.e., qualitative) data. We train MAST using over 15,000 applications from Google Play and a dataset of 732 known-malicious applications. We then use MAST to perform triage on three third-party markets of different size and malware composition---36,710 applications in total. Our experiments show that MAST is both effective and performant. Using MAST ordered ranking, malware-analysis tools can find 95% of malware at the cost of analyzing 13% of the non-malicious applications on average across multiple markets, and MAST triage processes markets in less than a quarter of the time required to perform signature detection. More importantly, we show that successful triage can dramatically reduce the costs of removing malicious applications from markets.},
author = {Saurabh Chakradeo and Bradley Reaves and Patrick Traynor and William Enck},
doi = {10.1145/2462096.2462100},
}

@article{76f96ffa541f52f67469ac8fbd34b9dee9bf8ee8,
title = {RiskRanker: scalable and accurate zero-day android malware detection},
year = {2012},
url = {https://www.semanticscholar.org/paper/76f96ffa541f52f67469ac8fbd34b9dee9bf8ee8},
abstract = {Smartphone sales have recently experienced explosive growth. Their popularity also encourages malware authors to penetrate various mobile marketplaces with malicious applications (or apps). These malicious apps hide in the sheer number of other normal apps, which makes their detection challenging. Existing mobile anti-virus software are inadequate in their reactive nature by relying on known malware samples for signature extraction. In this paper, we propose a proactive scheme to spot zero-day Android malware. Without relying on malware samples and their signatures, our scheme is motivated to assess potential security risks posed by these untrusted apps. Specifically, we have developed an automated system called RiskRanker to scalably analyze whether a particular app exhibits dangerous behavior (e.g., launching a root exploit or sending background SMS messages). The output is then used to produce a prioritized list of reduced apps that merit further investigation. When applied to examine 118,318 total apps collected from various Android markets over September and October 2011, our system takes less than four days to process all of them and effectively reports 3281 risky apps. Among these reported apps, we successfully uncovered 718 malware samples (in 29 families) and 322 of them are zero-day (in 11 families). These results demonstrate the efficacy and scalability of RiskRanker to police Android markets of all stripes.},
author = {Michael C. Grace and Yajin Zhou and Qiang Zhang and S. Zou and Xuxian Jiang},
doi = {10.1145/2307636.2307663},
}

@article{2645487b498bf4356ee52e62e7badd936894b81b,
title = {Flow Permissions for Android},
year = {2013},
url = {https://www.semanticscholar.org/paper/2645487b498bf4356ee52e62e7badd936894b81b},
abstract = {This paper proposes Flow Permissions, an extension to the Android permission mechanism. Unlike the existing permission mechanism our permission mechanism contains semantic information based on information flows. Flow Permissions allow users to examine and grant explicit information flows within an application (e.g., a permission for reading the phone number and sending it over the network) as well as implicit information flows across multiple applications (e.g., a permission for reading the phone number and sending it to another application already installed on the user's phone). Our goal with Flow Permissions is to provide visibility into the holistic behavior of the applications installed on a user's phone. Our evaluation compares our approach to dynamic flow tracking techniques; our results with 600 popular applications and 1,200 malicious applications show that our approach is practical and effective in deriving Flow Permissions statically.},
author = {Shashank Holavanalli and Don Manuel and Vishwas Nanjundaswamy and Brian Rosenberg and Feng Shen and Steven Y. Ko and Lukasz Ziarek},
journal = {2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
volume = {},
pages = {652-657},
doi = {10.1109/ASE.2013.6693128},
}

@article{810b3b11b692d430aed3938f5bb5e141af987999,
title = {A Light-Weight Software Environment for Confining Android Malware},
year = {2014},
url = {https://www.semanticscholar.org/paper/810b3b11b692d430aed3938f5bb5e141af987999},
abstract = {Mobile devices are becoming increasingly general-purpose, and therefore the physical boundary used to separate important resources disappears. As a result, malicious applications (apps) get chances to abuse resources that are available on the mobile platform. In this paper, we propose resource virtualization as a security mechanism for the Android system to strengthen the physical barrier between many types of resources and confine resource-abusing Android apps. The physical resources on a mobile device are virtualized to a different virtual view for selected Android apps. Resource virtualization simulates a partial but consistent virtual view of the Android resources. Therefore, it can not only confine the resource-abusing apps effectively, but also ensure the usability of these apps. We implement a system prototype, RVL, and evaluate it with real-world apps of various types. Our results demonstrate its effectiveness on malicious Android apps and its compatibility and usability on benign Android apps.},
author = {Xiaolei Li and Guangdong Bai and Benjamin Thian and Zhenkai Liang and Heng Yin},
journal = {2014 IEEE Eighth International Conference on Software Security and Reliability-Companion},
volume = {},
pages = {158-167},
doi = {10.1109/SERE-C.2014.34},
}
